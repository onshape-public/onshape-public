<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>– Welcome to the Onshape Developer Documentation</title><link>https://onshape-public.github.io/docs/</link><description>Recent content in Welcome to the Onshape Developer Documentation on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 12 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://onshape-public.github.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: API Explorer</title><link>https://onshape-public.github.io/docs/api-intro/explorer/</link><pubDate>Mon, 18 May 2020 20:39:14 -0400</pubDate><guid>https://onshape-public.github.io/docs/api-intro/explorer/</guid><description>
&lt;p>We document all available Onshape REST API endpoints in our Glassworks API Explorer:&lt;/p>
&lt;p>&lt;b>&lt;font size="5">&lt;a href="https://cad.onshape.com/glassworks/explorer/">https://cad.onshape.com/glassworks/explorer/&lt;/a>&lt;/font>&lt;/b>&lt;/p>
&lt;hr>
&lt;p>This API Explorer site enables you to run API requests directly within its interface and provides the output from the API call. To try an endpoint in the API Explorer, follow these steps or follow along with the video below:&lt;/p>
&lt;ol>
&lt;li>Open this public Onshape document in your browser:
&lt;font size="1">&lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22">https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22&lt;/a>&lt;/font>&lt;/li>
&lt;li>Open the API Explorer in a new browser tab: &lt;a href="https://cad.onshape.com/glassworks/explorer/">https://cad.onshape.com/glassworks/explorer/&lt;/a>
&lt;ul>
&lt;li>Note: For Enterprise accounts, substitue &lt;code>cad&lt;/code> in this URL with your company name.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Scroll down to &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Document">Document&lt;/a>.&lt;/li>
&lt;li>Click to expand the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Document/getDocument">&lt;code>getDocument&lt;/code>&lt;/a> endpoint. (Hint: it appears in the API Ref as &lt;code>GET /documents/{did}&lt;/code>).&lt;/li>
&lt;li>Go back to the public document you opened in Step 2, and copy the document ID from the Onshape URL (&lt;code>e60c4803eaf2ac8be492c18e&lt;/code>).
&lt;img src="https://onshape-public.github.io/images/OnshapeAPIGuidePublicDoc.png" alt="image">&lt;/li>
&lt;li>Paste the document ID into the &lt;code>did&lt;/code> field in the API Explorer.
&lt;ul>
&lt;li>Note: If you can&amp;rsquo;t edit the &lt;code>did&lt;/code> field, click the &lt;strong>Try it out&lt;/strong> button. This will toggle to a &lt;strong>Cancel&lt;/strong> button when the fields are editable.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Scroll down and click &lt;strong>Execute&lt;/strong>.
&lt;ul>
&lt;li>Note: If you receive a &lt;code>403&lt;/code> error, see the &lt;a href="#authentication">Authentication&lt;/a> section for help.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Scroll to the bottom of the 200 response body. We have correctly returned &lt;code>Onshape API Guide&lt;/code> as the document name.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/GlassworksAPIExplorerDemo.gif" alt="gif of using glassworks">&lt;/p>
&lt;p>&lt;strong>IMPORTANT NOTE&lt;/strong>: The documentation in the API Explorer reflects the supported interface. Some API calls may, for historical reasons, return additional undocumented fields. Unless the return fields are documented in the API Explorer, you should NOT use them, as they may be removed without warning. Your application should always ignore unexpected or undocumented return data. Onshape reserves the right to add, remove or change any undocumented fields.&lt;/p>
&lt;h3 id="authentication">Authentication&lt;/h3>
&lt;p>You can authenticate in the API Explorer in one of three ways:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Onshape&lt;/strong>:
&lt;ol>
&lt;li>Open Onshape in a new tab in your browser.&lt;/li>
&lt;li>Sign in with your Onshape credentials. Onshape will pass your credentials to the API Explorer.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>API Keys&lt;/strong>:
&lt;ol>
&lt;li>Click &lt;strong>Authorize&lt;/strong> in the top-right of the API Explorer page and scroll to the bottom of the dialog.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/glassworks-auth-button.png" alt="Glassworks Authorize button" width=175>&lt;/li>
&lt;li>Provide your API access key in the Username field and your secret key in the Password field. See &lt;a href="https://onshape-public.github.io/docs/auth/apikeys">API Keys&lt;/a> for help creating your API Keys. Do NOT enter your Onshape credentials.
&lt;/br>&lt;img style='border:.7px solid #808080' src="https://onshape-public.github.io/images/ApiExplorerBasicAuth.png" alt="drawing" width="500"/>&lt;/li>
&lt;li>Click &lt;strong>Authorize&lt;/strong>, and then click &lt;strong>Close&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>Oauth&lt;/strong>:
&lt;ol>
&lt;li>Click &lt;strong>Authorize&lt;/strong> in the top-right of the API Explorer page.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/glassworks-auth-button.png" alt="Glassworks Authorize button" width=175>&lt;/li>
&lt;li>Fill out the OAuth fields. See &lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth&lt;/a> for more information on autheneticating with OAuth2.&lt;/li>
&lt;li>Click &lt;strong>Authorize&lt;/strong>, and then click &lt;strong>Close&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="use-the-auto-fill-feature">Use the Auto-fill feature&lt;/h3>
&lt;ol>
&lt;li>Expand the endpoint you want to use in the API Explorer.&lt;/li>
&lt;li>Paste an entire Onshape URL into the top field.&lt;/li>
&lt;li>Click &lt;strong>Auto-fill&lt;/strong>. The document ID, workspace/version/microversion ID, and element ID are pushed from the URL into the correct fields.&lt;/li>
&lt;li>Confirm all fields are filled out as expected. Not every parameter can be extracted from an Onshape URL, so there may be more fields to fill out.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/GlassworksAutofill.png" alt="glassworks api explorer auto fill feature">&lt;/p>
&lt;h3 id="view-response-body-docs">View response body docs&lt;/h3>
&lt;ol>
&lt;li>Expand the endpoint you want to use the in API Explorer.&lt;/li>
&lt;li>Scroll down to the Responses section.&lt;/li>
&lt;li>Click Schema.&lt;/li>
&lt;li>Click the &lt;code>[...]&lt;/code> symbols to expand the docs for the response JSON.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/APIExplorerResponseJSON.png" alt="glassworks api explorer response json docs">&lt;/p>
&lt;h3 id="view-request-body-docs">View request body docs&lt;/h3>
&lt;ol>
&lt;li>Expand the endpoint you want to use the in API Explorer.&lt;/li>
&lt;li>&lt;strong>Click the &lt;em>Cancel&lt;/em> button to make the schema viewable.&lt;/strong>&lt;/li>
&lt;li>Click Schema.&lt;/li>
&lt;li>Click the &lt;code>[...]&lt;/code> symbols to expand the docs for the response JSON.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/APIExplorerRequestJSON.png" alt="glassworks api explorer response json docs">&lt;/p>
&lt;h3 id="copy-a-curl">Copy a cURL&lt;/h3>
&lt;ol>
&lt;li>Expand the endpoint you want to use in the API Explorer.&lt;/li>
&lt;li>Fill out the parameter fields.&lt;/li>
&lt;li>Click Execute in the API Explorer.&lt;/li>
&lt;li>Copy the curl from the Curl field.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/APIExplorerCopyCurl.png" alt="api explorer curl copy">&lt;/p>
&lt;h3 id="troubleshooting">Troubleshooting&lt;/h3>
&lt;ul>
&lt;li>If the parameter fields in the API Explorer are grayed out, click the &lt;strong>Try it Out!&lt;/strong> button to toggle it to a &lt;strong>Cancel&lt;/strong> button. The parameter fields should become editable.&lt;/li>
&lt;li>If you can&amp;rsquo;t see the request body JSON docs, click the &lt;strong>Cancel&lt;/strong> button to toggle it back to the &lt;strong>Try it Out!&lt;/strong> button.&lt;/li>
&lt;li>If you see authentication issues, review the &lt;a href="#authentication">Authentication&lt;/a> section above.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Architecture</title><link>https://onshape-public.github.io/docs/api-intro/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-intro/architecture/</guid><description>
&lt;p>Design in Onshape typically beings with a document, which is the container that includes all content related to a specific design. All data in an Onshape document is stored in Elements. Part Studios and Assemblies are two of the most common element types in a design. Throughout the design process, creating versions can be useful for product development management while working on the “Main” workspace. See also:&lt;/p>
&lt;ul>
&lt;li>The &lt;a href="https://onshape-public.github.io/docs/api-intro/">API Introduction&lt;/a> page for information on how documents, workspaces, and elements are assembled into a URL.&lt;/li>
&lt;li>The &lt;a href="https://onshape-public.github.io/docs/api-adv/associativity">Associativity&lt;/a> page for information on how Parts, Assemblies, and Elements relate to each other.&lt;/li>
&lt;/ul>
&lt;h2 id="elements">Elements&lt;/h2>
&lt;p>All data in an Onshape document are stored in Elements (represented as tabs in the user interface). Onshape documents contain five kinds of elements:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Part Studio&lt;/strong>: Contains zero or more parts&lt;/li>
&lt;li>&lt;strong>Assembly&lt;/strong>: Contains zero or more parts or assemblies&lt;/li>
&lt;li>&lt;strong>Blob&lt;/strong> (Binary Large OBject): Can be provided by a partner or by the end user. For example, the user can upload a PDF file, an image, or a text file. Partner applications can store arbitrary data, but we recommend using the &lt;a href="https://onshape-public.github.io/docs/app-dev/structuredstorage">structured storage&lt;/a> available in an element for better integration.&lt;/li>
&lt;li>&lt;strong>Application&lt;/strong>: Presents an iframe to the user. The user interface is managed by a server that can be provided by a third-party. Onshape Drawings are a special case of an application element.&lt;/li>
&lt;li>&lt;strong>Feature Studio&lt;/strong>: Contains the definition for Onshape Features, which are defined in FeatureScript.&lt;/li>
&lt;/ul>
&lt;h2 id="workspaces-versions-and-microversions">Workspaces, Versions, and Microversions&lt;/h2>
&lt;p>A document is stored in Onshape as a collection of changes.&lt;/p>
&lt;ul>
&lt;li>You can think of a &lt;strong>workspace&lt;/strong> as a branch of the document, similar to a branch in a source control system. Documents can be branched to create new workspaces.&lt;/li>
&lt;li>Each individual change to the document creates a new document &lt;strong>microversion&lt;/strong>. As the document is edited, changes are applied to the active workspace, creating new microversions.&lt;/li>
&lt;li>Periodically, the user may designate versions of the document. A &lt;strong>version&lt;/strong> is a named snapshot of the entire document at some point in time (that is, at some microversion).&lt;/li>
&lt;/ul>
&lt;p>You cannot change a version or microversion of a document; all changes are applied to a workspace (and create a new microversion). Thus, while in general the &lt;code>GET&lt;/code> methods of the API can read from a version, microversion, or workspace, the &lt;code>POST&lt;/code> methods generally require a workspace, and create a new microversion when data is written to the document. (An exception is that it is possible to set metadata within a version; this does not create a new microversion).&lt;/p>
&lt;p>The following IDs are used by many of the APIs. Each ID (except for Geometry IDs such as Part, Face and Edge) is a 24-character string that is used internally by Onshape to uniquely identify the resource. The Geometry IDs are variable-length strings used to resolve to a specific geometric entity within a model.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ID&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>User ID&lt;/strong>&lt;/td>
&lt;td>Identifies a single user.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Document ID&lt;/strong>&lt;/td>
&lt;td>Identifies a document. The logged-in user must have access to the requested document for the API to succeed.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Workspace ID&lt;/strong>&lt;/td>
&lt;td>The Workspace ID identifies a workspace within the document. Workspaces are used to distinguish between different branches of the document.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Version ID&lt;/strong>&lt;/td>
&lt;td>The Version ID identifies a specific named version.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Microversion ID&lt;/strong>&lt;/td>
&lt;td>The Microversion ID identifies an internal revision of the document.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Element ID&lt;/strong>&lt;/td>
&lt;td>The Element ID identifies an element within the document.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Part ID &lt;/br> Face ID &lt;/br> Edge ID&lt;/strong>&lt;/td>
&lt;td>The Part ID identifies a part within a part studio. The Part ID should generally not be stored for long-term use, as it is only expected to be valid during the course of a session.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Note that a Part ID may reference a part that no longer exists if the model is changed, so it is best to specify a Version or Microversion to pick the context for the Part ID. Note that even with the Version or Microversion, internal changes to the Onshape system may also change the Part ID. Onshape provides mechanisms for maintaining persistent references. See the &lt;a href="https://onshape-public.github.io/docs/api-adv/associativity">Associativity&lt;/a> page for more information. Face and Edge IDs are used in similar ways.&lt;/p>
&lt;p>The following table identifies Onshape concepts and the corresponding Git concepts. Note that this is not a direct mapping, and the implementation of the concepts is very different.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Onshape concept&lt;/th>
&lt;th>Git concept&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Document&lt;/td>
&lt;td>Repository&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Element&lt;/td>
&lt;td>File&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Workspace&lt;/td>
&lt;td>Branch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Version&lt;/td>
&lt;td>Tag&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Microversion&lt;/td>
&lt;td>Commit&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="linked-documents">Linked Documents&lt;/h2>
&lt;p>Although a document can contain a complex model tree involving many Part Studio and Assembly elements, it is often more efficient to split the content into multiple documents. Connections between documents always refer to a specific version of the target document. &lt;em>Once a version is used as the target of a linked document, that document version is preserved as long as any document references it, even if the containing document is deleted.&lt;/em> Additionally, any user that has access to the referring document will have limited read access to the target document, regardless of what permissions are currently on the target document.&lt;/p>
&lt;h2 id="configurations">Configurations&lt;/h2>
&lt;p>Onshape Part Studios can be constructed to be configurable using Onshape Configurations. API calls that reference Part Studios (primarily within the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part">Parts&lt;/a> and &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio">Part Studios&lt;/a> APIs) often accept a &lt;code>configuration&lt;/code> parameter that identifies what specific configuration of the Part Studios is being referenced. When not specified, the API implementation typically uses the configuration that is currently selected within the Part Studio. An interactive ad-hoc API call might not behave consistently in an application, so be sure to specify the configuration parameter where applicable.&lt;/p>
&lt;h2 id="onshape-data-model">Onshape Data Model&lt;/h2>
&lt;p>Onshape data is stored in replicated databases in the cloud. The Onshape data model is influenced by the Git data model and similar source code repositories.&lt;/p>
&lt;p>Documents contain &lt;strong>elements&lt;/strong>. Elements are presented as tabs in the user interface. With some exceptions, all data in a document is stored within an element. The following table describes what data stored in each Element type:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Element Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Part Studio&lt;/strong>&lt;/td>
&lt;td>Each Part Studio contains exactly one Feature list. The Feature list contains Features such as sketches, planes, extrudes, etc. Each Feature contains one or parameters. Whenever the Feature list changes, the parametric history is evaluated, and the model is regenerated.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Assembly&lt;/strong>&lt;/td>
&lt;td>Each Assembly contains an assembly tree, which contains parts and/or other assemblies (sub-assemblies), along with mate information. Onshape provides an API call to retrieve the assembly tree definition.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Blob&lt;/strong>&lt;/td>
&lt;td>Each Blob element contains an uninterpreted binary object that has been uploaded to Onshape, typically from a file. Onshape depends on the browser client to display some blob data (e.g., PDF and image data), but does not interpret the data. A blob element can be updated with new data.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Application&lt;/strong>&lt;/td>
&lt;td>Each Application element contains zero or more sub-elements, providing a structured set of transactional data that is defined and managed by an application. Application data can be displayed in the Onshape tab in an iframe; the application is responsible for rendering the data in the iframe from its server.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Note that Onshape Drawing elements are Application elements managed by Onshape.&lt;/p>
&lt;p>Tessellated data is not stored persistently in Onshape; it is generated on demand for display by the Onshape clients, or in response to application REST API requests. This data may be cached for performance.&lt;/p>
&lt;h3 id="document-data">Document data&lt;/h3>
&lt;p>All elements, including Assemblies, Part Studios, Drawings, or even apps, are history based. Each change to an element or set of elements represents a unique record in the document’s history, known as a microversion. The document can be restored to that particular state any time in the future.&lt;/p>
&lt;h3 id="part-studio-data">Part Studio data&lt;/h3>
&lt;p>The Part Studio element is defined by a list of features, some of which (e.g., a sketch), may have a complex internal structure composed of entities. Part Studio features and entities are referenced by unique persistent identifiers. Part Studio features and entities can appear, disappear, and reappear depending on the current microversion of the model.&lt;/p>
&lt;h3 id="assembly-data">Assembly data&lt;/h3>
&lt;p>The Assembly element is defined as a list of assembly features and a tree of subassemblies/part instances. Occurrence ID is a unique persistent identifier of an occurrence of a part in the assembly structure.&lt;/p>
&lt;h3 id="external-application-data">External application data&lt;/h3>
&lt;p>An external application has complete control over how it manages/stores documents, however, to take advantage of the Onshape data model, there is a set of endpoints they should use to store state. These are collectively known as the AppElement API.&lt;/p>
&lt;h3 id="model-presentation-data">Model presentation data&lt;/h3>
&lt;p>A valid model definition usually corresponds to a real-world manufacturable topology, represented internally as a set of parts, faces, edges, and vertices and the set of relations between them. Each of these has a unique identifier in every state of the model. The identifier represents an encoded index in the model’s history, and its value depends on the structure of the model’s history. The value is not guaranteed to be preserved across model changes, and will almost always change if the model changes in significant ways. The model can be tessellated into a set of geometric primitives, which approximate the shape of the model. Tessellated data can be used for visual representation of the model or other processing related to the shape of the model.&lt;/p>
&lt;p>The following changes in the topological representation can occur between two microversions of the model:&lt;/p>
&lt;ul>
&lt;li>New topological entities appear&lt;/li>
&lt;li>Id of existing topology change&lt;/li>
&lt;li>Topological entities disappear&lt;/li>
&lt;li>Existing topological entities are merged into a single entity&lt;/li>
&lt;li>Existing topological entity are split into multiple entities&lt;/li>
&lt;/ul>
&lt;p>The model microversion and topology ID can be used to identify topological entities across the model changes. Topology ID defined in a specific microversion can be translated into a set of topology IDs in the current microversion of the model. (The Topology ID is sometimes referred to as a Deterministic ID within Onshape, and is exposed in specific API calls as partId, faceId, etc.). See the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio">PartStudio APIs&lt;/a> to see what topology IDs are exposed.&lt;/p></description></item><item><title>Docs: Quick Start</title><link>https://onshape-public.github.io/docs/api-intro/quickstart/</link><pubDate>Mon, 18 May 2020 20:39:14 -0400</pubDate><guid>https://onshape-public.github.io/docs/api-intro/quickstart/</guid><description>
&lt;p>In this example, we will call an Onshape REST API endpoint to send a document name to our console. Please note that the sample shown on this page is only designed to be used as a quick start guide and does not represent a full Onshape application.&lt;/p>
&lt;h2 id="system-requirements">System Requirements&lt;/h2>
&lt;ul>
&lt;li>You must be signed in to your Onshape account at &lt;a href="https://cad.onshape.com">https://cad.onshape.com&lt;/a> (or &lt;a href="https://companyName.onshape.com">https://companyName.onshape.com&lt;/a> for Enterprise accounts).&lt;/li>
&lt;li>This example is coded in Python. The equivalent code is provided in other languages at the end of the example. To follow along with this tutorial, you can download and install Python here: &lt;a href="https://www.python.org/downloads/">https://www.python.org/downloads/&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="review-the-api-endpoint">Review the API Endpoint&lt;/h2>
&lt;ol>
&lt;li>Go to the &lt;a href="https://cad.onshape.com/glassworks/explorer">API Explorer&lt;/a> and scroll to &lt;code>Document&lt;/code>.&lt;/li>
&lt;li>Expand the &lt;code>GET /documents/{did}&lt;/code> endpoint. Note that in the URL, the name of this API is &lt;code>getDocument&lt;/code>.&lt;/li>
&lt;li>Make a note of the URL structure and the parameters required to make this request. This will become the fixed URL part of our API call. &lt;/br>
&lt;img src="https://onshape-public.github.io/images/Glassworks_getDocument.png" alt="image"> &lt;/br>
For this endpoint, we only need to get the document ID from the document URL.&lt;/li>
&lt;li>Scroll down and make a note of the &lt;code>Media Type&lt;/code> that we’ll need to include in our header. &lt;/br>
&lt;img src="https://onshape-public.github.io/images/Glassworks_MediaType.png" alt="image">&lt;/li>
&lt;/ol>
&lt;h2 id="review-the-document">Review the Document&lt;/h2>
&lt;p>Navigate to &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22">this public document&lt;/a>, and make a note of the document ID in the URL (&lt;code>e60c4803eaf2ac8be492c18e&lt;/code>). &lt;/br>
&lt;img src="https://onshape-public.github.io/images/OnshapeAPIGuidePublicDoc.png" alt="image">&lt;/p>
&lt;h2 id="create-your-api-keys">Create your API Keys&lt;/h2>
&lt;ol>
&lt;li>Go to &lt;a href="https://dev-portal.onshape.com">https://dev-portal.onshape.com&lt;/a>.&lt;/li>
&lt;li>In the left pane, click &lt;code>API keys&lt;/code>.&lt;/li>
&lt;li>Click the &lt;code>Create new API key&lt;/code> button.&lt;/li>
&lt;li>Select the following permissions for your app:
&lt;ul>
&lt;li>&lt;code>Application can read your documents.&lt;/code>&lt;/li>
&lt;li>&lt;code>Application can write to your documents.&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click the &lt;code>Create API key&lt;/code> button. &lt;/br>
&lt;img src="https://onshape-public.github.io/images/CreateNewAPIKey.png" alt="image">&lt;/li>
&lt;li>Copy both the &lt;strong>access key&lt;/strong> and &lt;strong>secret key&lt;/strong> from the pop-up window, save them somewhere, then click the &lt;code>Close&lt;/code> button.
&lt;/br>&lt;strong>IMPORTANT NOTE: You will not be able to find the secret key again, so save it somewhere safe!&lt;/strong>&lt;/br>
&lt;img src="https://onshape-public.github.io/images/APIKeySecretKey.png" alt="image">&lt;/li>
&lt;li>The details for your application appear. &lt;/br>
&lt;img src="https://onshape-public.github.io/images/DevPortalKeys.png" alt="image">&lt;/li>
&lt;li>Open your terminal and run the following command, replacing &lt;code>ACCESS_KEY&lt;/code> and &lt;code>SECRET_KEY&lt;/code> with the &lt;strong>access key&lt;/strong> and &lt;strong>secret key&lt;/strong> you created above. Remember to include the colon (&lt;code>:&lt;/code>) between the keys.
&lt;ul>
&lt;li>&lt;strong>MacOS&lt;/strong>:
&lt;pre tabindex="0">&lt;code>printf ACCESS_KEY:SECRET_KEY | base64
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;strong>Windows&lt;/strong>:
&lt;pre tabindex="0">&lt;code>powershell &amp;#34;[convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(\&amp;#34;ACCESS_KEY:SECRET_KEY\&amp;#34;))&amp;#34;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>You will receive a long, base-64-encoded string. You will need this string later, so keep it somewhere safe. We&amp;rsquo;ll refer to it as our &lt;code>CREDENTIALS&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h2 id="write-your-code">Write Your Code&lt;/h2>
&lt;ol>
&lt;li>Create a new file called &lt;code>hello.py&lt;/code>.&lt;/li>
&lt;li>Start your file by importing the necessary libraries.&lt;/br>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">import&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">import&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">jsons&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Next, define the URL for the API call:&lt;/br>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Assemble the URL for the API call &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>api_url = &lt;span style="color:#a50">&amp;#34;ASSEMBLED_URL&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Replace &lt;code>ASSEMBLED_URL&lt;/code> with the fully formed API. This is where we’ll put together everything we’ve learned so far:
&lt;ol>
&lt;li>The base URL:
&lt;ul>
&lt;li>&lt;code>https://cad.onshape.com/api&lt;/code>&lt;/li>
&lt;li>&lt;code>https://companyName.onshape.com/api&lt;/code> for Enterprise accounts&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The fixed URL is specified in the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Document/getDocument">&lt;code>getDocument&lt;/code>&lt;/a> API in Glassworks: &lt;code>/documents/{did}&lt;/code>&lt;/li>
&lt;li>The document ID parameter from the public document URL to include in the fixed URL: &lt;code>{did}: e60c4803eaf2ac8be492c18e&lt;/code>&lt;/li>
&lt;li>Together, this makes the URL for our API request:
&lt;code>https://cad.onshape.com/api/documents/e60c4803eaf2ac8be492c18e&lt;/code> &lt;/br>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>We don&amp;rsquo;t need to send any optional parameters with our request, so we can define them as an empty object:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Optional query parameters can be assigned &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>params = {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>Now, define your API keys: &lt;/br>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Use the encoded authorization string you created from your API Keys.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>api_keys = (&lt;span style="color:#a50">&amp;#34;CREDENTIALS&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>Replace &lt;code>CREDENTIALS&lt;/code> with the string you created in the last section.&lt;/li>
&lt;li>Next, define your headers:&lt;/br>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Define the header for the request &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>headers = {&lt;span style="color:#a50">&amp;#39;Accept&amp;#39;&lt;/span>: &lt;span style="color:#a50">&amp;#39;MEDIA_TYPE&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>: &lt;span style="color:#a50">&amp;#39;application/json&amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="9">
&lt;li>Replace &lt;code>MEDIA_TYPE&lt;/code> with the Media type we obtained from the API Explorer during the Review the API section above:&lt;/br>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>application/json;charset=UTF-&lt;span style="color:#099">8&lt;/span>;qs=&lt;span style="color:#099">0.09&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="10">
&lt;li>Put all the variables you just defined together into the request:&lt;/br>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Put everything together to make the API request &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>response = requests.get(api_url,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> params=params,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth=api_keys,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers=headers)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="11">
&lt;li>And finally, print the name value from the response:&lt;/br>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Convert the response to formatted JSON and print the `name` property&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0aa">print&lt;/span>(json.dumps(response.json()[&lt;span style="color:#a50">&amp;#34;name&amp;#34;&lt;/span>], indent=&lt;span style="color:#099">4&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="12">
&lt;li>Make sure your file matches the full example below:&lt;/br>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">import&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">import&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">jsons&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Assemble the URL for the API call &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>api_url = &lt;span style="color:#a50">&amp;#34;https://cad.onshape.com/api/documents/e60c4803eaf2ac8be492c18e&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Optional query parameters can be assigned &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>params = {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Use the encoded authorization string you created from your API Keys.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>api_keys = (&lt;span style="color:#a50">&amp;#34;CREDENTIALS&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Define the header for the request &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>headers = {&lt;span style="color:#a50">&amp;#39;Accept&amp;#39;&lt;/span>: &lt;span style="color:#a50">&amp;#39;application/json;charset=UTF-8;qs=0.09&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>: &lt;span style="color:#a50">&amp;#39;application/json&amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Putting everything together to make the API request &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>response = requests.get(api_url,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> params=params,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth=api_keys,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers=headers)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Convert the response to formatted JSON and print the `name` property&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0aa">print&lt;/span>(json.dumps(response.json()[&lt;span style="color:#a50">&amp;#34;name&amp;#34;&lt;/span>], indent=&lt;span style="color:#099">4&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="run-your-code">Run Your Code&lt;/h2>
&lt;ol>
&lt;li>Open your terminal and navigate into the folder where you saved your &lt;code>hello.py&lt;/code> file: &lt;code>cd ~/&amp;lt;your-file-path&amp;gt;&lt;/code>&lt;/li>
&lt;li>Install the necessary modules:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python3 -m pip install requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python3 -m pip install jsons
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Run your code:&lt;/br>&lt;code>python3 hello.py&lt;/code>&lt;/li>
&lt;li>Confirm that your console displays:&lt;/br>&lt;code>&amp;quot;Onshape API Guide&amp;quot;&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="other-language-examples">Other Language Examples&lt;/h2>
&lt;p>Remember to replace &lt;code>CREDENTIALS&lt;/code> with your credentials.&lt;/p>
&lt;h3 id="curl">cURL&lt;/h3>
&lt;p>Returns the entire response json. Scroll to the bottom to the see &lt;code>name&lt;/code> field.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-curl" data-lang="curl">curl -X &amp;#39;GET&amp;#39; \
https://cad.onshape.com/api/documents/e60c4803eaf2ac8be492c18e&amp;#39; \
-H &amp;#39;Content-Type: application/json&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;
&lt;/code>&lt;/pre>&lt;h3 id="javascript">JavaScript&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">import&lt;/span> fetch from &lt;span style="color:#a50">&amp;#39;node-fetch&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">async&lt;/span> &lt;span style="color:#00a">function&lt;/span> getDocument(url=&lt;span style="color:#a50">&amp;#39;&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> response = &lt;span style="color:#00a">await&lt;/span> fetch(url, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method: &lt;span style="color:#a50">&amp;#39;GET&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>: &lt;span style="color:#a50">&amp;#39;application/json&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept: &lt;span style="color:#a50">&amp;#39;application/json;charset=UTF-8;qs=0.09&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Authorization: &lt;span style="color:#a50">`Basic &lt;/span>&lt;span style="color:#a50">${&lt;/span>btoa(&lt;span style="color:#a50">&amp;#39;CREDENTIALS&amp;#39;&lt;/span>)&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> response.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>getDocument(&lt;span style="color:#a50">&amp;#39;https://cad.onshape.com/api/documents/e60c4803eaf2ac8be492c18e&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>).then((data) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(data.name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="c">C++&lt;/h3>
&lt;p>Returns the entire response json. Scroll to the bottom to the see &lt;code>name&lt;/code> field.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4c8317">#include&lt;/span> &lt;span style="color:#4c8317">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#4c8317">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4c8317">#include&lt;/span> &lt;span style="color:#4c8317">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#4c8317">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4c8317">#include&lt;/span> &lt;span style="color:#4c8317">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#4c8317">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4c8317">&lt;/span>&lt;span style="color:#00a">using&lt;/span> &lt;span style="color:#00a">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0aa">int&lt;/span> &lt;span style="color:#0a0">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string url = &lt;span style="color:#a50">&amp;#34;curl &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url += &lt;span style="color:#a50">&amp;#34;-X &amp;#39;GET&amp;#39; &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url += &lt;span style="color:#a50">&amp;#34;&amp;#39;https://cad.onshape.com/api/documents/e60c4803eaf2ac8be492c18e&amp;#39;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url += &lt;span style="color:#a50">&amp;#34;-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url += &lt;span style="color:#a50">&amp;#34;-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> system(url.c_str());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> &lt;span style="color:#099">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="python">Python&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">import&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">import&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">jsons&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Assemble the URL for the API call &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>api_url = &lt;span style="color:#a50">&amp;#34;https://cad.onshape.com/api/documents/e60c4803eaf2ac8be492c18e&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Optional query parameters can be assigned &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>params = {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Use the encoded authorization string you created from your API Keys.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>api_keys = (&lt;span style="color:#a50">&amp;#34;CREDENTIALS&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Define the header for the request &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>headers = {&lt;span style="color:#a50">&amp;#39;Accept&amp;#39;&lt;/span>: &lt;span style="color:#a50">&amp;#39;application/json;charset=UTF-8;qs=0.09&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>: &lt;span style="color:#a50">&amp;#39;application/json&amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Putting everything together to make the API request &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>response = requests.get(api_url,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> params=params,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth=api_keys,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers=headers)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic"># Convert the response to formatted JSON and print the `name` property&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0aa">print&lt;/span>(json.dumps(response.json()[&lt;span style="color:#a50">&amp;#34;name&amp;#34;&lt;/span>], indent=&lt;span style="color:#099">4&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Why Onshape?</title><link>https://onshape-public.github.io/docs/api-intro/whyonshape/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-intro/whyonshape/</guid><description>
&lt;h2 id="why-onshape">Why Onshape?&lt;/h2>
&lt;p>As long as there have been applications that manage organizational data
into a database, there has been a need to share that data between
different departments and therefore, usually, different systems. In a
typical design/manufacturing organization, there could be at least four
or five mission-critical databases that manage the data for different
departments and for different stages in the product’s lifecycle.&lt;/p>
&lt;p>Initially, these systems provide the capabilities required by their
consumers (i.e., the departments that use these systems). For instance,
the Finance might use QuickBooks, Manufacturing
might use a manufacturing planning and execution system (MES),
Engineering might use a Product Data management System (PDM), and so on for each
group in the organization.&lt;/p>
&lt;p>This often leads to disparate silos of data and knowledge.
The departments in an organization do not work in a vacuum; each is
dependent on information generated by other groups. For
instance, Manufacturing can’t produce accurate assembly instructions
without input from engineering on the designs and the bill of
materials. Finance can’t price the product without understanding its
contents and which parts are manufactured in-house or
purchased.&lt;/p>
&lt;p>Therefore, the need to integrate these systems becomes critical for the
organization to function optimally. Initially, connecting one system to
another can be a straightforward process. This usually involves
some services to get the systems to talk to each other, however it
isn&amp;rsquo;t too painful as long as the requirements are clearly
defined.&lt;/p>
&lt;p>Anyone who has implemented integrations between PLM (Product
Lifecycle Management) systems or ERP (Enterprise Resource Planning) systems will tell
you of the nightmare scenarios they encountered. Often this is the
result of poorly scoped and defined requirements, conflicting
requirements coming from multiple departments, and the many integration
points required between systems. The result is that the organization is
not getting what it wants or needs, the customer is paying for services
that do not provide the promised solution, and usually the project is
long overdue. All this equals an unhappy customer and often the software
vendor’s solutions are blamed for the disaster.&lt;/p>
&lt;p>Over the years, many technologies have appeared (and some of them, just as
quickly disappeared) to enable integration without the need
to write thousands of lines of custom code that needs to be re-written
for every software upgrade. Several technologies provide “codeless” integration between SaaS
products (&lt;a href="wwww.zapier.com">Zapier&lt;/a>, for example). These solutions
are particularly good for generic use cases for data exchange between
systems, but can be limited when it comes to custom modifications to the
data being sent that might be required by a specific customer. In
addition, they have the overhead of requiring a subscription to their
service. Sending
corporate IP through another third-party can also cause data security issues.&lt;/p>
&lt;p>Therefore, we can understand that in most organizations integration
between systems is a necessary evil that must be tackled, either with
an out-of-the-box solution or through some custom coding.&lt;/p>
&lt;p>Early on, Onshape understood that as an engineering system, it cannot
exist in a vacuum; it must be able to communicate with other systems.
For this reason, the REST API was developed.&lt;/p>
&lt;p>An API, or &lt;em>application
programming interface&lt;/em>, is a set of rules that define how applications
or devices can connect to and communicate with each other. A REST API is
an API that conforms to the design principles of the REST,
or &lt;em>representational state transfer &lt;em>architectural style. For this
reason, REST APIs are sometimes referred to RESTful APIs&lt;/em>.&lt;/em>&lt;/p>
&lt;h2 id="onshape-saas">Onshape SaaS&lt;/h2>
&lt;p>Onshape was built from the ground up as a true SaaS-based system; Onshape had no investment in legacy code and was able to develop an application that truly runs as a multi-tenant
SaaS solution from the first line of code. Many companies claim to run
cloud-based solutions, but since they have such a large investment
in their legacy code, that they can’t just discard and start again from
scratch. Instead, they tend to try and port that code to the web.&lt;/p>
&lt;p>More often than not, porting existing code to the web and calling it a
SaaS solution is no more than a marketing ploy; it isn’t a true SaaS
solution if it wasn’t written as one. These are generally known as cloud-hosted solutions. This means that a typical three-tier data management
solution (which could have previously been installed on a set of servers),
has now been modified to be hosted on the web.&lt;/p>
&lt;h3 id="traditional-three-tier-architecture">Traditional three-tier architecture&lt;/h3>
&lt;p>Traditional PLM systems typically use a three-tier architecture, mainly
consisting of an application server, a database server, and a client (either a web client or a thick client installed on the client
hardware).&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage10.png"
style="width:4.91807in;height:3.27083in"
alt="The 3-tier architecture | Download Scientific Diagram" />&lt;/p>
&lt;p>&lt;em>Typical three-tier architecture&lt;/em>&lt;/p>
&lt;p>To connect to and integrate with this architecture, APIs are usually exposed on
the application or web server. If this
architecture is ported to the web, it cannot make
customizations through the API, since it would modify the behavior of
the program for everyone connected to that application server.&lt;/p>
&lt;h3 id="single--vs-multiple-tenant-architectures">Single- vs multiple-tenant architectures&lt;/h3>
&lt;p>The three-tier architecture is typical of most
PLM solutions on the market today, which is fine
if you want the solution to be installed on company servers and be
accessible to people within the company only.&lt;/p>
&lt;p>When this type of solution is ported to the web, software
vendors typically must create a single-tenant application where an
application server and a database server are provisioned for each new
customer.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage11.png"
style="width:5.4311in;height:4.35417in"
alt="Enterprise SaaS Architecture - The Why | Frontegg" />&lt;/p>
&lt;p>&lt;em>Single-tenant architecture&lt;/em>&lt;/p>
&lt;p>In this case, the vendor must use expensive
hardware to host more customers, which is not a
sustainable model.&lt;/p>
&lt;p>Modern 21&lt;sup>st&lt;/sup> century software solutions use multi-tenant
solutions that can be hosted on services such as Amazon cloud, Azure, etc. There are many benefits to this architecture, including that servers can be provisioned and
decommissioned on the fly to provide ultimate performance whenever
required. Since servers cost money, decommissioning servers when they
are not required is a key benefit to a true SaaS solution.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage12.png" style="width:6.5in;height:4.65417in"
alt="Saas Solutions - Multi-tenant vs multi-instance architectures" />&lt;/p>
&lt;p>&lt;em>Multi-tenant architecture&lt;/em>&lt;/p>
&lt;p>Since each application is separate in this architecture, we can enable customizations that can’t be implemented in a single-tenant architecture. For example, we can provide access to the REST
APIs that are required for Onshape integration. In the single-tenant
architecture, if you provide API access to the application server, one
customer will be modifying that application for all customers who are
registered on that tenant.&lt;/p>
&lt;h2 id="the-onshape-difference">The Onshape Difference&lt;/h2>
&lt;p>Onshape does not work like other legacy CAD systems. Onshape was built from scratch for the cloud and as a modern
CAD system, so many of the failings of legacy CAD
systems were excluded.&lt;/p>
&lt;p>There are many differences
and benefits to Onshape, which are well-documented in the Onshape Help
and training materials.&lt;/p>
&lt;p>The information in this section is specific to integrations, since Onshape does not behave like a traditional file-based
systems. When writing an integration for Onshape, it is
critical to understand the nuances in Onshape’s design practices and how
data is organized in Onshape.&lt;/p>
&lt;h3 id="data-drivenfileless">Data-driven/fileless&lt;/h3>
&lt;p>Most traditional PDM/PLM systems integrated with CAD systems
enable this integration on a per-file basis. This means that you have an
object in the PDM/PLM system that corresponds directly to a file in the
CAD system. In this way, the PDM/PLM system can manage access to the
files, build assemblies from the files, view the CAD data, and much more.&lt;/p>
&lt;p>Onshape, however, does not work this way.&lt;/p>
&lt;p>Being data-driven means that Onshape has no files, just data, so an integration into Onshape is going to look
different from any integration to a CAD system that you might have done
previously.&lt;/p>
&lt;p>In traditional CAD, a single file represents a snapshot of what the
design looked like at a specific moment in time. Unless it’s changed, it will remain in that state forever. PDM
systems manage these files, and once a designer decides to make a
revision or a release, the file is locked, and a new file can be created
to represent any further updated versions or releases of the design.
PDM/PLM systems are very good at managing this data in an up-to-date
structure, but it does have the drawbacks. They generate many file
copies of a specific design, and once a file is taken out from the system (for instance, to share with a supplier), it is no longer managed and
tracked.&lt;/p>
&lt;p>Onshape uses data instead of files. The data is always up-to-date and
can be collaborated on in real-time without the need to send file copies
back and forth. This means that Onshape views versions and releases differently
than those traditional systems do. When integrating with Onshape, we must design for data rather than files.&lt;/p>
&lt;p>Files can be generated from
the Onshape data. For example, you can generate a PDF of a
drawing upon release or of a STEP file that can be used by other downstream systems.&lt;/p>
&lt;p>A key benefit of a data-driven system is the ability to retrieve detailed, real-time
analytics. Onshape has comprehensive analytics; including who can view or edit a design, when and exactly what edits are made, which commands were used, and how long was spent modifying the design.&lt;/p>
&lt;h3 id="built-in-pdm">Built in PDM&lt;/h3>
&lt;p>Up until now, CAD was one software program, and PDM/PLM was another
program that had to be integrated with the CAD. In many cases, both
programs could be sold by the same software vendor (even though there
are many PLM systems available that are sold by independent vendors who
have no CAD system). Regardless, a PDM/PLM system always had to be an added solution to the CAD system.&lt;/p>
&lt;p>No matter how deep the integration between a CAD system and a PLM
system, there is always the need to sync data between the two. This is usually a weak point in any solution that is prone to errors.&lt;/p>
&lt;p>Being data-driven, Onshape already has PDM built in as part of the CAD
system. This is unique in the industry: CAD and PDM as part
of the same solution with no additional piece of software required.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage14.png"
style="width:4.49202in;height:4.1652in"
alt="A picture containing graphical user interface Description automatically generated" />&lt;/p>
&lt;p>&lt;em>Onshape’s revision and part number schema definition interface&lt;/em>&lt;/p>
&lt;p>For instance:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Since the &lt;strong>data is always up-to-date&lt;/strong>, the correct state of any design
is always represented in real-time with no delay for syncing between
systems.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unlike file-based systems, &lt;strong>the data is never locked&lt;/strong>; it
is always available and always changing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PDM system &lt;strong>data management aspects are fully integrated&lt;/strong> into every aspect of
the CAD system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>True &lt;strong>real-time collaboration/co-design&lt;/strong> on both design and data is
enabled.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So, what does this mean when it comes to integrating Onshape with
another PLM system? First and foremost, we must understand that there
are many things that a PLM system does that Onshape’s PDM capabilities
can’t do. Integrating Onshape to a PLM system should augment the
powerful capabilities already available inside Onshape, not
necessarily replace them. Similarly, Onshape does not replace PLM-native capabilities. Instead, depending on the business case, we can use the best-in-class capabilities of each system to augment the
other.&lt;/p>
&lt;p>The Onshape release process is an example of the augmentation of each system&amp;rsquo;s capabilities. Onshape has a specific way of managing the release of data that is
different from traditional PDM systems. This capability is inherently
suited to a data-driven approach and provides a lot of value to the
update of design data in Onshape. At the same time, PLM systems provide
enterprise release processes that may include many people and different
departments that extend beyond the engineering domain. Such PLM
processes can be highly customized and suited to the organizations
established business processes.&lt;/p>
&lt;p>In this scenario, it doesn&amp;rsquo;t make sense to avoid the enterprise release
processes in the PLM system. However, also omitting Onshape’s release
capabilities could put data between Onshape and the PLM system out of
sync and prevent Onshape from updating data (e.g., watermarks and
title blocks on drawings, icons related the visualizing the state of
data, etc.).&lt;/p>
&lt;p>In this case, we want to use the best-in-class features of each software
solution without compromising the capability provided by each solution.
If we plan our integration correctly, this can be achieved by initiating
the release of the data in Onshape, transferring the release data to the
PLM system where the release process will be triggered, and finally
automating the release in Onshape once the process has been completed in
the PLM system.&lt;/p>
&lt;h3 id="multi-part-part-studios">Multi-part Part Studios&lt;/h3>
&lt;p>In traditional CAD systems, one file typically equals
one part. While design-in-context is available in most CAD systems, and
multiple solid bodies can be created, each part is self-contained in a separate file. For PLM systems, this
makes it easy to associate an object in the PDM/PLM database with a
specific CAD file. &lt;em>This is not the case in Onshape.&lt;/em>&lt;/p>
&lt;p>In Onshape, parts are designed in what’s called a &lt;em>Part Studio.&lt;/em> Within
a Part Studio, the designer is free to create as many parts as they want.
The general rule is that the parts should be related to each other in a
system, thereby making it easier to design one part from another, however
there is a lot of flexibility in how the designer wishes to work.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage15.png"
style="width:4.45764in;height:4.12141in"
alt="A picture containing text Description automatically generated" />&lt;/p>
&lt;p>&lt;em>An example of a multi-part Part Studio in Onshape&lt;/em>&lt;/p>
&lt;p>The structure of the Onshape document is discussed in detail in the &lt;a href="https://onshape-public.github.io/docs/api-intro/architecture">Onshape Architecture&lt;/a> page. The Part Studio is included in an Onshape document.&lt;/p>
&lt;p>We can already begin to understand that the traditional CAD/PDM paradigm
of &amp;ldquo;one file per object&amp;rdquo; will not work with Onshape; the designer would be forced by the
PDM/PLM system to only create one part per Part Studio. This would
therefore limit the designer’s freedom for creativity in Onshape and
seriously reduce the powerful functionality available for the designer
to use.&lt;/p>
&lt;p>Therefore, we need to re-think how we integrate with Onshape versus how we
integrate with traditional CAD systems. Fortunately, Onshape’s REST API
supports the multi-part Part Studio scenario. Instead of associating a
file with an object in the PDM/PLM database, we now use the REST API to
associate a Part with its corresponding object.&lt;/p>
&lt;h3 id="versions-and-releases">Versions and releases&lt;/h3>
&lt;p>Traditional PDM/PLM systems provide design release support by locking a
CAD file for access. The access controls are defined in the database and
the definition of a part/assembly/drawing as released is controlled by
the database. When a new revision of the part is required, a file copy
is made, and the database provides access to the new copy. Generally,
the old copy representing the previous release persists in the file
store and can be referenced by the database. &lt;em>This is not how Onshape works.&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage16.png"
style="width:2.66865in;height:3.09375in" />Since there are no files in
Onshape (just data) no file locking or copy mechanisms are
available. Instead, Onshape looks at the data as a continuous timeline
that is always moving forward and always changing as the design evolves.
The data is never locked; it is always available.&lt;/p>
&lt;p>In place of file copies that represent versions and releases of the
design, Onshape provides the ability to create &lt;em>versions&lt;/em> as bookmarks
in the timeline. When creating a version, Onshape places a bookmark in
the timeline that represents the state of the design at that specific
moment in time. Releases work in a similar way, but they are defined
as official, company-approved processes and have special meaning.&lt;/p>
&lt;p>In addition to creating versions and releases, Onshape can create &lt;em>branches&lt;/em>, which can be defined as alternative timelines. A
designer might want to experiment with alternate design ideas without
modifying the existing design that others are working on. By
creating a branch from any point in the timeline, the designer is
free to experiment with alternate ideas. If the ideas work, they can be
merged into the current timeline at any point.&lt;/p>
&lt;p>From an integration perspective, we need to take into
consideration how Onshape works with versions and releases. Since a release represents a company-approved design, Onshape provides processes for the approval of
a release and the change of state of a design. Onshape also provides
APIs and triggers (events) that enable integration points throughout the
release process. It is through the triggers and the APIs that
integration of any third-party system that wishes to manage the release
process is enabled.&lt;/p>
&lt;h3 id="workflows">Workflows&lt;/h3>
&lt;p>Release and obsoletion workflows are included with Onshape and can be customized to meet company standards.&lt;/p>
&lt;p>For details on how to implement and customize Onshape’s workflows,
please review these online help topics:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/help/Content/relmgmt_custom.htm">How to design release management processes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/help/Content/custom_workflow.htm">How to create a customized release workflow&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Most PDM/PLM systems can model a company’s
business processes in a workflow. These can be highly automated
processes that move data and file references through a process of
reviews and approvals. Onshape also has this capability, which is
currently used for release and obsoletion processes.&lt;/p>
&lt;p>There are no files or file references in Onshape that are moved
through the process. Onshape only has data. Therefore, it is the data
that is referenced at each stage of the process. Traditional PDM systems
might make file copies and lock files as they move through a release
process. If the process is rejected at any stage, those
files must be discarded, the previous version of the files unlocked and
all states updated. In short, it system must rewind back to the state of the files and
the data when the workflow was initiated. This is a lot of complex
actions that must occur when a process is rejected for any reason. &lt;em>Onshape doesn’t work this way.&lt;/em>&lt;/p>
&lt;p>A release process can be started on data (such as assemblies, parts,
drawings, etc.). For example, if the state of a referenced part is updated to
“Pending,” and the process is rejected at any stage, there
is no rewinding of files and data; the data just reverts to the
original “In Progress” state, and the workflow is discarded. Since the
workflow didn’t complete, nothing related to the data has actually
changed. When you are used to traditional PDM systems, this feels like
an anti-climax, and we often receive the question, “But where’s my
process? Where’s the data that was attached to the process?”. Well, the
answer is: nothing changed. Until the process is completed, nothing
actually changes, so the data is in the same state it was prior to the
initialization of the release process.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage17.png"
style="width:3.39863in;height:2.61034in"
alt="A picture containing chart Description automatically generated" />&lt;/p>
&lt;p>&lt;em>A custom release process in Onshape&lt;/em>&lt;/p></description></item><item><title>Docs: OAuth</title><link>https://onshape-public.github.io/docs/auth/oauth/</link><pubDate>Mon, 18 May 2020 20:39:14 -0400</pubDate><guid>https://onshape-public.github.io/docs/auth/oauth/</guid><description>
&lt;p>&lt;strong>See the &lt;a href="https://github.com/onshape-public/app-gltf-viewer">gltf-viewer-app&lt;/a> for a working example of OAuth2.&lt;/strong>&lt;/p>
&lt;h2 id="what-is-oauth2">What is OAuth2?&lt;/h2>
&lt;p>The OAuth (Open authorization) protocol was developed by the Internet Engineering Task Force, an open standards organization that develops and promotes voluntary Internet standards (particularly the technical standards that comprise the Internet protocol suite) to enable secure, delegated access to an application&amp;rsquo;s resources.&lt;/p>
&lt;p>The OAuth2 protocol enables an application to access a resource that is under the control of someone else. In order to access that resource, a &lt;i>token&lt;/i> is required. The token represent the delegated rights of access (that is, what rights this application has, such as read/write/update, scope, rights to different resources, and more).&lt;/p>
&lt;p>&lt;i>This means the application can be accessed by a third-party system without that system
impersonating the user that controls the resource.&lt;/i>&lt;/p>
&lt;p>A good analogy is the hotel check-in process. When you arrive at the front desk of a hotel, you provide an ID and a form of payment. Then, you are given a key card that opens a specific door. When you reach that door, you swipe your key card and are granted access. The door itself doesn’t know who you are or anything about you, it just knows that the key card was encoded correctly, and it allows you access. At some point, the key card expires, and the door no longer lets you into the room. This is the same for access tokens in the OAuth2 flow.&lt;/p>
&lt;p>With the OAuth2 protocol, you register your application with the third party, and you are given a set of keys. These keys get exchanged for an access token that grants you access to resources in the third-party application. The token expires regularly; you miust get a new token to access the application again. For this, you are provided with a &lt;i>refresh token&lt;/i>. Sending the refresh token to the authentication server updates your access token and gives you a new refresh token.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/APITokenRequestDiagram.png" alt="api token request diagram">&lt;/p>
&lt;h3 id="oauth2--onshape">OAuth2 &amp;amp; Onshape&lt;/h3>
&lt;p>The first step in the OAuth flow is for the Onshape user to request that Onshape let the third-party application access Onshape.&lt;/p>
&lt;p>Once the user has authorized the application, they are redirected to a predefined URL (called a &lt;i>redirect URL&lt;/i>) with a code that will requests an access token from Onshape. Therefore, the redirect URL should contain a script that can capture the authorization code.&lt;/p>
&lt;p>You will use the access token to authenticate requests to the Onshape API. The token expires after preset amount of time. To get a new valid access token after one has expired, you must use the refresh token to request a new access token. Refreshing the access token also provides you with an updated refresh token to use in the next refresh access token request. Make sure to store both the the access token and the refresh token, and update them with each refresh of the token. The authorization token must accompany any call to the API, this is done by adding the token to an Authorization field in the header of each request:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>Authorization: Bearer &amp;lt;accessToken&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If correctly authenticated, most responses from the REST API call return JSON data (though some return binary data), with an HTTP response code of &lt;code>200 Success&lt;/code>, &lt;code>204 - No Content&lt;/code>, or &lt;code>301 - Permanent Redirect&lt;/code>. &lt;code>301&lt;/code> responses will include a redirect for you to follow.&lt;/p>
&lt;p>In the event that the authorization code is incorrect (for instance, if it expired), you will receive an &lt;strong>HTTP 401&lt;/strong> response. This response means that the client request has not been completed, since it lacks valid authentication credentials for the requested resource. In this event, your code for each call to the REST API should include a catch clause for a 401 exception. Once caught, you can refresh the token and make the request again. Pay close attention to the &lt;code>Content-Type&lt;/code> header for what data to parse and expect.&lt;/p>
&lt;p>When integrating with Onshape, OAuth tokens give third-party applications (such as desktop applications or web services) access to users&amp;rsquo; data as defined by the permissions scope (such as users&amp;rsquo; documents or profile information). Using OAuth terminology, Onshape acts as both the authorization and resource server, while the desktop or web-based application is the client. Resource owners have the option of granting or denying access to applications.&lt;/p>
&lt;p>Once obtained, an OAuth token will work for third-party APIs under &lt;code>/api&lt;/code>. Do NOT attempt to use an OAuth token to fetch the URLs typically displayed in a web browsers location bar.&lt;/p>
&lt;h3 id="more-resources">More resources&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2">Digital Ocean&lt;/a> - A good resource for learning more about OAuth2.&lt;/li>
&lt;li>&lt;a href="http://tools.ietf.org/html/rfc6749">RFC 6749&lt;/a> - The reference for the OAuth framework as a whole. Most of this document describes how to implement the OAuth exchanges described by the reference within the context of Onshape and client applications.&lt;/li>
&lt;li>&lt;a href="http://tools.ietf.org/html/rfc6750">RFC 6750&lt;/a> - Describes the exchange of OAuth access tokens between clients and OAuth servers.&lt;/li>
&lt;/ul>
&lt;h2 id="implement-oauth2">Implement OAuth2&lt;/h2>
&lt;p>This OAuth tutorial demonstrates how to recreate the authentication process in Node.js found in the &lt;a href="https://github.com/onshape-public/app-gltf-viewer">gltf-viewer-app&lt;/a> sample code. The &lt;a href="#final-code">final code&lt;/a> in Node.js and other languages can be found at the end of this page.&lt;/p>
&lt;h3 id="1-register-the-app">1: Register the app&lt;/h3>
&lt;ol>
&lt;li>Navigate to &lt;a href="https://dev-portal.onshape.com/signin">https://dev-portal.onshape.com/signin&lt;/a> and sign in.&lt;/li>
&lt;li>In the left sidebar, click &lt;strong>OAuth applications&lt;/strong>.&lt;/li>
&lt;li>Click the &lt;strong>Create new OAuth application&lt;/strong> button.&lt;/li>
&lt;li>Fill out the form as follows:
&lt;ul>
&lt;li>Name: &lt;code>gltf-viewer-yourname&lt;/code>
&lt;ul>
&lt;li>The application name to display to users.&lt;/li>
&lt;li>Should include the name of your company to differentiate it from other possibly similar applications.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Primary format: &lt;code>com.yourname.gltf-viewer&lt;/code>
&lt;ul>
&lt;li>String that uniquely identifies your application and is a marker for the data it might store on Onshape servers.&lt;/li>
&lt;li>Cannot be changed after the application is registered.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Summary: &lt;code>Onshape OAuth tutorial&lt;/code>
&lt;ul>
&lt;li>Description of your application.&lt;/li>
&lt;li>Displayed to the user when they’re asked to grant the application permission to access their data.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Redirect URLs: &lt;code>http://localhost:5000/token&lt;/code>
&lt;ul>
&lt;li>Your application must specify at least one URL used in the OAuth protocol exchanges.&lt;/li>
&lt;li>This URL must also use SSL (a URL that begins with https), with two exceptions applicable for
installed desktop applications: &lt;code>http://localhost:&amp;lt;port&amp;gt;&lt;/code> and &lt;code>urn:ietf:wg:oauth:2.0:oob&lt;/code>.&lt;/li>
&lt;li>e.g., &lt;code>https://app-gltf-viewer-yourname-c11f263794bc.herokuapp.com/oauthRedirect&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Admin team: &lt;code>No Team&lt;/code>
&lt;ul>
&lt;li>Optional.&lt;/li>
&lt;li>If defined, members of the team can make changes to the definition of this OAuth application.&lt;/li>
&lt;li>See the &lt;a href="https://cad.onshape.com/help/Content/teams-enterprise.htm">Help Docs: Teams&lt;/a> page for more information on creating teams in Onshape.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OAuth URL: &lt;code>none&lt;/code>
&lt;ul>
&lt;li>Should contain the URL of your deployed application.&lt;/li>
&lt;li>This is the first URL called from the Onshape Applications page.&lt;/li>
&lt;li>The page hosted at this URL should handle the OAuth authentication. Once your application’s server has been authenticated on behalf of the user, that user should be redirected to your applications content.&lt;/li>
&lt;li>If you have not deployed your app yet, you can leave this field blank (as shown in this example) for local work and update it later.&lt;/li>
&lt;li>e.g., &lt;code>https://app-gltf-viewer-yourname-c11f263794bc.herokuapp.com/oauthSignin&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Permissions:
&lt;ul>
&lt;li>This is also called application scope, and it defines what access rights your application has to the user’s data.&lt;/li>
&lt;li>&lt;strong>Application can read your profile information&lt;/strong> - Enable your application to access the Onshape user profile. Check this option.&lt;/li>
&lt;li>&lt;strong>Application can read your documents&lt;/strong> - Onshape documents created by this user can be accessed with read privileges only. Check this option.&lt;/li>
&lt;li>&lt;strong>Application can write to your documents&lt;/strong> - The user-owned Onshape documents can be modified by this application. Check this option.&lt;/li>
&lt;li>&lt;strong>Application can delete documents and workspaces&lt;/strong> - Your application will be able to delete a workspace within a document or the complete Onshape document. Do not check this option for this example.&lt;/li>
&lt;li>&lt;strong>Application can request Purchases on Your behalf&lt;/strong> - The application will have access to make purchases if required. Do not check this option for this example.&lt;/li>
&lt;li>&lt;strong>Application can share and unshare documents on your behalf&lt;/strong> - Onshape’s document sharing capabilities are very powerful; they enable other parties to access your shared documents with
predefined rights. If this option is checked, the application can automatically share a document with other people. Do not check this option for this example.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click &lt;strong>Create application&lt;/strong>.&lt;/li>
&lt;li>&lt;font style="color: red">&lt;b>COPY THE OAUTH SECRET FROM THE POP-UP WINDOW.&lt;b>&lt;/font>
&lt;ul>
&lt;li>You will not be able to access this secret again.&lt;/li>
&lt;li>This secret is unique to you and your app and should be protected like any sensitive password. For example, it should &lt;em>NOT&lt;/em> be checked in to source code control systems.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Copy the &lt;strong>OAuth client identifier&lt;/strong> from the app Details page that opens.
&lt;ul>
&lt;li>These OAuth secret and client ID keys will be used in your code for requesting a one-time user authorization code from Onshape.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Your application is now registered with Onshape and you have options to
modify the application definition through this portal.&lt;/p>
&lt;img src="https://onshape-public.github.io/images/devportalappdetails.png" alt="the gltf-viewer app in the onshape dev portal app details screen" />
&lt;h3 id="2-get-the-user-authorization-code">2: Get the user authorization code&lt;/h3>
&lt;p>We’ll start by loading the basic libraries required to run this sample. We&amp;rsquo;ll use Passport to authenticate requests through plugins known as strategies. In this example, we&amp;rsquo;ll use an Onshape-developed plugin called &lt;code>passport-onshape&lt;/code>, but you can define your own strategy to use with Passport, if you prefer. You can find more information on &lt;a href="https://www.npmjs.com/package/passport">Passport here&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>Create a directory for your app, and then install Passport and passport-onshape:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>npm install passport
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install passport-onshape
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Next, create a file calls &lt;code>app.js&lt;/code> and add the following definitions to the top of the file:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">// App definitions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> path = require(&lt;span style="color:#a50">&amp;#39;path&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> uuid = require(&lt;span style="color:#a50">&amp;#39;uuid&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> express = require(&lt;span style="color:#a50">&amp;#39;express&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> session = require(&lt;span style="color:#a50">&amp;#39;express-session&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> bodyParser = require(&lt;span style="color:#a50">&amp;#39;body-parser&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> passport = require(&lt;span style="color:#a50">&amp;#39;passport&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> OnshapeStrategy = require(&lt;span style="color:#a50">&amp;#39;passport-onshape&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> config = require(&lt;span style="color:#a50">&amp;#39;./config&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Next, tell Express to use Passport and initialize it. Note: you can replace the Express code with code for the web server of your choice.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">// Tell Express to use Passport, and initialize it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> app = express();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(express.&lt;span style="color:#00a">static&lt;/span>(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(express.&lt;span style="color:#00a">static&lt;/span>(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;dist&amp;#39;&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(bodyParser.json());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.set(&lt;span style="color:#a50">&amp;#39;trust proxy&amp;#39;&lt;/span>, &lt;span style="color:#099">1&lt;/span>); &lt;span style="color:#aaa;font-style:italic">// To allow to run correctly behind Heroku when deployed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(session({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secret: config.sessionSecret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> saveUninitialized: &lt;span style="color:#00a">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resave: &lt;span style="color:#00a">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cookie: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#a50">&amp;#39;app-gltf-viewer&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sameSite: &lt;span style="color:#a50">&amp;#39;none&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secure: &lt;span style="color:#00a">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> httpOnly: &lt;span style="color:#00a">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path: &lt;span style="color:#a50">&amp;#39;/&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxAge: &lt;span style="color:#099">1000&lt;/span> * &lt;span style="color:#099">60&lt;/span> * &lt;span style="color:#099">60&lt;/span> * &lt;span style="color:#099">24&lt;/span> &lt;span style="color:#aaa;font-style:italic">// 1 day
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(passport.initialize());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(passport.session());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Next, we&amp;rsquo;ll store the Onshape user information so it can be retrieved from &lt;code>req.user&lt;/code> in
each call. Passport uses the &lt;code>serializeUser&lt;/code> function to persist user data (after successful
authentication) into the session. The function &lt;code>deserializeUser&lt;/code> is used
to retrieve user data from session.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Store the Onshape user information
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>passport.serializeUser((user, done) =&amp;gt; done(&lt;span style="color:#00a">null&lt;/span>, user));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>passport.deserializeUser((obj, done) =&amp;gt; done(&lt;span style="color:#00a">null&lt;/span>, obj));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>Initialize Passport with the Onshape Strategy:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Initialize Passport with the Onshape Strategy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>passport.use(&lt;span style="color:#00a">new&lt;/span> OnshapeStrategy({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientID: config.oauthClientId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientSecret: config.oauthClientSecret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> callbackURL: config.oauthCallbackUrl,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> authorizationURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/oauth/authorize`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tokenURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/oauth/token`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userProfileURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/api/users/sessioninfo`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (accessToken, refreshToken, profile, done) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> profile.accessToken = accessToken;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> profile.refreshToken = refreshToken;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> done(&lt;span style="color:#00a">null&lt;/span>, profile);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>Open your environment variables file (e.g.,&lt;code>.env&lt;/code>, &lt;code>.bashrc&lt;/code>, &lt;code>.bash_profile&lt;/code>, &lt;code>.zshrc,&lt;/code> etc.) and add the following environment variables, then save and close the file.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>authorizationURL : https://oauth.onshape.com/oauth/authorize
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tokenURL : https://oauth.onshape.com/oauth/token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>userProfileURL : https://cad.onshape.com/api/users/sessioninfo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The callback function will provide us with the &lt;code>accessToken&lt;/code>, the &lt;code>refreshToken&lt;/code>, and the user’s Onshape profile once authentication has been successfully passed. We can now use this to update our database with user-specific information.&lt;/p>
&lt;p>Note that if you store the &lt;code>accessToken&lt;/code> and &lt;code>refreshToken&lt;/code> in the database along with the user record, you must update it each time that the access codes are refreshed.&lt;/p>
&lt;ol start="8">
&lt;li>Next, we define our endpoint where the authorization flow starts (in this case, &lt;code>/oauthSignin&lt;/code>). This is the endpoint that we previously defined in the Onshape application setup. This will redirect to an Onshape page in order for the user to confirm (or deny) the applications access to theOnshape resources.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Define the Onshape API endpoint
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>app.use(&lt;span style="color:#a50">&amp;#39;/oauthSignin&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">/* These 5 lines are specific to the glTF Viewer sample app. You can replace them with the input for whatever Onshape endpoints you are using in your app */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> state = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docId: req.query.documentId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workId: req.query.workspaceId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elId: req.query.elementId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req.session.state = state;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> passport.authenticate(&lt;span style="color:#a50">&amp;#39;onshape&amp;#39;&lt;/span>, { state: uuid.v4(state) })(req, res);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-exchange-the-code-for-an-access-token">3: Exchange the code for an access token&lt;/h3>
&lt;p>Fortunately, if you are using Passport, there isn’t much to do once the user grants authorization. The return URL will contain the one-time authorization token, which Passport will extract and exchange for an access token and a refresh token, which are available in Passport callback function.&lt;/p>
&lt;ol>
&lt;li>Add the following code to &lt;code>app.js&lt;/code>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Exchange the code for an access token
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>app.use(&lt;span style="color:#a50">&amp;#39;/oauthRedirect&amp;#39;&lt;/span>, passport.authenticate(&lt;span style="color:#a50">&amp;#39;onshape&amp;#39;&lt;/span>, { failureRedirect: &lt;span style="color:#a50">&amp;#39;/grantDenied&amp;#39;&lt;/span> }), (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">/* This code is specific to the glTF Viewer sample app. You can replace it with the input for whatever Onshape endpoints you are using in your app. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.redirect(&lt;span style="color:#a50">`/?documentId=&lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.docId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a50">&amp;amp;workspaceId=&lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.workId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">&amp;amp;elementId=
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a50"> &lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.elId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>If the user clicks &lt;strong>Deny&lt;/strong> instead of &lt;strong>Authorize Application&lt;/strong>, they are taken to a page that notifies them that access to the application was denied. We can see that in the &lt;code>failureRedirect&lt;/code> argument. Add the following to &lt;code>app.js&lt;/code>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Handle denied access
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>app.get(&lt;span style="color:#a50">&amp;#39;/grantDenied&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.sendFile(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;html&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;grantDenied.html&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we have received the access token, and it can be accessed from &lt;code>res.user.accessToken&lt;/code> on this page or from &lt;code>req.user.accessToken&lt;/code> from any other page you redirect to from here.&lt;/p>
&lt;h3 id="4-use-the-access-token">4: Use the access token&lt;/h3>
&lt;ol>
&lt;li>Add the following to the bottom of &lt;code>app.js&lt;/code>. You can see that the access token is used as an Authorization header:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Use the access token as an Authorization header
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>makeOnshapeAPICall: &lt;span style="color:#00a">async&lt;/span> (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> apiUrl = &lt;span style="color:#a50">&amp;#34;https://cad.onshape.com/api/documents?ownerType=1&amp;amp;sortColumn=createdAt&amp;amp;sortOrder=desc&amp;amp;offset=0&amp;amp;limit=20&amp;#34;&lt;/span>; &lt;span style="color:#aaa;font-style:italic">//You can replace this with any Onshape API endpoint URL.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">const&lt;/span> resp = &lt;span style="color:#00a">await&lt;/span> fetch(normalizedUrl, { headers: { Authorization: &lt;span style="color:#a50">`Bearer &lt;/span>&lt;span style="color:#a50">${&lt;/span>req.user.accessToken&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span> }});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> data = &lt;span style="color:#00a">await&lt;/span> resp.text();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> contentType = resp.headers.get(&lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.status(resp.status).contentType(contentType).send(data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">catch&lt;/span> (err) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.status(&lt;span style="color:#099">500&lt;/span>).json({ error: err });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: in the glTF Viewer sample app, this code appears in &lt;code>utils.js&lt;/code> instead of &lt;code>app.js&lt;/code>.&lt;/p>
&lt;h3 id="5-refresh-the-token">5: Refresh the token&lt;/h3>
&lt;p>When the access token expires, it must be refreshed by making another &lt;code>POST&lt;/code> request to &lt;code>https://oauth.onshape.com/oauth/token&lt;/code> with the following URL-encoded form body (with &lt;code>Content-Type application/x-www-form-urlencoded&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00">grant_type&lt;/span>=refresh_token&amp;amp;&lt;span style="color:#a00">refresh_token&lt;/span>=&lt;span style="color:#a50">\&amp;lt;&lt;/span>refresh_token&lt;span style="color:#a50">\&amp;gt;&lt;/span>&amp;amp;&lt;span style="color:#a00">client_id&lt;/span>=&lt;span style="color:#a50">\&amp;lt;&lt;/span>client_id&lt;span style="color:#a50">\&amp;gt;&lt;/span>&amp;amp;&lt;span style="color:#a00">client_secret&lt;/span>=&lt;span style="color:#a50">\&amp;lt;&lt;/span>client_secret&lt;span style="color:#a50">\&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As with the authorization code data, the parameters in the form body must be URL-encoded. The response to this &lt;code>POST&lt;/code> request will be a JSON-encoded structure with a new &lt;code>access_token&lt;/code> value that can be used for the next 60 minutes.&lt;/p>
&lt;p>Refresh tokens are valid for the lifetime of the user’s grant. If a user who previously granted access to your application decides to revoke the grant, the refresh token is invalidated. If the user decides to re-grant application access, a new refresh token is generated and returned along with the access token.&lt;/p>
&lt;ol>
&lt;li>Add the following to &lt;code>app.js&lt;/code>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">/** After landing on the home page, we check if a user had already signed in. If no user has signed in, we redirect the request to the OAuth sign-in page. If a user had signed in previously, we will attempt to refresh the access token of the user. After successfully refreshing the access token, we will simply take the user to the landing page of the app. If the refresh token request fails, we will redirect the user to the OAuth sign-in page again. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.get(&lt;span style="color:#a50">&amp;#39;/&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">if&lt;/span> (!req.user) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> res.redirect(&lt;span style="color:#a50">`/oauthSignin&lt;/span>&lt;span style="color:#a50">${&lt;/span>req._parsedUrl.search ? req._parsedUrl.search : &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> refreshAccessToken(req.user).then((tokenJson) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Dereference the user object and update the access token and refresh token in the in-memory object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">let&lt;/span> usrObj = JSON.parse(JSON.stringify(req.user));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usrObj.accessToken = tokenJson.access_token;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usrObj.refreshToken = tokenJson.refresh_token;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Update the user object in PassportJS. No redirections will happen here, this is a purely internal operation.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> req.login(usrObj, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> res.sendFile(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;html&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;index.html&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).&lt;span style="color:#00a">catch&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Refresh token failed, take the user to OAuth sign in page.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">return&lt;/span> res.redirect(&lt;span style="color:#a50">`/oauthSignin&lt;/span>&lt;span style="color:#a50">${&lt;/span>req._parsedUrl.search ? req._parsedUrl.search : &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Refresh the access token
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> refreshAccessToken = &lt;span style="color:#00a">async&lt;/span> (user) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> body = &lt;span style="color:#a50">&amp;#39;grant_type=refresh_token&amp;amp;refresh_token=&amp;#39;&lt;/span> + user.refreshToken + &lt;span style="color:#a50">&amp;#39;&amp;amp;client_id=&amp;#39;&lt;/span> + config.oauthClientId + &lt;span style="color:#a50">&amp;#39;&amp;amp;client_secret=&amp;#39;&lt;/span> + config.oauthClientSecret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">let&lt;/span> res = &lt;span style="color:#00a">await&lt;/span> fetch(config.oauthUrl + &lt;span style="color:#a50">&amp;#34;/oauth/token&amp;#34;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method: &lt;span style="color:#a50">&amp;#39;POST&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>: &lt;span style="color:#a50">&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> body: body
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">if&lt;/span> (res.ok) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> &lt;span style="color:#00a">await&lt;/span> res.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">throw&lt;/span> &lt;span style="color:#00a">new&lt;/span> &lt;span style="color:#0aa">Error&lt;/span>(&lt;span style="color:#a50">&amp;#34;Could not refresh access token, please sign in again.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(&lt;span style="color:#a50">&amp;#39;/api&amp;#39;&lt;/span>, require(&lt;span style="color:#a50">&amp;#39;./api&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>module.exports = app;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Save the file.&lt;/li>
&lt;li>To see the authentication working in practice, you can follow the instructions in the &lt;a href="https://github.com/onshape-public/app-gltf-viewer#readme">glTF Viewer README&lt;/a> to deploy the glTF Viewer app.&lt;/li>
&lt;/ol>
&lt;h3 id="6-grant-authorization">6: Grant authorization&lt;/h3>
&lt;p>For apps published in the Onshape App Store, the Onshape user must grant authorization to your application to access the Onshape data. This must be done by each user of your app.&lt;/p>
&lt;p>To grant the application access to a user&amp;rsquo;s data in Onshape, the &lt;em>Onshape user&lt;/em> must follow the steps below:&lt;/p>
&lt;ol>
&lt;li>Sign in to &lt;code>cad.onshape.com&lt;/code> (or &lt;code>https://companyName.onshape.com&lt;/code> for Enterprise acccounts).&lt;/li>
&lt;li>Click their name in the top-right corner of the Onshape window, and then click &lt;strong>My account&lt;/strong> in the dropdown menu.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/myaccountdropdown.png" alt="drawing" width="300"/>&lt;/li>
&lt;li>Click &lt;strong>Applications&lt;/strong> in the left sidebar.
&lt;ul>
&lt;li>Note that the gltf-viewer app will not appear in this list until it has been deployed and subscribed to as described in the &lt;a href="https://github.com/onshape-public/app-gltf-viewer#readme">glTF Viewer README&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click &lt;strong>Grant&lt;/strong> next to your app name to grant it access to their Onshape data. The Onshape user can click &lt;strong>Revoke&lt;/strong> at any time to prevent your app from accessing their Onshape data.&lt;/li>
&lt;li>The user will see the Authorize application screen shown below and will need to confirm their authorization grant by clicking &lt;strong>Authorize application&lt;/strong>. The user is then redirected to the Redirect URL you specified in your code. Your app can now access the user&amp;rsquo;s Onshape resources and profile.&lt;/li>
&lt;/ol>
&lt;h2 id="notes">Notes&lt;/h2>
&lt;h3 id="installed-desktop-applications">Installed desktop applications&lt;/h3>
&lt;p>OAuth is designed for interactions between two servers using a browser. However, it can also be used by an installed desktop (or mobile) application. The application must perform a similar role to that of a third party server: it must exchange the code for an access token structure.&lt;/p>
&lt;p>To enable this, Onshape allows two special forms of redirect URI to be registered:&lt;/p>
&lt;ul>
&lt;li>&lt;code>http://localhost:&amp;lt;port&amp;gt;&lt;/code> Causes the browser to attempt to load a page from the host upon which it is running. The code parameter will be supplied exactly the same as outlined above. If the application can listen on the registered port and behave as a simple web server for the redirect URL, it can retrieve the code in the same way as a deployed web server.&lt;/li>
&lt;li>&lt;code>urn:ietf:wg:oauth:2.0:oob&lt;/code> Causes the browser to display a simple page after a request has been granted instead of going to a new URL. The page contains simple instructions to copy and paste code into an application field. The browser will also update the title of the window to contain the code. An application could also look for browsers with window titles containing the string &lt;code>Success code=&amp;lt;code&amp;gt;&lt;/code> and automatically grab the code from the browser window title. If an error occurs (e.g., the grant is denied), the browser window title will contain &lt;code>Error description=&amp;lt;error string&amp;gt;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="debugging">Debugging&lt;/h3>
&lt;p>Debugging OAuth can be a little tricky. Some tips are below:&lt;/p>
&lt;ol>
&lt;li>Make sure you are correctly URL encoding the values supplied to the oauth/authorize and oauth/token endpoints.&lt;/li>
&lt;li>Use a &lt;code>GET /oauth/authorize&lt;/code> but a &lt;code>POST /oauth/token&lt;/code> and make sure that the GET uses query parameters but that the &lt;code>POST&lt;/code> uses a URL-encoded form body.&lt;/li>
&lt;li>If you supply a &lt;code>redirect_uri&lt;/code> to &lt;code>/oauth/authorize&lt;/code>, you must also supply it as an additional parameter in the &lt;code>POST&lt;/code> to &lt;code>/oauth/token&lt;/code>&lt;/li>
&lt;li>Use a tool such as &lt;a href="https://portswigger.net/burp">Burp&lt;/a> or &lt;a href="http://charlesproxy.com">Charles&lt;/a> to deliberately &amp;lsquo;man-in-the-middle&amp;rsquo; the connection requests between your server and Onshape, and verify that you are performing the correct REST operations (GET vs. POST) and correctly URL-encoding the parameter values.&lt;/li>
&lt;/ol>
&lt;h2 id="final-code">Final Code&lt;/h2>
&lt;p>The above example uses Node.js to authenticate an Onshape app. This section includes the code for using OAuth2 with other coding languages.&lt;/p>
&lt;h3 id="nodejs">Node.js&lt;/h3>
&lt;p>&lt;strong>Prerequisites&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install passport
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install passport-onshape
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Environment variables&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>authorizationURL : &amp;lt;https://oauth.onshape.com/oauth/authorize&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tokenURL : &amp;lt;https://oauth.onshape.com/oauth/token&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>userProfileURL : &amp;lt;https://cad.onshape.com/api/users/sessioninfo&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>app.js&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//App definitions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> path = require(&lt;span style="color:#a50">&amp;#39;path&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> uuid = require(&lt;span style="color:#a50">&amp;#39;uuid&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> express = require(&lt;span style="color:#a50">&amp;#39;express&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> session = require(&lt;span style="color:#a50">&amp;#39;express-session&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> bodyParser = require(&lt;span style="color:#a50">&amp;#39;body-parser&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> passport = require(&lt;span style="color:#a50">&amp;#39;passport&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> OnshapeStrategy = require(&lt;span style="color:#a50">&amp;#39;passport-onshape&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> config = require(&lt;span style="color:#a50">&amp;#39;./config&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Tell Express to use Passport, and initialize it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> app = express();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(express.&lt;span style="color:#00a">static&lt;/span>(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(express.&lt;span style="color:#00a">static&lt;/span>(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;dist&amp;#39;&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(bodyParser.json());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.set(&lt;span style="color:#a50">&amp;#39;trust proxy&amp;#39;&lt;/span>, &lt;span style="color:#099">1&lt;/span>); &lt;span style="color:#aaa;font-style:italic">// To allow to run correctly behind Heroku when deployed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(session({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secret: config.sessionSecret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> saveUninitialized: &lt;span style="color:#00a">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resave: &lt;span style="color:#00a">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cookie: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#a50">&amp;#39;app-gltf-viewer&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sameSite: &lt;span style="color:#a50">&amp;#39;none&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secure: &lt;span style="color:#00a">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> httpOnly: &lt;span style="color:#00a">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path: &lt;span style="color:#a50">&amp;#39;/&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxAge: &lt;span style="color:#099">1000&lt;/span> * &lt;span style="color:#099">60&lt;/span> * &lt;span style="color:#099">60&lt;/span> * &lt;span style="color:#099">24&lt;/span> &lt;span style="color:#aaa;font-style:italic">// 1 day
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(passport.initialize());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(passport.session());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Store the Onshape user information
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>passport.serializeUser((user, done) =&amp;gt; done(&lt;span style="color:#00a">null&lt;/span>, user));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>passport.deserializeUser((obj, done) =&amp;gt; done(&lt;span style="color:#00a">null&lt;/span>, obj));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Initialize Passport with the Onshape Strategy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>passport.use(&lt;span style="color:#00a">new&lt;/span> OnshapeStrategy({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientID: config.oauthClientId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientSecret: config.oauthClientSecret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> callbackURL: config.oauthCallbackUrl,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> authorizationURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/oauth/authorize`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tokenURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/oauth/token`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userProfileURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/api/users/sessioninfo`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (accessToken, refreshToken, profile, done) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> profile.accessToken = accessToken;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> profile.refreshToken = refreshToken;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> done(&lt;span style="color:#00a">null&lt;/span>, profile);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Define the Onshape API endpoint
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>app.use(&lt;span style="color:#a50">&amp;#39;/oauthSignin&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">/* These 5 lines are specific to the glTF Viewer sample app. You can replace them with the input for whatever Onshape endpoints you are using in your app. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> state = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docId: req.query.documentId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workId: req.query.workspaceId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elId: req.query.elementId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req.session.state = state;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> passport.authenticate(&lt;span style="color:#a50">&amp;#39;onshape&amp;#39;&lt;/span>, { state: uuid.v4(state) })(req, res);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(&lt;span style="color:#a50">&amp;#39;/oauthRedirect&amp;#39;&lt;/span>, passport.authenticate(&lt;span style="color:#a50">&amp;#39;onshape&amp;#39;&lt;/span>, { failureRedirect: &lt;span style="color:#a50">&amp;#39;/grantDenied&amp;#39;&lt;/span> }), (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">/* This code is specific to the glTF Viewer sample app. You can replace it with the input for whatever Onshape endpoints you are using in your app. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.redirect(&lt;span style="color:#a50">`/?documentId=&lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.docId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">&amp;amp;workspaceId=&lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.workId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">&amp;amp;elementId=&lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.elId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Handle denied access
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>app.get(&lt;span style="color:#a50">&amp;#39;/grantDenied&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.sendFile(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;html&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;grantDenied.html&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">/** After landing on the home page, we check if a user had already signed in. If no user has signed in, we redirect the request to the OAuth sign-in page. If a user had signed in previously, we will attempt to refresh the access token of the user. After successfully refreshing the access token, we will simply take the user to the landing page of the app. If the refresh token request fails, we will redirect the user to the OAuth sign-in page again. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.get(&lt;span style="color:#a50">&amp;#39;/&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">if&lt;/span> (!req.user) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> res.redirect(&lt;span style="color:#a50">`/oauthSignin&lt;/span>&lt;span style="color:#a50">${&lt;/span>req._parsedUrl.search ? req._parsedUrl.search : &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> refreshAccessToken(req.user).then((tokenJson) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Dereference the user object, and update the access token and refresh token in the in-memory object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">let&lt;/span> usrObj = JSON.parse(JSON.stringify(req.user));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usrObj.accessToken = tokenJson.access_token;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usrObj.refreshToken = tokenJson.refresh_token;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Update the user object in PassportJS. No redirections will happen here, this is a purely internal operation.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> req.login(usrObj, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> res.sendFile(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;html&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;index.html&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).&lt;span style="color:#00a">catch&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Refresh token failed, take the user to OAuth sign in page.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">return&lt;/span> res.redirect(&lt;span style="color:#a50">`/oauthSignin&lt;/span>&lt;span style="color:#a50">${&lt;/span>req._parsedUrl.search ? req._parsedUrl.search : &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Refresh the access token
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> refreshAccessToken = &lt;span style="color:#00a">async&lt;/span> (user) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> body = &lt;span style="color:#a50">&amp;#39;grant_type=refresh_token&amp;amp;refresh_token=&amp;#39;&lt;/span> + user.refreshToken + &lt;span style="color:#a50">&amp;#39;&amp;amp;client_id=&amp;#39;&lt;/span> + config.oauthClientId + &lt;span style="color:#a50">&amp;#39;&amp;amp;client_secret=&amp;#39;&lt;/span> + config.oauthClientSecret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">let&lt;/span> res = &lt;span style="color:#00a">await&lt;/span> fetch(config.oauthUrl + &lt;span style="color:#a50">&amp;#34;/oauth/token&amp;#34;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method: &lt;span style="color:#a50">&amp;#39;POST&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>: &lt;span style="color:#a50">&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> body: body
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">if&lt;/span> (res.ok) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> &lt;span style="color:#00a">await&lt;/span> res.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">throw&lt;/span> &lt;span style="color:#00a">new&lt;/span> &lt;span style="color:#0aa">Error&lt;/span>(&lt;span style="color:#a50">&amp;#34;Could not refresh access token, please sign in again.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(&lt;span style="color:#a50">&amp;#39;/api&amp;#39;&lt;/span>, require(&lt;span style="color:#a50">&amp;#39;./api&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>module.exports = app;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Use the access token in an Authorization header.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>makeOnshapeAPICall: &lt;span style="color:#00a">async&lt;/span> (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> apiUrl = &lt;span style="color:#a50">&amp;#34;https://cad.onshape.com/glassworks/explorer/#/Document/getDocuments&amp;#34;&lt;/span>; &lt;span style="color:#aaa;font-style:italic">//You can replace this with any Onshape API endpoint URL.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">const&lt;/span> resp = &lt;span style="color:#00a">await&lt;/span> fetch(normalizedUrl, { headers: { Authorization: &lt;span style="color:#a50">`Bearer &lt;/span>&lt;span style="color:#a50">${&lt;/span>req.user.accessToken&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span> }});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> data = &lt;span style="color:#00a">await&lt;/span> resp.text();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> contentType = resp.headers.get(&lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.status(resp.status).contentType(contentType).send(data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">catch&lt;/span> (err) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.status(&lt;span style="color:#099">500&lt;/span>).json({ error: err });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="python">Python&lt;/h3>
&lt;p>This Python code only works on a local machine. To deploy the code, you can replace the Flask code with the web server of your choice.&lt;/p>
&lt;p>&lt;strong>Prerequisites&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip3 install flask
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip3 install requests_oauthlib
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>app.py&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">from&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">flask&lt;/span> &lt;span style="color:#00a">import&lt;/span> Flask, request, redirect, session, url_for
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">from&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">flask.json&lt;/span> &lt;span style="color:#00a">import&lt;/span> jsonify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">from&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">requests_oauthlib&lt;/span> &lt;span style="color:#00a">import&lt;/span> OAuth2Session
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">import&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">os&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app = Flask(__name__)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.secret_key = &lt;span style="color:#a50">b&lt;/span>&lt;span style="color:#a50">&amp;#39;F&lt;/span>&lt;span style="color:#a50">\xf5\xe5\xc0\xbe\t&lt;/span>&lt;span style="color:#a50">g&lt;/span>&lt;span style="color:#a50">\x7f\xac\x89\x87&lt;/span>&lt;span style="color:#a50">e&lt;/span>&lt;span style="color:#a50">\xc2&lt;/span>&lt;span style="color:#a50">4&lt;/span>&lt;span style="color:#a50">\xe8&lt;/span>&lt;span style="color:#a50">m&lt;/span>&lt;span style="color:#a50">\x1c\xd9\xda\x96&lt;/span>&lt;span style="color:#a50">G,&lt;/span>&lt;span style="color:#a50">\x90&lt;/span>&lt;span style="color:#a50">i&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>os.environ[&lt;span style="color:#a50">&amp;#39;OAUTHLIB_INSECURE_TRANSPORT&amp;#39;&lt;/span>] = &lt;span style="color:#a50">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client_id = &amp;lt;Client ID of your application&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client_secret = &amp;lt;Client Secret of your application&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>authorization_base_url = &lt;span style="color:#a50">&amp;#34;https://oauth.onshape.com/oauth/authorize&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>token_url = &lt;span style="color:#a50">&amp;#34;https://oauth.onshape.com/oauth/token&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>redirect_url = &lt;span style="color:#a50">&amp;#34;http://localhost:5000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">@app.route&lt;/span>(&lt;span style="color:#a50">&amp;#39;/&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">def&lt;/span> &lt;span style="color:#0a0">home&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onshape = OAuth2Session(client_id, redirect_uri=redirect_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth_url, state = onshape.authorization_url(authorization_base_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session[&lt;span style="color:#a50">&amp;#39;oauth_state&amp;#39;&lt;/span>] = state
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> redirect(auth_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">@app.route&lt;/span>(&lt;span style="color:#a50">&amp;#39;/token&amp;#39;&lt;/span>, methods=[&lt;span style="color:#a50">&amp;#34;GET&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">def&lt;/span> &lt;span style="color:#0a0">token&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onshape = OAuth2Session(client_id, state=session[&lt;span style="color:#a50">&amp;#39;oauth_state&amp;#39;&lt;/span>], redirect_uri=redirect_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> token = onshape.fetch_token(token_url, client_secret=client_secret, authorization_response=request.url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session[&lt;span style="color:#a50">&amp;#39;oauth_token&amp;#39;&lt;/span>] = token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> redirect(url_for(&lt;span style="color:#a50">&amp;#39;.documents&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">@app.route&lt;/span>(&lt;span style="color:#a50">&amp;#39;/documents&amp;#39;&lt;/span>, methods=[&lt;span style="color:#a50">&amp;#34;GET&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">def&lt;/span> &lt;span style="color:#0a0">documents&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extra = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;client_id&amp;#39;&lt;/span>: client_id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;client_secret&amp;#39;&lt;/span>: client_secret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onshape = OAuth2Session(client_id, token=session[&lt;span style="color:#a50">&amp;#39;oauth_token&amp;#39;&lt;/span>], redirect_uri=redirect_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session[&lt;span style="color:#a50">&amp;#39;oauth_token&amp;#39;&lt;/span>] = onshape.refresh_token(token_url, **extra)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> jsonify(onshape.get(&lt;span style="color:#a50">&amp;#39;https://cad.onshape.com/api/v6/documents?q=Untitled&amp;amp;ownerType=1&amp;amp;sortColumn=createdAt&amp;amp;sortOrder=desc&amp;amp;offset=0&amp;amp;limit=20&amp;#39;&lt;/span>).json())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">if&lt;/span> __name__ == &lt;span style="color:#a50">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app.run()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: API Keys</title><link>https://onshape-public.github.io/docs/auth/apikeys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/auth/apikeys/</guid><description>
&lt;p>&lt;strong>NOTE: The authentication processes outlined on this page are for local and internal testing only. All applications submitted to the Onshape App Store must follow the &lt;a href="https://onshape-public.github.io/docs/auth/oauth">Onshape OAuth2 protocols&lt;/a>.&lt;/strong>&lt;/p>
&lt;h2 id="why-api-keys">Why API Keys?&lt;/h2>
&lt;p>API keys are useful for small applications meant for personal use, allowing developers to avoid the overhead of the OAuth workflow. Creating an app is very easy with API keys: create an API key with the Developer Portal, set up a function to build your API key header as in the samples, and make your API calls! There&amp;rsquo;s no need to deal with OAuth redirects or things like that.&lt;/p>
&lt;p>We&amp;rsquo;ve moved over to using API keys for authenticating requests instead of using cookies for several reasons.&lt;/p>
&lt;ol>
&lt;li>Security: Each request is signed with unique headers so that we can be sure it&amp;rsquo;s coming from the right place.&lt;/li>
&lt;li>OAuth: The API key system we&amp;rsquo;re now using for HTTP requests is the same process developers follow when building full-blown OAuth applications; there&amp;rsquo;s no longer a disconnect between the two.&lt;/li>
&lt;/ol>
&lt;p>Once you create an API key, it will only be valid in the stack on which it was created. An API key created on the partner stack, for example, will not function on the production stack.&lt;/p>
&lt;p>If you need information or have a question unanswered in this documentation, feel free to chat with us by sending an email to &lt;a href="mailto:api-support@onshape.com">api-support@onshape.com&lt;/a> or by checking out the &lt;a href="https://forum.onshape.com" target="_blank">forums&lt;/a>. If you are a member of the DevPartners group (see the Development help page for information) more detailed instructions and code examples are in the apikey sample repo.&lt;/p>
&lt;h2 id="1-create-api-keys">1. Create API Keys&lt;/h2>
&lt;ol>
&lt;li>Go to &lt;a href="https://dev-portal.onshape.com">https://dev-portal.onshape.com&lt;/a>.&lt;/li>
&lt;li>In the left pane, click &lt;code>API keys&lt;/code>.&lt;/li>
&lt;li>Click the &lt;code>Create new API key&lt;/code> button.&lt;/li>
&lt;li>Select the desired permissions for your app.&lt;/li>
&lt;li>Click the &lt;code>Create API key&lt;/code> button. &lt;/br>
&lt;img src="https://onshape-public.github.io/images/CreateNewAPIKey.png" alt="image">&lt;/li>
&lt;li>Copy both the &lt;strong>access key&lt;/strong> and &lt;strong>secret key&lt;/strong> from the pop-up window, save them somewhere, then click the &lt;code>Close&lt;/code> button.
&lt;/br>&lt;strong>IMPORTANT NOTE: You will not be able to find the secret key again, so save it somewhere safe!&lt;/strong>&lt;/br>
&lt;img src="https://onshape-public.github.io/images/APIKeySecretKey.png" alt="image">&lt;/li>
&lt;li>The details for your application appear. &lt;/br>
&lt;img src="https://onshape-public.github.io/images/DevPortalKeys.png" alt="image">&lt;/li>
&lt;li>Now that you have a key pair, see &lt;a href="#generating-a-request-signature">Generate a Request Signature&lt;/a> for information on signing your requests to use our API.&lt;/li>
&lt;/ol>
&lt;p>Once you have your access key and secret, you will want to avoid giving others access to them, since they&amp;rsquo;re tied directly to your personal Onshape account. Think of your API key as a username and password pair. Do not place them directly in the code for your application, especially if others might see it. The samples we provide here use a separate configuration file to contain this information, but there are other ways to keep the access key and secret safe, like setting them as environment variables.&lt;/p>
&lt;h3 id="scopes">Scopes&lt;/h3>
&lt;p>There are several scopes available for API keys (equivalent to OAuth scopes):&lt;/p>
&lt;ul>
&lt;li>&lt;code>OAuth2Read&lt;/code> - Read non-personal information (documents, parts, etc.)&lt;/li>
&lt;li>&lt;code>OAuth2ReadPII&lt;/code> - Read personal information (name, email, etc.)&lt;/li>
&lt;li>&lt;code>OAuth2Write&lt;/code> - Create and edit documents, etc.&lt;/li>
&lt;li>&lt;code>OAuth2Delete&lt;/code> - Delete documents, etc.&lt;/li>
&lt;li>&lt;code>OAuth2Purchase&lt;/code> - Authorize purchases from account&lt;/li>
&lt;/ul>
&lt;h2 id="2-select-an-authentication-option">2. Select an Authentication Option&lt;/h2>
&lt;p>Please select an option for authentication:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#local-authorization">Basic Authorization&lt;/a>: Lowest security. For local testing only.&lt;/li>
&lt;li>&lt;a href="#request-signature">Request Signature&lt;/a>: Medium security. For testing and internal use.&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth2&lt;/a>: Highest security. Required for all Onshape Apps.&lt;/li>
&lt;/ul>
&lt;h2 id="basic-authorization">Basic Authorization&lt;/h2>
&lt;p>For local testing, you can provide a basic authentication via your API Keys.&lt;/p>
&lt;ol>
&lt;li>Open your terminal and run the following command, replacing &lt;code>ACCESS_KEY&lt;/code> and &lt;code>SECRET_KEY&lt;/code> with the &lt;strong>access key&lt;/strong> and &lt;strong>secret key&lt;/strong> you created earlier. Remember to include the colon (&lt;code>:&lt;/code>) between the keys. &lt;em>You will receive a long, base-64-encoded string as output.&lt;/em>
&lt;ul>
&lt;li>&lt;strong>MacOS&lt;/strong>:
&lt;pre tabindex="0">&lt;code>printf ACCESS_KEY:SECRET_KEY | base64
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;strong>Windows&lt;/strong>:
&lt;pre tabindex="0">&lt;code>powershell &amp;#34;[convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(\&amp;#34;ACCESS_KEY:SECRET_KEY\&amp;#34;))&amp;#34;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Add the authorization header to your code, replacing &lt;code>CREDENTIALS&lt;/code> with the string you receieved in Step 1:
&lt;pre tabindex="0">&lt;code>-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>See our &lt;a href="https://onshape-public.github.io/docs/api-intro/quickstart">Quick Start Guide&lt;/a> for an example of using Basic Authorization in an app.&lt;/p>
&lt;h2 id="request-signature">Request Signature&lt;/h2>
&lt;p>For additional security, you can include your API Keys as part of a request signature. This provides more security than the Basic Authorization above, but less security than OAuth2.&lt;/p>
&lt;p>To ensure that a request is coming from you, we have a process for signing requests that you must follow for API calls to work. Everything is done via HTTP headers that you&amp;rsquo;ll need to set:&lt;/p>
&lt;ol>
&lt;li>&lt;em>Date&lt;/em>: A standard date header giving the time of the request; must be accurate within &lt;strong>5 minutes&lt;/strong> of request. Example: &lt;code>Mon, 11 Apr 2016 20:08:56 GMT&lt;/code>&lt;/li>
&lt;li>&lt;em>On-Nonce&lt;/em>: A string that satisfies the following requirements (see the code for one possible way to generate it):
&lt;ul>
&lt;li>At least 16 characters&lt;/li>
&lt;li>Alphanumeric&lt;/li>
&lt;li>Unique for each request&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;em>Authorization&lt;/em>: This is where the API keys come into play. You&amp;rsquo;ll sign the request by implementing this algorithm:
&lt;ul>
&lt;li>&lt;strong>Input&lt;/strong>: Method, URL, On-Nonce, Date, Content-Type, AccessKey, SecretKey&lt;/li>
&lt;li>&lt;strong>Output&lt;/strong>: String of the form: &lt;code>On &amp;lt;AccessKey&amp;gt;:HmacSHA256:&amp;lt;Signature&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;strong>Steps to generate the signature portion&lt;/strong>:
&lt;ol>
&lt;li>Parse the URL and get the following:
&lt;ol>
&lt;li>The path, e.g. &lt;code>/api/documents&lt;/code> (no query params!)&lt;/li>
&lt;li>The query string, e.g. &lt;code>a=1&amp;amp;b=2&lt;/code>
&lt;ul>
&lt;li>NOTE: If no query paramaters are present, use an empty string&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Create a string by appending the following information in order. Each field should be separated by a newline (&lt;code>\n&lt;/code>) character, and the string must be converted to lowercase:
&lt;ol>
&lt;li>HTTP method&lt;/li>
&lt;li>On-Nonce header value&lt;/li>
&lt;li>Date header value&lt;/li>
&lt;li>Content-Type header value&lt;/li>
&lt;li>URL pathname&lt;/li>
&lt;li>URL query string&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Using SHA-256, generate an &lt;a href="https://en.wikipedia.org/wiki/Hash-based_message_authentication_code" target="_blank">HMAC digest&lt;/a>, using the API secret key first and then the above string, then encode it in Base64.&lt;/li>
&lt;li>Create the &lt;code>On &amp;lt;AccessKey&amp;gt;:HmacSHA256:&amp;lt;Signature&amp;gt;&lt;/code> string and use that in the Authorization header in your request.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Below is an example function to generate the authorization header, using Node.js&amp;rsquo;s standard &lt;code>crypto&lt;/code> and &lt;code>url&lt;/code> libraries:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">// ...at top of file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">var&lt;/span> u = require(&lt;span style="color:#a50">&amp;#39;url&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">var&lt;/span> crypto = require(&lt;span style="color:#a50">&amp;#39;crypto&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* Generates the &amp;#34;Authorization&amp;#34; HTTP header for using the Onshape API
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} method - Request method; GET, POST, etc.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} url - The full request URL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} nonce - 25-character nonce (generated by you)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} authDate - UTC-formatted date string (generated by you)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} contentType - Value of the &amp;#34;Content-Type&amp;#34; header; generally &amp;#34;application/json&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} accessKey - API access key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} secretKey - API secret key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @return {string} Value for the &amp;#34;Authorization&amp;#34; header
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">function&lt;/span> createSignature(method, url, nonce, authDate, contentType, accessKey, secretKey) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> urlObj = u.parse(url);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> urlPath = urlObj.pathname;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> urlQuery = urlObj.query ? urlObj.query : &lt;span style="color:#a50">&amp;#39;&amp;#39;&lt;/span>; &lt;span style="color:#aaa;font-style:italic">// if no query, use empty string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> str = (method + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span> + nonce + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span> + authDate + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span> + contentType + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span> +
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPath + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span> + urlQuery + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span>).toLowerCase();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> hmac = crypto.createHmac(&lt;span style="color:#a50">&amp;#39;sha256&amp;#39;&lt;/span>, secretKey)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .update(str)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .digest(&lt;span style="color:#a50">&amp;#39;base64&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> signature = &lt;span style="color:#a50">&amp;#39;On &amp;#39;&lt;/span> + accessKey + &lt;span style="color:#a50">&amp;#39;:HmacSHA256:&amp;#39;&lt;/span> + hmac;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> signature;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="redirects">Redirects&lt;/h3>
&lt;p>Some API endpoints return 307 redirects. You must generate an Authorization header for the redirect as well, but please note that the server portion of the URL might be different, the redirect URL may contain query parameters that must be encoded in the Authorization header, etc.&lt;/p></description></item><item><title>Docs: Associativity</title><link>https://onshape-public.github.io/docs/api-adv/associativity/</link><pubDate>Mon, 18 May 2020 20:28:26 -0400</pubDate><guid>https://onshape-public.github.io/docs/api-adv/associativity/</guid><description>
&lt;p>Onshape does not expose a persistent ID for any of these entities. When the model changes, the ID may change. Therefore, Onshape provides an API to enable mapping IDs from a previous microversion to the current microversion. Assuming a simple case of maintaining associativity for a face, an abstract workflow might be:&lt;/p>
&lt;ol>
&lt;li>Read the tessellated model data.&lt;/li>
&lt;li>Select the face of interest.&lt;/li>
&lt;li>Store the Face ID and Document Microversion ID for the face.&lt;/li>
&lt;li>[ user changes model ]&lt;/li>
&lt;li>Call the REST API to translate from the known Face ID to an ID in the new model.&lt;/li>
&lt;li>Re-apply application-specific data to the face(s) in the new model. Note that a face may become zero, one or multiple faces in the new model, depending on what changes the user made.&lt;/li>
&lt;/ol>
&lt;h2 id="associativity-example">Associativity Example&lt;/h2>
&lt;ol>
&lt;li>Create a cube in Onshape:&lt;/br>
&lt;img src="https://onshape-public.github.io/images/associativityimage03.png" alt="image alt text">&lt;/li>
&lt;li>Get the document microversion ID from the URL: &lt;code>https://cad.onshape.com/api/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/microversionId&lt;/code>.&lt;/li>
&lt;li>Use the appropriate REST API to get the tessellated faces (&lt;code>getPartStudioFaces&lt;/code>)
and edges (&lt;code>getPartStudioEdges&lt;/code>}. Note the ids:
&lt;ul>
&lt;li>Part ID: &lt;code>JHD&lt;/code>&lt;/li>
&lt;li>Front face ID: &lt;code>JHO&lt;/code>&lt;/li>
&lt;li>Top edge of the front face ID: &lt;code>JHd&lt;/code>&lt;/li>
&lt;li>Right edge of the top face ID: &lt;code>JHt&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Split cube with the Front plane and translate the IDs:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/associativityimage00.png" alt="image alt text">&lt;/p>
&lt;p>&lt;strong>POST&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>https://cad.onshape.com/api/partstudios/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/e/&amp;lt;eid&amp;gt;/idtranslations
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Body&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span> : [&lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Response&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;documentId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;748d6e850c9248328189922b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;elementId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;042a6fa54e79451e8076463d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;SPLIT&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JID&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JIH&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;SPLIT&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JI5&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JI9&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;targetDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;78bc7f3fcf82475085c2f3ab&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Delete one of the parts, and translate the IDs:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/associativityimage01.png" alt="image alt text">&lt;/p>
&lt;p>&lt;strong>POST&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>https://cad.onshape.com/api/partstudios/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/e/&amp;lt;eid&amp;gt;/idtranslations
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Body&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span> : [&lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Response&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;documentId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;748d6e850c9248328189922b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;elementId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;042a6fa54e79451e8076463d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JID&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;FAILED_TO_RESOLVE&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;FAILED_TO_RESOLVE&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JI5&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;targetDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;52aa74d34b624f3aaef33204&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Roll back the delete and the split, and translate the IDs:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/associativityimage02.png" alt="image alt text">&lt;/p>
&lt;p>&lt;strong>POST&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>https://cad.onshape.com/api/partstudios/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/e/&amp;lt;eid&amp;gt;/idtranslations
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Body&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span> : [&lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Response&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;documentId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;748d6e850c9248328189922b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;elementId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;042a6fa54e79451e8076463d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JID&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;targetDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;52aa74d34b624f3aaef33204&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Billing</title><link>https://onshape-public.github.io/docs/api-adv/billing/</link><pubDate>Mon, 18 May 2020 20:29:36 -0400</pubDate><guid>https://onshape-public.github.io/docs/api-adv/billing/</guid><description>
&lt;p>This document describes APIs that will allow partners to interact with the Onshape billing system.&lt;/p>
&lt;p>Please address questions to &amp;ldquo;&lt;a href="mailto:api-support@onshape.com">api-support@onshape.com&lt;/a>&amp;rdquo; for the fastest response.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>All billing is done through &amp;ldquo;plans&amp;rdquo; that are created in the Developer Portal. A “plan” has the following attributes:&lt;/p>
&lt;table>
&lt;tr>
&lt;td>Name (also called SKU)&lt;/td>
&lt;td>A unique (within your company) plan name&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Description&lt;/td>
&lt;td>A user-visible description of the plan&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Amount&lt;/td>
&lt;td>The cost of the plan (may be one-time or recurring, depending on the type)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Type&lt;/td>
&lt;td>Monthly, One-time or Consumable&lt;/td>
&lt;/tr>
&lt;/table>
&lt;p>Onshape defines three kinds of plans:&lt;/p>
&lt;table>
&lt;tr>
&lt;td>Plan type&lt;/td>
&lt;td>Description&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Recurring
(Monthly Subscription)&lt;/td>
&lt;td>A plan that is renewed monthly at a fixed cost. All Apps in the app store must have a Free monthly plan (which is created by default), and may have additional paid plans.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>One-time&lt;/td>
&lt;td>A plan that is purchased once (not renewed monthly). A user may purchase these multiple times.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Consumable&lt;/td>
&lt;td>A plan that represents a consumable unit, such as "hours of rendering" or “simulation runs”. Consumable plans are not fully implemented at this time, but the consumable functionality can be implemented using One-time Purchase plans as described below.&lt;/td>
&lt;/tr>
&lt;/table>
&lt;p>Users may purchase plans through the App Store interface. In addition, if your application has the OAuth Purchase Scope, your application can initiate &amp;ldquo;in-app&amp;rdquo; purchases by calling Onshape to request a purchase.&lt;/p>
&lt;p>The basic steps for interacting with Onshape Billing:&lt;/p>
&lt;ol>
&lt;li>Define one or more plans using the Developer Portal interface&lt;/li>
&lt;li>Use the Onshape API to determine the current user’s plan&lt;/li>
&lt;li>Provide features and/or limits based on the current plan&lt;/li>
&lt;/ol>
&lt;h2 id="using-the-onshape-billing-api">Using the Onshape Billing API&lt;/h2>
&lt;p>&lt;code>GET /api/accounts/purchases&lt;/code>&lt;/p>
&lt;p>Returns a list of purchase made by the current user for plans owned by the current application. Use this information to determine what capabilities or features the user is entitled to use.&lt;/p>
&lt;p>&lt;code>DELETE /api/accounts/purchases/&amp;lt;purchase id&amp;gt;&lt;/code>&lt;/p>
&lt;p>Cancel a recurring purchase.&lt;/p>
&lt;p>&lt;code>POST /api/accounts/purchases/&amp;lt;purchase id&amp;gt;/consume&lt;/code>&lt;/p>
&lt;p>Indicate the use of a consumable. (Not fully implemented at this time)&lt;/p>
&lt;p>&lt;code>GET /api/billing/plans/client/&amp;lt;client id&amp;gt;&lt;/code>&lt;/p>
&lt;p>Get a list of the billing plans defined for this client.&lt;/p>
&lt;h2 id="initiating-a-purchase-from-an-application-in-app-purchases">Initiating a purchase from an application (in-app purchases)&lt;/h2>
&lt;p>To initiate a purchase of a subscription or one time item you must set the browser’s location to particular URL within the Onshape stack:&lt;/p>
&lt;p>&lt;code>https://cad.onshape.com/billing/purchase?redirectUri=RRRR&amp;amp;clientId=CCCC&amp;amp;sku=SSSS&amp;amp;userId=UUUU&lt;/code>&lt;/p>
&lt;p>Each of the query parameters should be URL encoded. The clientId is your application’s OAuth Client ID, the sku is the name/sku field for an item (you can find this in the developer portal or it’s retrievable through the /api/billing/plans REST endpoints). The user Id should be the Onshape user Id for the current user and is available through the /api/users/session REST endpoint. The redirectUri is the URI the user will be returned to within your website when the purchase is finished.&lt;/p>
&lt;p>When the browser’s location is changed to this pattern the Onshape stack will serve content to confirm the users identity, confirm the details of what is being purchased (or obtained if the item is free) and then after the user agrees to the purchase will confirm the transaction (with our payment processor if the item is not free) and then redirect the user back to the supplied redirectUri (the browser location will be changed to the redirectUri). Additionally Onshape will add a &lt;code>success=true&lt;/code> or &lt;code>success=false&lt;/code> query parameter to the redirectURI indicating whether the user completed successfully (payment was taken if required etc.) or failed, either due to cancelling the purchase or an issue with payment.&lt;/p>
&lt;p>When the browser fetches the redirectUri your application must call back through the &lt;code>/api/account/purchases&lt;/code> API to get confirmation of the purchase - do NOT assume that a fetch of the redirectUri with a &lt;code>success=true&lt;/code> query parameter actually indicates a purchase has occurred. Query the Onshape stack with the &lt;code>/api/account/purchases&lt;/code> API to ensure that the required item has actually been bought.&lt;/p>
&lt;h2 id="consumable-items">Consumable Items&lt;/h2>
&lt;p>A detailed description of the interface for managing consumable purchases will be provided shortly. You can use one-time plans to achieve similar results:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Define a one-time purchase plan with a description indicating the nature of the purchase, for example:&lt;/p>
&lt;p>RENDER-10 Ten rendering hours $100&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Keep track of the number of hours that the user has consumed. You can store and retrieve this information in Onshape using the following APIs. These APIs allow you to store and retrieve arbitrary information on a per-user basis.&lt;/p>
&lt;p>POST /applications/clients/:cid/settings/users/:uid
GET /applications/clients/:cid/settings/users/:uid&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check the number of available &amp;ldquo;units&amp;rdquo; by getting the purchases and the record of consumables. Be sure to include UI in your application that the user can use to see their remaining quantity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Alternately, you can store the consumption data in your own system; you do not need to use the Onshape API to manage that data.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Onshape intends to provide a richer set of APIs that help track the purchase and consumption of consumables in the near future.&lt;/p>
&lt;h2 id="other-billing-models">Other billing models&lt;/h2>
&lt;p>You can use these mechanisms to implement other models. For example, a time-limited trial could be implemented by scanning purchases for the first &amp;ldquo;purchase&amp;rdquo; and denying service if it is more than a defined number of days in the past. A “fixed number of uses per month” could be implemented as a monthly subscription, string usage data with the settings API, and denying service after a fixed number of uses.&lt;/p>
&lt;h2 id="samples">Samples&lt;/h2>
&lt;p>Onshape will provide sample code for both desktop and integrated applications demonstrating the use of the billing APIs and workflow. If you are subscribed to the Onshape Github Partner group, you will have access to those samples as soon as they are posted.&lt;/p>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>Please contact &lt;a href="mailto:api-support@onshape.com">api-support@onshape.com&lt;/a> to discuss details of testing billing &amp;amp; subscriptions.&lt;/p></description></item><item><title>Docs: Data Import &amp; Export</title><link>https://onshape-public.github.io/docs/api-adv/translation/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/translation/</guid><description>
&lt;p>This page describes the APIs Onshape provides for importing files to Onshape and exporting files from Onshape into different formats. We refer to the process of importing and exporting files from one format to another as &lt;em>translating&lt;/em> the files.&lt;/p>
&lt;p>Onshape provides several APIs to support this format translation. These fall into three categories:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#synchronous-exports">Synchronous exports&lt;/a> - Export Onshape content to glTF, STL, or Parasolid format.&lt;/li>
&lt;li>&lt;a href="#asynchronous-exports">Asynchronous exports&lt;/a> - Export Onshape content into a variety of other formats.&lt;/li>
&lt;li>&lt;a href="#imports">Import to Onshape&lt;/a> - Import a translatable file by uploading it to an Onshape blob element.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>📘 &lt;strong>Note&lt;/strong>&lt;/p>
&lt;p>This page provides sample code as curls. See the &lt;a href="https://curl.se/docs/">curl documentation&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>📘 &lt;strong>Note&lt;/strong>&lt;/p>
&lt;p>All Onshape API calls must be properly authenticated by replacing the &lt;code>CREDENTIALS&lt;/code> variable in the curls below. See the &lt;a href="https://onshape-public.github.io/docs/auth/apikeys">API Keys&lt;/a> page for instructions and the &lt;a href="https://onshape-public.github.io/docs/api-intro/quickstart">Quick Start&lt;/a> for an example. All applications submitted to the Onshape App Store &lt;em>must&lt;/em> authenticate with &lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth2&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>📘 &lt;strong>Note&lt;/strong>&lt;/p>
&lt;p>For Enterprise accounts, replace &lt;strong>&lt;font color="slate">cad&lt;/font>&lt;/strong> in all Onshape URLs with your company domain.
https://&lt;font color="slate">&lt;strong>cad&lt;/strong>&lt;/font>.onshape.com &amp;gt; https://&lt;font color="slate">&lt;strong>companyName&lt;/strong>&lt;/font>.onshape.com&lt;/p>
&lt;/blockquote>
&lt;h2 id="synchronous-exports">Synchronous exports&lt;/h2>
&lt;p>Onshape provides a simple way to export content to common formats (glTF, Parasolid, and STL). Most of the interfaces defined here operate by requesting an HTTP redirect to a different URL where the request is fulfilled. Applications must explicitly handle the redirect and attachment authentication headers to the follow-up request, or it will fail.&lt;/p>
&lt;p>The following endpoints are available. We&amp;rsquo;ve included an example curl with each one.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/exportPartGltf">Export Part to glTF&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/parts/d/{did}/w/{wid}/e/{eid}/partid/{partid}/gltf?rollbackBarIndex=-1&amp;amp;outputSeparateFaceNodes=false&amp;amp;outputFaceAppearances=false&amp;#39; \
-H &amp;#39;accept: model/gltf-binary;qs=0.08&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/exportPS">Export Part to Parasolid&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/parts/d/{did}/w/{wid}?elementId={eid}&amp;amp;withThumbnails=false&amp;amp;includePropertyDefaults=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/exportStl">Export Part to STL&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/parts/d/{did}/w/{wid}/e/{eid}/partid/{partid}/stl?mode=text&amp;amp;grouping=true&amp;amp;scale=1&amp;amp;units=inch&amp;#39; \
-H &amp;#39;accept: application/octet-stream&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/exportPartStudioGltf">Export PartStudio to glTF&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/partstudios/d/{did}/w/{wid}/e/{eid}/gltf?rollbackBarIndex=-1&amp;amp;outputSeparateFaceNodes=false&amp;amp;outputFaceAppearances=false&amp;#39; \
-H &amp;#39;accept: model/gltf-binary;qs=0.08&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/exportParasolid">Export PartStudio to Parasolid&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/partstudios/d/{did}/w/{wid}/e/{eid}/parasolid?version=0&amp;amp;includeExportIds=false&amp;amp;binaryExport=false&amp;#39; \
-H &amp;#39;accept: */*&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/exportPartStudioStl">Export PartStudio to STL&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/partstudios/d/{did}/w/{wid}/e/{eid}/stl?mode=text&amp;amp;grouping=true&amp;amp;scale=1&amp;amp;units=inch&amp;#39; \
-H &amp;#39;accept: */*&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="asynchronous-exports">Asynchronous exports&lt;/h2>
&lt;p>The exports in the last section perform the format translation synchronously, returning the output immediately after some processing delay. Other format conversions are more complex and time-consuming, and in many cases, cannot be completed quickly enough to prevent connection errors. Note that the source format for an export is currently always automatically detected by Onshape. Part Studios and Assemblies are known to be &lt;code>ONSHAPE&lt;/code> format. File uploads have their type determined by the filename suffix. For example, a file named &lt;em>part7.step&lt;/em> is assumed to be in &lt;code>STEP&lt;/code> format.&lt;/p>
&lt;p>The following asynchronous translation APIs are available:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/createBlobTranslation">BlobElement/createBlobTranslation&lt;/a>: Export a Blob Element to the specified &lt;code>formatName&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/createPartStudioTranslation">PartStudios/createPartStudioTranslation&lt;/a>: Export a Part Studio to the specified &lt;code>formatName&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Assembly/translateFormat">Assembly/translateFormat&lt;/a>: Export an Assembly to the specified &lt;code>formatName&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>These asynchronous exports include a few additional steps, which are explained in more detail in the &lt;a href="#async-export-steps">next section&lt;/a>:&lt;/p>
&lt;ol>
&lt;li>See what formats are available for exporting your content with &lt;strong>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translation/getAllTranslatorFormats&lt;/a>&lt;/strong>.&lt;/li>
&lt;li>Call the desired &lt;strong>translation API&lt;/strong>.
&lt;ul>
&lt;li>Specify the target &lt;strong>&lt;code>formatName&lt;/code>&lt;/strong> in the request body JSON.&lt;/li>
&lt;li>Specify &lt;strong>&lt;code>storeInDocument=false&lt;/code>&lt;/strong> (default) to export the content to new file.&lt;/li>
&lt;li>Specify &lt;strong>&lt;code>storeInDocument=true&lt;/code>&lt;/strong> to export the content to a blob element in the source document.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Poll the &lt;strong>&lt;code>requestState&lt;/code>&lt;/strong> in the translation response and wait for a result of &lt;strong>&lt;code>DONE&lt;/code>&lt;/strong>.&lt;/li>
&lt;li>To retrieve the exported results:
&lt;ul>
&lt;li>External files: call &lt;strong>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Document/downloadExternalData">Document/downloadExternalData&lt;/a>&lt;/strong> on the &lt;code>resultExternalDataIds&lt;/code> from the translation response.&lt;/li>
&lt;li>Blob elements: call &lt;strong>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/downloadFileWorkspace">BlobElement/downloadFileWorkspace&lt;/a>&lt;/strong> on the &lt;code>resultElementIds&lt;/code> from the translation response.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="async-export-details">Async export details&lt;/h3>
&lt;p>To export your Onshape content to another format:&lt;/p>
&lt;ol>
&lt;li>Determine what export format file types are available for your content by calling: &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translations/getAllTranslatorFormats&lt;/a>.&lt;/li>
&lt;li>Next, initiate the export by calling one of the asynchronous translation APIs.
&lt;ul>
&lt;li>Note that each of these APIs takes a large JSON for specifying options for the export as part of the request body. Refer to the &lt;a href="https://onshape-public.github.io/docs/api-intro/explorer">API Explorer&lt;/a> page for help viewing these JSON docs.&lt;/li>
&lt;li>The target file format &lt;strong>must be specified in the &lt;code>formatName&lt;/code> field&lt;/strong> in the request body, and must match a valid format found in Step 1.&lt;/li>
&lt;li>By default, &lt;code>storeInDocument&lt;/code> is set to &lt;code>false&lt;/code> in the request body to export to a single data file (or a zip of multiple files). Set to &lt;code>true&lt;/code> to export as blob elements.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wait for the translation to complete. You can either register a webhook and wait to receive a notifcation that the translation is complete (see &lt;a href="https://onshape-public.github.io/docs/app-dev/webhook/">Webhook Notifications&lt;/a>), or you can poll the translation&amp;rsquo;s &lt;code>requestState&lt;/code>:
&lt;ul>
&lt;li>You can poll the &lt;code>requestState&lt;/code> from the initial translation&amp;rsquo;s response, or you can call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getTranslation">Translation/getTranslation&lt;/a> on the &lt;code>translationId&lt;/code> from the initial translation&amp;rsquo;s response.&lt;/li>
&lt;li>When a translation is complete, &lt;code>requestState&lt;/code> will change from &lt;code>ACTIVE&lt;/code> to either &lt;code>DONE&lt;/code> or &lt;code>FAILED&lt;/code>.&lt;/li>
&lt;li>When &lt;code>requestState=DONE&lt;/code>, results are available to be used.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Retrieve the exported results:
&lt;ul>
&lt;li>If you exported to an external file, call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Document/downloadExternalData">Documents/downloadExternalData&lt;/a> to retrieve the exported result.
&lt;ul>
&lt;li>Note that this API takes the source document ID and a &amp;ldquo;foreign ID&amp;rdquo; as required parameters.&lt;/li>
&lt;li>Use the &lt;code>resultExternalDataIds&lt;/code> from the translation response as the foreign ID (&lt;code>fid&lt;/code>).&lt;/li>
&lt;li>External data is associated with, but external to, the document used as translation context. This data is not versioned like with in-document data.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If your translation request body specified &lt;code>storeInDocument=true&lt;/code>, retrieve the blob element data with &lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/downloadFileWorkspace">BlobElement/downloadFileWorkspace&lt;/a>.
&lt;ul>
&lt;li>The element IDs for the new blob elements can be found in the &lt;code>resultElementIds&lt;/code> field in the translation response.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="imports">Imports&lt;/h2>
&lt;p>Files can be imported to Onshape as blob elements. When uploading a file to a blob element, either as a new element or an update to an existing element, if the file is a recognized format for import, it will be translated into &lt;code>ONSHAPE&lt;/code> format by default. This behavior can be overridden by the application, if desired.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/createTranslation">Translation/createTranslation&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/translations/d/{did}/w/{wid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: multipart/form-data&amp;#39; \
-F &amp;#39;storeInDocument=true&amp;#39; \
-F &amp;#39;flattenAssemblies=true
-F &amp;#39;file=@/path/filename.ext&amp;#39;
-F &amp;#39;formatName=&amp;#39; \
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/uploadFileCreateElement">BlobElement/uploadFileCreateElement&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/blobelements/d/{did}/w/{wid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: multipart/form-data&amp;#39; \
-F &amp;#39;storeInDocument=true&amp;#39; \
-F &amp;#39;file=@/path/filename.ext&amp;#39;
-F &amp;#39;formatName=&amp;#39; \
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/uploadFileUpdateElement">BlobElement/uploadFileUpdateElement&lt;/a>
&lt;pre tabindex="0">&lt;code> curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/blobelements/d/{did}/w/{wid}/e/{eid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: multipart/form-data&amp;#39; \
-F &amp;#39;storeInDocument=true&amp;#39; \
-F &amp;#39;locationElementId=&amp;#39; \
-F &amp;#39;file=@/path/filename.ext&amp;#39;
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>Note that these endpoints require you to specify the target document ID and workspace ID. You must also include the file to import. These APIs also includes a large request body JSON for specifying options for the import.&lt;/p>
&lt;ul>
&lt;li>Override the translation to &lt;code>ONSHAPE&lt;/code> format by specifying a valid format in the &lt;code>formatName&lt;/code> field. Get a list of valid import formats by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translation/getAllTranslatorFormats&lt;/a>.&lt;/li>
&lt;li>Specify &lt;code>storeInDocument=true&lt;/code> to import the data as a blob element into the target document. Change to &lt;code>false&lt;/code> to only create an external data file.&lt;/li>
&lt;li>If the source file contains an assembly and &lt;code>flattenAssemblies=true&lt;/code>, the assembly structure is removed and a single part studio is created.&lt;/li>
&lt;li>Note that when using cURL, you must begin the path to the file with an &lt;code>@&lt;/code> symbol.&lt;/li>
&lt;/ul>
&lt;h2 id="sample-workflows">Sample Workflows&lt;/h2>
&lt;h3 id="export-a-partstudio-to-stl">Export a PartStudio to STL&lt;/h3>
&lt;p>We will export the &lt;code>CRANK&lt;/code> PartStudio from &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22">this public document&lt;/a> to an STL file.&lt;/p>
&lt;ol>
&lt;li>Call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/exportPartStudioStl">Part Studios/exportPartStudioStl&lt;/a> endpoint on the document:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/partstudios/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22/stl?mode=text&amp;amp;grouping=true&amp;amp;scale=1&amp;amp;units=inch&amp;#39; \
-H &amp;#39;accept: */*&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Navigate to the request URL to download the resulting STL file:
&lt;pre tabindex="0">&lt;code>https://cad.onshape.com/api/v6/partstudios/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22/stl?mode=text&amp;amp;grouping=true&amp;amp;scale=1&amp;amp;units=inch
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open the &lt;em>CRANK.stl&lt;/em> file from wherever your downloads are saved.&lt;/li>
&lt;/ol>
&lt;h3 id="export-a-part-to-parasolid">Export a Part to Parasolid&lt;/h3>
&lt;p>We will export the &lt;code>FLYWHEEL&lt;/code> part from &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22">this public document&lt;/a> to an STL file.&lt;/p>
&lt;ol>
&lt;li>Call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/getPartsWMV">Part/getPartsWMV&lt;/a> endpoint on your document and get all the part IDs:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/parts/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62?elementId=6bed6b43463f6a46a37b4a22&amp;amp;withThumbnails=false&amp;amp;includePropertyDefaults=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Locate the part to export (hint: look for &lt;code>name = yourPartName&lt;/code>) in the response body. Get the part ID from the &lt;code>partId&lt;/code> field. In the example below, &lt;code>partId = JiD&lt;/code> for &lt;code>name=FLYWHEEL&lt;/code>:
&lt;pre tabindex="0">&lt;code>[
...
{
&amp;#34;name&amp;#34; : &amp;#34;FLYWHEEL&amp;#34;,
&amp;#34;state&amp;#34; : &amp;#34;IN_PROGRESS&amp;#34;,
&amp;#34;propertySourceTypes&amp;#34; : {
&amp;#34;57f3fb8efa3416c06701d60f&amp;#34; : 3,
&amp;#34;57f3fb8efa3416c06701d60d&amp;#34; : 3,
&amp;#34;57f3fb8efa3416c06701d61e&amp;#34; : 3,
&amp;#34;57f3fb8efa3416c06701d60e&amp;#34; : 3,
&amp;#34;57f3fb8efa3416c06701d60c&amp;#34; : 3
},
&amp;#34;defaultColorHash&amp;#34; : &amp;#34;FzHLKqGeuTBFjmY_2_0&amp;#34;,
&amp;#34;ordinal&amp;#34; : 1,
&amp;#34;isMesh&amp;#34; : false,
&amp;#34;description&amp;#34; : &amp;#34;Flywheel&amp;#34;,
&amp;#34;revision&amp;#34; : null,
&amp;#34;microversionId&amp;#34; : &amp;#34;bdb504d2d4c948493a87ccf3&amp;#34;,
&amp;#34;partNumber&amp;#34; : &amp;#34;PRT-10241&amp;#34;,
&amp;#34;elementId&amp;#34; : &amp;#34;6bed6b43463f6a46a37b4a22&amp;#34;,
&amp;#34;partId&amp;#34; : &amp;#34;JiD&amp;#34;,
&amp;#34;bodyType&amp;#34; : &amp;#34;solid&amp;#34;,
&amp;#34;customProperties&amp;#34; : {
&amp;#34;57f3fb8efa3416c06701d61e&amp;#34; : &amp;#34;false&amp;#34;
}
...
]
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/exportPS">Part/exportPS&lt;/a> endpoint on the FLYWHEEL part:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/parts/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22/partid/JiD/parasolid?version=0&amp;#39; \
-H &amp;#39;accept: application/octet-stream&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Navigate to the request URL to download the resulting file:
&lt;pre tabindex="0">&lt;code>https://cad.onshape.com/api/v6/parts/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22/partid/JiD/parasolid?version=0
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open the &lt;em>CRANK.x_t&lt;/em> file from your downloads. Note that the file is automatically named after the PartStudio to which the part belongs.&lt;/li>
&lt;/ol>
&lt;h3 id="export-a-partstudio-to-solidworks">Export a PartStudio to SOLIDWORKS&lt;/h3>
&lt;p>We will export the &lt;code>CRANK&lt;/code> PartStudio from &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22">this public document&lt;/a> to a SOLIDWORKS file.&lt;/p>
&lt;ol>
&lt;li>Validate that SOLIDWORKS is a supported export file type by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translation/getAllTranslatorFormats&lt;/a> and confirming that &lt;code>validDestinationFormat=true&lt;/code> for &lt;code>translatorName=SOLIDWORKS&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/translations/translationformats&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>[
{
&amp;#34;validSourceFormat&amp;#34;: true,
&amp;#34;validDestinationFormat&amp;#34;: true,
&amp;#34;name&amp;#34;: &amp;#34;SOLIDWORKS&amp;#34;,
&amp;#34;translatorName&amp;#34;: &amp;#34;solidworks&amp;#34;,
&amp;#34;couldBeAssembly&amp;#34;: true
}
]
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Initialize the export by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/createPartStudioTranslation">PartStudio/createPartStudioTranslation&lt;/a>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/partstudios/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22/translations&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;formatName&amp;#34;: &amp;#34;SOLIDWORKS&amp;#34;,
&amp;#34;storeInDocument&amp;#34;: false,
&amp;#34;translate&amp;#34;: true
}&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that the API takes a large JSON as part of the request body, in which you can specify options for the export.&lt;/li>
&lt;li>In this example, we&amp;rsquo;ve just shown a snippet of the entire JSON.&lt;/li>
&lt;li>A &lt;code>formatName&lt;/code> string must be specified that matches one of the valid formats you found in the last step. In this example, we set &lt;code>formatName&lt;/code> to &lt;code>SOLIDWORKS.&lt;/code>&lt;/li>
&lt;li>We want to export this to a new file, so we&amp;rsquo;ll leave &lt;code>storeInDocument&lt;/code> set to &lt;code>false&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Next, we poll the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/createPartStudioTranslation">PartStudio/createPartStudioTranslation&lt;/a> response until &lt;code>requestState&lt;/code> changes from &lt;code>ACTIVE&lt;/code> to &lt;code>DONE&lt;/code> or &lt;code>FAILED&lt;/code>.
&lt;pre tabindex="0">&lt;code>{
&amp;#34;documentId&amp;#34;: &amp;#34;e60c4803eaf2ac8be492c18e&amp;#34;,
&amp;#34;requestElementId&amp;#34;: &amp;#34;6bed6b43463f6a46a37b4a22&amp;#34;,
&amp;#34;requestState&amp;#34;: &amp;#34;DONE&amp;#34;,
&amp;#34;resultExternalDataIds&amp;#34;: &amp;#34;[{resultId}]&amp;#34;,
...
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Once &lt;code>requestState=DONE&lt;/code>, we can call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Document/downloadExternalData">Documents/downloadExternalData&lt;/a> to retrieve the exported result.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/documents/d/e60c4803eaf2ac8be492c18e/externaldata/{fid}&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Use the &lt;code>resultExternalDataIds&lt;/code> value from the translation response as the foreign ID (&lt;code>fid&lt;/code>).&lt;/li>
&lt;li>The new SOLIDWORKS file is returned as the response and will be downloaded to wherever the API call is made.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="export-an-assembly-to-step">Export an Assembly to STEP&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll export an assembly from &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/23a9385cd48c50167c32d6d1">this public document&lt;/a> to a STEP file.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Make a copy of &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/23a9385cd48c50167c32d6d1">this public document&lt;/a> so you can export the assembly to file in the document. Make a note of the documentId, workspaceId, and elementId of the assembly in your new document.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Validate that STEP is a supported export file type for assemblies by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translation/getAllTranslatorFormats&lt;/a> and confirming that &lt;code>validDestinationFormat=true&lt;/code> and &lt;code>couldBeAssembly=true&lt;/code> for &lt;code>translatorName=STEP&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/translations/translationformats&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>[
{
&amp;#34;validSourceFormat&amp;#34;: true,
&amp;#34;validDestinationFormat&amp;#34;: true,
&amp;#34;name&amp;#34;: &amp;#34;STEP&amp;#34;,
&amp;#34;translatorName&amp;#34;: &amp;#34;step&amp;#34;,
&amp;#34;couldBeAssembly&amp;#34;: true
},
...
]
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Initialize the export by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Assembly/translateFormat">Assembly/translateFormat&lt;/a>.&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/assemblies/d/{did}/w/{wid}/e/{eid}/translations&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;allowFaultyParts&amp;#34;: true,
&amp;#34;angularTolerance&amp;#34;: 0.001,
&amp;#34;formatName&amp;#34;: &amp;#34;STEP&amp;#34;,
&amp;#34;storeInDocument&amp;#34;: true
}&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that the API takes a large JSON as part of the request body, in which you can specify options for the export.&lt;/li>
&lt;li>In the example above, we&amp;rsquo;ve just shown a snippet of the entire JSON where we allow faulty parts to be exported and set the angular tolerance to 0.001.&lt;/li>
&lt;li>A &lt;code>formatName&lt;/code> string must be specified that matches one of the valid formats you found in the last step. In this example, we set &lt;code>formatName&lt;/code> to &lt;code>STEP.&lt;/code>&lt;/li>
&lt;li>Set &lt;code>storeInDocument&lt;/code> to &lt;code>true&lt;/code> to upload the STEP file as a blob element in your document.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Next, we poll the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Assembly/translateFormat">Assembly/translateFormat&lt;/a> response until &lt;code>requestState&lt;/code> changes from &lt;code>ACTIVE&lt;/code> to &lt;code>DONE&lt;/code> or &lt;code>FAILED&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;requestState&amp;#34; : &amp;#34;DONE&amp;#34;,
&amp;#34;requestElementId&amp;#34; : &amp;#34;23a9385cd48c50167c32d6d1&amp;#34;,
&amp;#34;documentId&amp;#34; : &amp;#34;e60c4803eaf2ac8be492c18e&amp;#34;,
&amp;#34;workspaceId&amp;#34; : &amp;#34;d2558da712764516cc9fec62&amp;#34;,
&amp;#34;resultElementIds&amp;#34; : [ &amp;#34;{resultEid}&amp;#34; ],
&amp;#34;name&amp;#34; : &amp;#34;PISTON&amp;#34;,
&amp;#34;id&amp;#34; : &amp;#34;{translationId}&amp;#34;,
&amp;#34;href&amp;#34; : &amp;#34;https://cad.onshape.com/api/v1/translations/{tid}&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Once &lt;code>requestState=DONE&lt;/code>, we make a note of the &lt;code>resultElementId&lt;/code> in the response. This is the elementId of the STEP blob.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now, we can call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/downloadFileWorkspace">BlobElement/downloadFileWorkspace&lt;/a> to retrieve the exported results.&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/blobelements/d/{did}/w/{wid}/e/{resultEid}&amp;#39; \
-H &amp;#39;accept: application/octet-stream&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Use the &lt;code>resultElementIds&lt;/code> value from the translation response as the element ID (&lt;code>{eid}&lt;/code>).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="import-a-parasolid-file-as-a-part">Import a Parasolid file as a Part&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll import the &lt;em>FLYWHEEL&lt;/em> part from the &lt;em>CRANK.x_t&lt;/em> file we created in the &lt;a href="#export-a-part-to-parasolid">Export a Part to Parasolid&lt;/a> example.&lt;/p>
&lt;ol>
&lt;li>Open or create a new Onshape document in which to import the Part. Make a note of the documentId and workspaceId of your document.&lt;/li>
&lt;li>Validate that Parasolid is a supported export file type for imports by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translation/getAllTranslatorFormats&lt;/a> and confirming that &lt;code>validSourceFormat=true&lt;/code> for &lt;code>translatorName=parasolid&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/translations/translationformats&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>[
{
&amp;#34;validSourceFormat&amp;#34;: true,
&amp;#34;validDestinationFormat&amp;#34;: true,
&amp;#34;name&amp;#34;: &amp;#34;PARASOLID&amp;#34;,
&amp;#34;translatorName&amp;#34;: &amp;#34;parasolid&amp;#34;,
&amp;#34;couldBeAssembly&amp;#34;: true
}
]s
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Initialize the import by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/createTranslation">Translation/createTranslation&lt;/a>. In this example, the filename is &lt;code>CRANK.x_t&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/translations/d/{did}/w/{wid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39;s \
-H &amp;#39;Content-Type: multipart/form-data&amp;#39; \
-F &amp;#39;formatName=&amp;#39; \
-F &amp;#39;flattenAssemblies=true&amp;#39; \
-F &amp;#39;translate=true&amp;#39; \
-F &amp;#39;file=@/pathToFile/CRANK.x_t&amp;#39; \
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Replace &lt;code>{did}&lt;/code> and &lt;code>{wid}&lt;/code> in the URL with the document and workspace IDs for the document you want to import the part to.&lt;/li>
&lt;li>Note that when using cURL, you must begin the path to the file with an &lt;code>@&lt;/code> symbol.&lt;/li>
&lt;li>Note that the API takes a large JSON as part of the request body, in which you can specify options for the import.&lt;/li>
&lt;li>When importing files, the API assumes we are importing to the &lt;code>ONSHAPE&lt;/code> file type. You can override this and import to a different file type using the &lt;code>formatName&lt;/code> field. In this case, we can leave the &lt;code>formatName&lt;/code> field blank to import to the &lt;code>ONSHAPE&lt;/code> file type.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Next, we poll the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getDocumentTranslations">Translation/getDocumentTranslations&lt;/a> response until &lt;code>requestState&lt;/code> changes from &lt;code>ACTIVE&lt;/code> to &lt;code>DONE&lt;/code> or &lt;code>FAILED&lt;/code>.
&lt;pre tabindex="0">&lt;code>{
&amp;#34;requestState&amp;#34; : &amp;#34;DONE&amp;#34;,
&amp;#34;documentId&amp;#34; : &amp;#34;{did}&amp;#34;,
&amp;#34;workspaceId&amp;#34; : &amp;#34;{wid}&amp;#34;,
&amp;#34;resultElementIds&amp;#34; : [ &amp;#34;{resultEid}&amp;#34; ],
&amp;#34;name&amp;#34; : &amp;#34;FLYWHEEL&amp;#34;,
&amp;#34;id&amp;#34; : &amp;#34;{id}&amp;#34;,
&amp;#34;href&amp;#34; : &amp;#34;https://cad.onshape.com/api/v1/translations/{tid}&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Once &lt;code>requestState=DONE&lt;/code>, we can view the imported file as a Part in our Onshape document. The &lt;code>FLYWHEEL&lt;/code> part appears in a new PartStudio named &lt;code>CRANK&lt;/code> in our document.&lt;/li>
&lt;/ol>
&lt;h2 id="additional-resources">Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/help/Content/translation.htm">Onshape Help: Translation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/help/Content/Plans/webhooks.htm">Onshape Help: Webhooks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/app-dev/webhook">API Guide: Webhook Notifications&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/api-intro/explorer">API Explorer&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Drawings</title><link>https://onshape-public.github.io/docs/api-adv/drawings/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/drawings/</guid><description>
&lt;p>This page describes the APIs Onshape provides for creating and manipulating Onshape drawings.&lt;/p>
&lt;blockquote>
&lt;p>📘 &lt;strong>Note&lt;/strong>&lt;/p>
&lt;p>This page provides sample code as curls. See the &lt;a href="https://curl.se/docs/">curl documentation&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>📘 &lt;strong>Note&lt;/strong>&lt;/p>
&lt;p>All Onshape API calls must be properly authenticated by replacing the &lt;code>CREDENTIALS&lt;/code> variable in the curls below. See the &lt;a href="https://onshape-public.github.io/docs/auth/apikeys">API Keys&lt;/a> page for instructions and the &lt;a href="https://onshape-public.github.io/docs/api-intro/quickstart">Quick Start&lt;/a> for an example. All applications submitted to the Onshape App Store &lt;em>must&lt;/em> authenticate with &lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth2&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>📘 &lt;strong>Note&lt;/strong>&lt;/p>
&lt;p>For Enterprise accounts, replace &lt;strong>&lt;font color="slate">cad&lt;/font>&lt;/strong> in all Onshape URLs with your company domain.
https://&lt;font color="slate">&lt;strong>cad&lt;/strong>&lt;/font>.onshape.com &amp;gt; https://&lt;font color="slate">&lt;strong>companyName&lt;/strong>&lt;/font>.onshape.com&lt;/p>
&lt;/blockquote>
&lt;h2 id="endpoints">Endpoints&lt;/h2>
&lt;p>To create drawing, Onshape allows you to send all drawing data points and information through the API as part of the request body JSON.&lt;/p>
&lt;p>The following endpoints are available:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingAppElement">Create a drawing&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;lt;JSON request body options from the BTDrawingParams schema&amp;gt;
}&amp;#39;
&lt;/code>&lt;/pre>Specify the document in which to create the drawing in the URL, and pass any additional options as part of the request body. You can provide a name for the drawing, manipulate the drawing graphics area, specify a part or template to create the drawing from, and more. See documentation for all available options in the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingAppElement">API Explorer&lt;/a>, and check out the &lt;a href="#sample-workflows">Sample Workflows&lt;/a> section below for some practical examples.&lt;p>&lt;/br>
&lt;img src="https://onshape-public.github.io/images/BTDrawingParamsSchema.png" alt="BTDrawingParams schema in the createDrawingAppElement endpoint">&lt;/br>&lt;/p>&lt;/li>
&lt;/ul>
&lt;h2 id="request-body-json">Request Body JSON&lt;/h2>
&lt;p>All drawing information can be sent to Onshape in the request body JSON for the &lt;strong>create&lt;/strong> endpoints. For instructions on viewing the documentation for this JSON, please see our &lt;a href="https://onshape-public.github.io/docs/api-intro/explorer#view-request-body-docs">API Explorer&lt;/a> page.&lt;/p>
&lt;h2 id="sample-workflows">Sample Workflows&lt;/h2>
&lt;h3 id="create-a-drawing-from-a-part">Create a drawing from a part&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll create a drawing from the &lt;strong>FLYWHEEL&lt;/strong> part in &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/v/405ba186c3a70e0227ab2941/e/6bed6b43463f6a46a37b4a22">this public document&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>Create or open an Onshape document in which to create your drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingAppElement">Drawings/createDrawingAppElement&lt;/a> call. Replace &lt;code>{did}&lt;/code> and &lt;code>{wid}&lt;/code> in the URL below with the document ID and workspace ID of your document (i.e., the &lt;em>target&lt;/em> document).
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add the request body information:
&lt;ul>
&lt;li>Add &lt;code>flywheelDrawing&lt;/code> as the &lt;code>drawingName&lt;/code> field.&lt;/li>
&lt;li>We must specify the &lt;em>source&lt;/em> document&amp;rsquo;s document and version IDs. Note that since our target document and source document are different, we use the &lt;code>external&lt;/code> document and version ID fields.&lt;/li>
&lt;li>We must also provide the ID of the part to create the drawing from, and the ID of the element (i.e., tab) in which the part lives.
&lt;/br>
(Hint: You can call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/getPartsWMVE">Part/getPartsWMVE&lt;/a> to get a list of part IDs in an element.)&lt;/br>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;drawingName&amp;#34;: &amp;#34;flywheelDrawing&amp;#34;,
&amp;#34;externalDocumentId&amp;#34;: &amp;#34;e60c4803eaf2ac8be492c18e&amp;#34;,
&amp;#34;externalDocumentVersionId&amp;#34;: &amp;#34;405ba186c3a70e0227ab2941&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;6bed6b43463f6a46a37b4a22&amp;#34;,
&amp;#34;partId&amp;#34;: &amp;#34;JiD&amp;#34;
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Call the endpoint and open your document. Confirm that you see the new &lt;code>flywheelDrawing&lt;/code> element containing the drawing:
&lt;/br>&lt;img src="https://onshape-public.github.io/images/flywheelDrawingExample1.png" alt="new drawing created from a part in an external document" width=650>&lt;/li>
&lt;/ol>
&lt;h3 id="create-a-drawing-from-a-template">Create a drawing from a template&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll create a drawing from the standard ANSI template in &lt;a href="https://cad.onshape.com/documents/cbe6e776694549b5ba1a3e88/w/24d08acf10234dbc8d3ab585/e/17eef7862b224f6fb12cbc46">this public document&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>Open any Onshape document in which to create your drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingAppElement">Drawings/createDrawingAppElement&lt;/a> call. Replace &lt;code>{did}&lt;/code> and &lt;code>{wid}&lt;/code> in the URL below with the document ID and workspace ID of your document (i.e., the &lt;em>target&lt;/em> document).
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add the request body information:
&lt;ul>
&lt;li>Add &lt;code>templateAnsiDrawing&lt;/code> as the &lt;code>drawingName&lt;/code> field.&lt;/li>
&lt;li>We must specify the &lt;em>source&lt;/em> document&amp;rsquo;s document ID and workspace ID.&lt;/li>
&lt;li>We must also provide the ID of the element (i.e., tab) in which the template lives.&lt;/li>
&lt;li>Note that we use the &lt;code>template&lt;/code> document, workspace, and element ID fields when referring to a specific template for drawing creation.
&lt;/br>
&lt;pre tabindex="0">&lt;code>curl &amp;#39;https://cad.onshape.com/api/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json, text/plain, */*&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8&amp;#39; \
-d &amp;#39;{
&amp;#34;drawingName&amp;#34;: &amp;#34;templateAnsiDrawing&amp;#34;,
&amp;#34;templateDocumentId&amp;#34;:&amp;#34;cbe6e776694549b5ba1a3e88&amp;#34;,
&amp;#34;templateWorkspaceId&amp;#34;:&amp;#34;24d08acf10234dbc8d3ab585&amp;#34;,
&amp;#34;templateElementId&amp;#34;:&amp;#34;17eef7862b224f6fb12cbc46&amp;#34;
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Call the endpoint and open your document. Confirm that you see the new &lt;code>templateAnsiDrawing&lt;/code> element containing the emtpy drawing template.&lt;/li>
&lt;/ol>
&lt;h3 id="create-a-drawing-in-a-custom-graphics-area">Create a drawing in a custom graphics area&lt;/h3>
&lt;ol>
&lt;li>Open any Onshape document in which to create your drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingAppElement">Drawings/createDrawingAppElement&lt;/a> call. Replace &lt;code>{did}&lt;/code> and &lt;code>{wid}&lt;/code> in the URL below with your document.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add information about the drawings area. In this example, we&amp;rsquo;ll add an additional column and row to the drawings area, a title block, and add a border around it.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;drawingName&amp;#34;: &amp;#34;customGraphicsArea&amp;#34;,
&amp;#34;border&amp;#34;: &amp;#34;true&amp;#34;,
&amp;#34;numberHorizontalZones&amp;#34;: &amp;#34;3&amp;#34;,
&amp;#34;numberVerticalZones&amp;#34;: &amp;#34;3&amp;#34;
&amp;#34;titleblock&amp;#34;: true
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Call the endpoint and open your document. Confirm that you see the new &lt;code>customGraphicsArea&lt;/code> element:
&lt;/br>&lt;img src="https://onshape-public.github.io/images/customDrawingArea.png" alt="new drawing created with border and extra column and row" width=550>&lt;/li>
&lt;/ol>
&lt;h2 id="additional-resources">Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/api-intro//#onshape-api-request">Guide to Onshape APIs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/api-intro/explorer">Guide to the API Explorer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing">API Explorer: Drawings&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/help/Content/drawings.htm">Onshape Help: Drawings&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Feature List API</title><link>https://onshape-public.github.io/docs/api-adv/featureaccess/</link><pubDate>Mon, 18 May 2020 20:37:28 -0400</pubDate><guid>https://onshape-public.github.io/docs/api-adv/featureaccess/</guid><description>
&lt;p>Onshape Part Studio Feature Access API&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>The Onshape Part Studio tab tracks edits in terms of a feature list. Creation and modification of geometry is
performed by manipulating that list. This document describes capabilities that are intended to allow partners
and customers to manipulate the feature list from software.&lt;/p>
&lt;p>The feature API comprises the following API methods:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>GET /api/partstudios/DWMVE/features - get feature list&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GET /api/partstudios/DWMVE/featurespecs - get feature specs&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POST /api/partstudios/DWE/features - add feature to feature list&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POST /api/partstudios/DWE/features/featureid/:fid - update an existing feature in feature list&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DELETE /api/partstudios/DWE/features/featureid/:fid - delete an existing feature from feature list&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POST /api/partstudios/DWE/features/features/updates - selectively update features in feature list&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POST /api/partstudios/DWE/features/rollback - move the rollback bar&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POST /api/partstudios/DWMVE/featurescript - evaluate featurescript&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>As well as related configuration API methods:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>GET /api/partstudios/DWMVE/configuration - get part studio configuration&lt;/p>
&lt;/li>
&lt;li>
&lt;p>POST /api/partstudios/DWE/configuration - update part studio configuration&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Note that the use of &amp;ldquo;DWE&amp;rdquo; occurrences within this document are a shorthand notation for “d/:did/w/:wid/e/:eid”
and DWMVE occurrences within this document are a shorthand notation for any of “d/:did/w/:wid/e/:eid”,
“d/:did/v/:vid/e/:eid”, “d/:did/m/:mid/e/:eid”. It is assumed that the reader is familiar with these URL path patterns
from the API Explorer documentation.&lt;/p>
&lt;h2 id="api-methods">API Methods&lt;/h2>
&lt;p>The methods described here are also documented at an overview level in the API Explorer within the Part Studios group.&lt;/p>
&lt;h3 id="get-feature-list">Get Feature List&lt;/h3>
&lt;pre>&lt;code>GET /api/partstudios/DWMVE/features - get feature list
&lt;/code>&lt;/pre>
&lt;p>If you have a part studio element, you can call the get feature list api to find the features that are instantiated within the part studio.
The return structure contains the following fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>features - A list of user-define features in the part studio.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>defaultFeatures - A list of the default feature (pre-defined) in the part studio&lt;/p>
&lt;/li>
&lt;li>
&lt;p>imports - A list of capabilities that may be referenced by the features. We currently only support a specific
predefined set of geometry capabilities.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>featureStates - A list of feature states, one per feature, which describe whether the feature is valid. If a feature
has been added to the feature list with an incorrect definition it remains in the feature list.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>isComplete - A boolean indicating whether the features represents the entire part studio (true) or is only a subset
(false). The result is a subset if the call to the api specifies a filter on the feature ids&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rollbackIndex - The ordinal position of the rollback bar w.r.t. the list of features. Onshape only executes features
that are prior to the rollback bar.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>serializationVersion - A string identifying the version of the structure serialization rules used to encode the
output. This is included so that if the output is fed back in and the software has changed incompatibilities can be
detected&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sourceMicroversion - The microversion identifier for the document that describes the state from which the result was
extracted. This is critical when attempting to use geometry ids that are included in the output, since the
interpretation of a geometry id is dependent on the document microversion.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>libraryVersion - An integer indicating the version number for FeatureScript in the Part Studio&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="get-feature-specs">Get Feature Specs&lt;/h3>
&lt;pre>&lt;code>GET /api/partstudios/DWMVE/featurespecs - get feature specs
&lt;/code>&lt;/pre>
&lt;p>Returns a list of feature specs that are available within the part studio. A feature spec provides a data description
of the interface to a feature. This can, in theory, allow an application to use introspection to allow dynamically
generated features. In practice, we expect that the application developer understands the features ahead of time and
might utilize the feature spec to understand the options available and the required format for feature
addition/modification.&lt;/p>
&lt;h3 id="add-feature">Add Feature&lt;/h3>
&lt;pre>&lt;code>POST /api/partstudios/DWE/features
&lt;/code>&lt;/pre>
&lt;p>A feature can be added to the feature list by calling the add feature API. The API accepts as input a JSON structure
containing the fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>feature - A single feature definition, in the same format that is output by the get feature list API, except that
there is no need to provide feature ids, node ids, or typeNames.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sourceMicroversion - The microversion of the document that is assumed. Any geometry ids included in the feature are
interpreted in the context of this microversion.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rejectMicroversionSkew (optional) - If set to true, the call will refuse to make the addition if the current
microversion for the document does not match the source Microversion. Otherwise, a best-effort attempt is made to
re-interpret the feature addition in the context of a newer document microversion.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The call returns a structure with the following fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>feature - The input feature, echoed back with id value assignments in place&lt;/p>
&lt;/li>
&lt;li>
&lt;p>featureState - The state of the feature&lt;/p>
&lt;/li>
&lt;li>
&lt;p>serializationVersion - As described previously&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sourceMicroversion - The microversion of the document in which the returned feature is defined&lt;/p>
&lt;/li>
&lt;li>
&lt;p>microversionSkew - If rejectMicroversionSkew was not set to true on input and the document microversion had changed
since the input sourceMicroversion, this is set to true to indicate that a re-interpretation was made.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>libraryVersion - An integer indicating the version number for FeatureScript in the Part Studio&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The feature is added immediately before the rollback bar. Any geometry ids specified in the feature must be valid at
that point in the feature tree. For example, if applying a fillet to an edge, that edge must exist in the feature tree.
Filleting the edge will normally make it invalid at future states of the feature tree, since the fillet feature
removes the edge.&lt;/p>
&lt;h3 id="update-feature">Update Feature&lt;/h3>
&lt;pre>&lt;code>POST /api/partstudios/DWE/features/featureid/:fid
&lt;/code>&lt;/pre>
&lt;p>An existing feature can be modified by calling the update feature API. This API accepts the same input body format and
returns the same output format as the Add Feature API. However, instead of adding a new feature prior to the rollback
bar location, it replaces an existing feature in the location of the existing feature.&lt;/p>
&lt;h3 id="update-features">Update Features&lt;/h3>
&lt;pre>&lt;code>POST /api/partstudios/DWE/features/updates
&lt;/code>&lt;/pre>
&lt;p>Multiple existing features can be modified by calling the update features API. This API accepts a list of features and to update, which must already exist in the part studio. This call does not fully re-define the features but instead, updates only the parameters supplied in the top-level feature structure, and optionally will update feature suppression attributes.&lt;/p>
&lt;p>Applications that need to update parameters for multiple features can typically achieve faster model rebuild time by updating multiple features in a single call. It also has the benefit that it allows features to be suppressed or unsuppressed without specifying parameters. This is particularly useful in the unsuppress case because parameters containing query values are not populated when reading from the feature list.&lt;/p>
&lt;h3 id="delete-feature">Delete Feature&lt;/h3>
&lt;pre>&lt;code>DELETE /api/partstudios/DWE/features/featureid/:fid
&lt;/code>&lt;/pre>
&lt;p>An existing feature can be removed from the feature list by calling the delete feature API. The API accepts only URL
path parameters and return only the following fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>serializationVersion - As described earlier&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sourceMicroversion - As described earlier&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="move-rollback-bar">Move Rollback Bar&lt;/h3>
&lt;pre>&lt;code>POST /api/partstudios/DWE/features/rollback
&lt;/code>&lt;/pre>
&lt;p>The rollback bar can be moved using this API. This is useful if a feature needs to be added at a location other than
the current rollback bar location. As input, it accepts the following fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>rollbackIndex - The index at which the rollback index should be placed. Features with entry index (0-based) higher
than or equal to this value are rolled back. The value must be in the range 0 to the number of entries in the feature
list&lt;/p>
&lt;/li>
&lt;li>
&lt;p>serializationVersion&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sourceMicroversion&lt;/p>
&lt;p>The result returned by the API includes the fields&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rollbackIndex - The rollback index in the updated state&lt;/p>
&lt;/li>
&lt;li>
&lt;p>serializationVersion - As described previously&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sourceMicroversion - As described previously&lt;/p>
&lt;/li>
&lt;li>
&lt;p>microversionSkew - As described previously&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="evaluate-featurescript">Evaluate FeatureScript&lt;/h3>
&lt;pre>&lt;code>POST api/partstudios/DWMVE/featurescript
&lt;/code>&lt;/pre>
&lt;p>This API allows the caller to execute a FeatureScript function to query information about the existing feature tree
that is not exposed through the other methods described here. As input, it accepts the following fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>script - The definition of a FeatureScript function that takes a Context argument and a map argument&lt;/p>
&lt;/li>
&lt;li>
&lt;p>queries - A list of key, value pairs, where the key is a FeatureScript identifier that will appear as a key in the
map supplied to the script function and the valid is a list of geometry Id strings, where the list is converted to
&amp;ldquo;query&amp;rdquo; form form use within the script function.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>See the example below to better understand this usage.&lt;/p>
&lt;h2 id="configuration-api-methods">Configuration API Methods&lt;/h2>
&lt;p>Part Studios may be unconfigured or configured. A configured part studio has a list of configuration parameters that
define the knobs that allow adjustment of the part studio part content. Configuration parameters are referred to as
&amp;ldquo;inputs&amp;rdquo; in the UI and may be one of Enum (or List), Boolean, Quantity or String. Each parameter includes a default
value setting that is used if the parameter is not otherwise set.&lt;/p>
&lt;p>Configured part studios also have a &amp;ldquo;current&amp;rdquo; configuration. This is a list of configuration parameter settings for
the current representation of the part studio. Alternate configurations of the part studio may be used concurrently,
but the current configuration defines the parts seen by the user within in the part studio.&lt;/p>
&lt;h3 id="get-configuration">Get Configuration&lt;/h3>
&lt;pre>&lt;code>GET /api/partstudios/DWMVE/configuration - get part studio configuration
&lt;/code>&lt;/pre>
&lt;p>This method reads the current configuration information for a Part Studio.
The return structure contains the following fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>configurationParameters - A list of the parameters that allow configuration of the part studio.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>currentConfiguration - A list of configuration parameter settings for the current representation of the part studio.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>serializationVersion - As described previously&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sourceMicroversion - As described previously&lt;/p>
&lt;/li>
&lt;li>
&lt;p>microversionSkew - As described previously&lt;/p>
&lt;/li>
&lt;li>
&lt;p>libraryVersion - As described previously&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="update-configuration">Update Configuration&lt;/h3>
&lt;pre>&lt;code>POST /api/partstudios/DWE/configuration - update part studio configuration
&lt;/code>&lt;/pre>
&lt;p>This method modifies the current configuration information for a Part Studio. When changing configuration parameters
it is important that parameterId values be maintained consistently across changes so that features that reference the
parameter do not get broken.
The API accepts as input a JSON structure containing the fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>configurationParameters - A list of the parameters that allow configuration of the part studio.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>currentConfiguration - A list of configuration parameter settings for the current representation of the part studio.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sourceMicroversion (optional) - The microversion of the document that is assumed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rejectMicroversionSkew (optional) - If set to true, the call will refuse to make the addition if the current
microversion for the document does not match the source Microversion.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The call returns a structure with the following fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>configurationParameters - A list of the parameters that allow configuration of the part studio.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>currentConfiguration - A list of configuration parameter settings for the current representation of the part studio.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>serializationVersion - As described previously&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sourceMicroversion - As described previously&lt;/p>
&lt;/li>
&lt;li>
&lt;p>microversionSkew - As described previously&lt;/p>
&lt;/li>
&lt;li>
&lt;p>libraryVersion - As described previously&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="api-usage-details">API Usage Details&lt;/h2>
&lt;p>The feature access and modification API in Onshape presents the internal form of feature definitions rather than
providing a translation layer between external form and internal form. We suggest that you familiarize yourself with
the formats involved by calling the Get Feature List API on existing part studios in order to understand the encoding
of features.&lt;/p>
&lt;p>Some important things to know about the JSON encoding are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Default values are omitted in the encoded output. For string fields the default value is &amp;ldquo;&amp;rdquo;, for boolean fields it
is false, and for numeric fields it is 0.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It uses a special tagging system in order to manage polymorphic data structures. Specifically, objects generally
are encoded by enclosing them within another object that declares the type information for the enclosed object.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>As an example of the type tagging mechanism, the GET features api might return a structure that looks like this:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;features&amp;quot;: [
{
&amp;quot;type&amp;quot;: 134,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
&amp;quot;featureId&amp;quot;: &amp;quot;FLqo5rpNof3IXgh_0&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Cube 1&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;1.0*in&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;,
&amp;quot;nodeId&amp;quot;: &amp;quot;TyUNOSxJ/f9z5t1T&amp;quot;
}
}
],
&amp;quot;nodeId&amp;quot;: &amp;quot;Mr60Xw6RGWdr0MfYV&amp;quot;
}
}
],
&amp;quot;imports&amp;quot;: [
{
&amp;quot;type&amp;quot;: 136,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMImport&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;path&amp;quot;: &amp;quot;onshape/std/geometry.fs&amp;quot;,
&amp;quot;version&amp;quot;: &amp;quot;268.0&amp;quot;,
&amp;quot;nodeId&amp;quot;: &amp;quot;M2/0RrOwK0Q+hWr9z&amp;quot;
}
}
],
&amp;quot;featureStates&amp;quot;: [
{
&amp;quot;key&amp;quot;: &amp;quot;FLqo5rpNof3IXgh_0&amp;quot;,
&amp;quot;value&amp;quot;: {
&amp;quot;type&amp;quot;: 1688,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFeatureState&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureStatus&amp;quot;: &amp;quot;OK&amp;quot;
}
}
}
],
&amp;quot;isComplete&amp;quot;: true,
&amp;quot;rollbackIndex&amp;quot;: 1,
&amp;quot;serializationVersion&amp;quot;: &amp;quot;1.1.6&amp;quot;,
&amp;quot;sourceMicroversion&amp;quot;: &amp;quot;b5b4834bd0674b4489b2b2b7&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>We see that in this case, the features array contains a single feature. The &amp;ldquo;type&amp;rdquo; and &amp;ldquo;typeName&amp;rdquo; fields describe the
type that is encoded within the &amp;ldquo;message&amp;rdquo; field. The &amp;ldquo;type&amp;rdquo; field provides definitive type information and is the type
number assigned to the structure. This type number is a permanent assignment. The &amp;ldquo;typeName&amp;rdquo; field is a convenience
field that is generated on output and ignored on input. It is intended to allow developers to associate meaningful
names with the type numbers.&lt;/p>
&lt;h3 id="general-features">General Features&lt;/h3>
&lt;p>In the example above, we see that the single feature is of type 134, which is the general feature type. A general
feature is an instantiation of the feature template that is describe by its corresponding feature spec. The BTMFeature
structure includes the following fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>featureType - Specifies the name of the feature spec that this instantiates&lt;/p>
&lt;/li>
&lt;li>
&lt;p>featureId - The internal identifier of the feature instance within this part studio. It is internally generated when
a feature is added.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>nodeId - An internal identifier for the feature node. This is also internally generated when the feature is added.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>name - The user visible name of the feature.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>namespace - An indicator of where the feature definition can be found. Features in the FeatureScript standard library
have a namespace value of &amp;quot;&amp;quot; whereas custom features identify the featurestudio that contains the definition. See
the Custom Features section below for more information.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>parameters - A list of parameter values for instantiation of the feature spec. Parameters are present for all
defined parameters, even if not used in a specific instantiation.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>All parameters have the following fields in common:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>parameterId - The name of the parameter spec that this applies to&lt;/p>
&lt;/li>
&lt;li>
&lt;p>nodeId - An internal identifier for the parameter node&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Parameters are typically one of the following types:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>BTMParameterQuantity (type 147) - specifies the value for a parameter defined in the feature spec as a
BTParameterSpecQuantity. It has the field:&lt;/p>
&lt;ul>
&lt;li>expression - An expression defining the value for the parameter.&lt;/li>
&lt;/ul>
&lt;p>An example of its usage is in the depth parameter in the extrude feature.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTMParameterQueryList (type 148) - specifies the value for a parameter defined in the feature spec as a
BTParameterSpecQuery. It has the field:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>queries - a list of query objects. The query objects could be either&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SBTMIndividualQuery objects (type 138) with the field:&lt;/p>
&lt;ul>
&lt;li>geometryIds - A list of geometry id values indentifying geometry that the feature applies to.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>SBTMIndividualSketchRegionQuery objects (type 140) with the field:&lt;/p>
&lt;ul>
&lt;li>featureId - The featureId of a sketch, with the query identifying all regions of the sketch&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>An example of its usage is in the entities parameter in the extrude feature.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTMParameterBoolean (type 144) - specifies the value for a parameter defined in the feature spec as a
BTParameterSpecBoolean. It has the field:&lt;/p>
&lt;ul>
&lt;li>value - The boolean value&lt;/li>
&lt;/ul>
&lt;p>An example of its usage is in the oppositeDirection parameter in the extrude feature.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTMParameterEnum (type 145) - specifies the value for a parameter defined in the feature spec as a
BTParameterSpecEnum. It has the fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>enumName - The name of the enum type that value is a member of&lt;/p>
&lt;/li>
&lt;li>
&lt;p>value - The name of the enum member&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>An example of its usage is in the bodyType parameter in the extrude feature.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Other parameter types exist for special cases and are not described here.&lt;/p>
&lt;h3 id="sketches">Sketches&lt;/h3>
&lt;p>Although most features are of type BTMFeature, there is also a BTMSketch type, which defines a sketch. The structure
of a sketch feature extends the BTMFeature and is relatively complex. It is suggested that the developer use a manually
edited sketch as a template for any sketches that they want to create programmatically. However, we will give a
high-level overview of the content for the sketch.&lt;/p>
&lt;p>Sketches have top-level fields:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>entities - the sketch geometry&lt;/p>
&lt;/li>
&lt;li>
&lt;p>constraints - the geometric relationship constraints and dimensions for the sketch&lt;/p>
&lt;/li>
&lt;li>
&lt;p>parameters - the sketch parameters. The only parameter is the parameter that identifies the sketch plane&lt;/p>
&lt;/li>
&lt;li>
&lt;p>featureType - set to &amp;ldquo;newSketch&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>featureId - the feature id&lt;/p>
&lt;/li>
&lt;li>
&lt;p>name - the sketch name&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The entities describe curves in terms of unbounded curves plus parameterized ranges. The geometry is always specified
in meters, regardless of the user’s choice of units. This geometry provides an initial guess for the sketch. The actual
solve state may differ, depending on whether the input constraints are satisfied.&lt;/p>
&lt;p>The constraints describe the requirements for sketch solution. These typically include constraints such as COINCIDENT,
HORIZONTAL, VERTICAL, PARALLEL, PERPENDICULAR, TANGENT that control geometric positioning and constraints such as
DISTANCE, RADIUS, DIAMETER, ANGLE that provide dimensional constraints. The constraints typically have one or two
objects that are constrained. These are referenced as localFirst for the first constrained entity, which is within
the sketch, and either localSecond or externalSection, depending on whether the second constrained entity is local
to the sketch. When entities are local to the sketch they are identitified by entity ids (long unique names) and when
external they are identified by a BTMIndiviualQuery.&lt;/p>
&lt;h2 id="feature-specs">Feature Specs&lt;/h2>
&lt;p>The feature spec for a feature provides a description of the inputs that it accepts. As an example, the feature spec
for a cube is shown below. It defines a single parameter named &amp;ldquo;sideLength&amp;rdquo;. The parameter spec includes a list of
ranges that specify valid ranges for the parameter value. Each range is specific to a particular unit and has a
defaultValue for that unit. Some parameters described by the feature spec may be optional. These normally have a
visibilityCondition that describes a logical test as to whether the parameter should be exposed for editing, based on
other parameter values. This provides a fairly reliable way to determine whether the parameter is required for a
particular feature instance, but it is safe to include default values for a feature even if it has a
visibilityCondition that indicates it is not visible.&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;type&amp;quot;: 129,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFeatureSpec&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
&amp;quot;featureTypeName&amp;quot;: &amp;quot;Cube&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 173,
&amp;quot;typeName&amp;quot;: &amp;quot;BTParameterSpecQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;quantityType&amp;quot;: &amp;quot;LENGTH&amp;quot;,
&amp;quot;ranges&amp;quot;: [
{
&amp;quot;type&amp;quot;: 181,
&amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;units&amp;quot;: &amp;quot;meter&amp;quot;,
&amp;quot;minValue&amp;quot;: 0.00001,
&amp;quot;maxValue&amp;quot;: 500,
&amp;quot;defaultValue&amp;quot;: 0.025,
&amp;quot;location&amp;quot;: {
&amp;quot;type&amp;quot;: 226,
&amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
&amp;quot;parseNodeId&amp;quot;: &amp;quot;PX2DsNKne8oO7ilPS&amp;quot;,
&amp;quot;languageVersion&amp;quot;: 268,
&amp;quot;nodeId&amp;quot;: &amp;quot;t8iQqgzAr/bCB2AZ&amp;quot;
}
}
}
},
{
&amp;quot;type&amp;quot;: 181,
&amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;units&amp;quot;: &amp;quot;centimeter&amp;quot;,
&amp;quot;minValue&amp;quot;: 0.001,
&amp;quot;maxValue&amp;quot;: 50000,
&amp;quot;defaultValue&amp;quot;: 2.5,
&amp;quot;location&amp;quot;: {
&amp;quot;type&amp;quot;: 226,
&amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
&amp;quot;parseNodeId&amp;quot;: &amp;quot;PKXPCya7aeoNITDFW&amp;quot;,
&amp;quot;languageVersion&amp;quot;: 268,
&amp;quot;nodeId&amp;quot;: &amp;quot;69sE3wOlv3FLiJxn&amp;quot;
}
}
}
},
{
&amp;quot;type&amp;quot;: 181,
&amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;units&amp;quot;: &amp;quot;millimeter&amp;quot;,
&amp;quot;minValue&amp;quot;: 0.01,
&amp;quot;maxValue&amp;quot;: 500000,
&amp;quot;defaultValue&amp;quot;: 25,
&amp;quot;location&amp;quot;: {
&amp;quot;type&amp;quot;: 226,
&amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
&amp;quot;parseNodeId&amp;quot;: &amp;quot;P8uyYds3YIBBpzlVN&amp;quot;,
&amp;quot;languageVersion&amp;quot;: 268,
&amp;quot;nodeId&amp;quot;: &amp;quot;8huKnMQb9mH9B+ef&amp;quot;
}
}
}
},
{
&amp;quot;type&amp;quot;: 181,
&amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;units&amp;quot;: &amp;quot;inch&amp;quot;,
&amp;quot;minValue&amp;quot;: 0.0003937007874015748,
&amp;quot;maxValue&amp;quot;: 19685.03937007874,
&amp;quot;defaultValue&amp;quot;: 1,
&amp;quot;location&amp;quot;: {
&amp;quot;type&amp;quot;: 226,
&amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
&amp;quot;parseNodeId&amp;quot;: &amp;quot;P4MfX8crrr+qc9vFS&amp;quot;,
&amp;quot;languageVersion&amp;quot;: 268,
&amp;quot;nodeId&amp;quot;: &amp;quot;BMU3SmZpR83uoKkd&amp;quot;
}
}
}
},
{
&amp;quot;type&amp;quot;: 181,
&amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;units&amp;quot;: &amp;quot;foot&amp;quot;,
&amp;quot;minValue&amp;quot;: 0.00003280839895013123,
&amp;quot;maxValue&amp;quot;: 1640.4199475065616,
&amp;quot;defaultValue&amp;quot;: 0.1,
&amp;quot;location&amp;quot;: {
&amp;quot;type&amp;quot;: 226,
&amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
&amp;quot;parseNodeId&amp;quot;: &amp;quot;P60BmwPj7LnRT0CTh&amp;quot;,
&amp;quot;languageVersion&amp;quot;: 268,
&amp;quot;nodeId&amp;quot;: &amp;quot;ywVSbQADr8dRv9+s&amp;quot;
}
}
}
},
{
&amp;quot;type&amp;quot;: 181,
&amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;units&amp;quot;: &amp;quot;yard&amp;quot;,
&amp;quot;minValue&amp;quot;: 0.000010936132983377077,
&amp;quot;maxValue&amp;quot;: 546.8066491688538,
&amp;quot;defaultValue&amp;quot;: 0.025,
&amp;quot;location&amp;quot;: {
&amp;quot;type&amp;quot;: 226,
&amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
&amp;quot;parseNodeId&amp;quot;: &amp;quot;PsE6sGD66MJVH2xQh&amp;quot;,
&amp;quot;languageVersion&amp;quot;: 268,
&amp;quot;nodeId&amp;quot;: &amp;quot;zAy0tYs5aC0clPLL&amp;quot;
}
}
}
}
],
&amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;,
&amp;quot;parameterName&amp;quot;: &amp;quot;Side length&amp;quot;,
&amp;quot;defaultValue&amp;quot;: {
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;units&amp;quot;: &amp;quot;meter&amp;quot;,
&amp;quot;value&amp;quot;: 0.025,
&amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;,
&amp;quot;nodeId&amp;quot;: &amp;quot;MC6QUqafapZdxtrDy&amp;quot;
}
}
}
}
]
}
}
&lt;/code>&lt;/pre>
&lt;p>Visibility conditions come in 3 variants:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>BTParameterVisibilityAlwaysHidden - Special-case parameters that are not directly shown to the user&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTParameterVisibilityLogical - Allows a logical condition to express when a parameter is visible. Allows nested
AND/OR/NOT expressions. The leaves of the expression tree are BTParameterVisibilityOnEqual&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTParameterVisibilityOnEqual - A simple test that a parameter has been assigned a specific value.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>A ParameterSpec can be one of numerous types. The most commonly used types are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>BTParameterSpecQuery - indicates that a query parameter should be supplied. The parameter spec has an allowable
number of selections and query filter that describes the allowable types that can be selected. See below for
additional information about query filters. An example usage is identifying the entities to chamfer in a &amp;ldquo;Chamfer&amp;rdquo;
feature.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTParameterSpecString - indicates that a string value should be supplied. For example, this is used for the name of
a variable in a &amp;ldquo;Variable&amp;rdquo; feature.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTParameterSpecQuantity - indicates that a number value should be supplied. In allows a quantityType, which describes
the type of number (length, angle, mass, count, etc.) and range limits on the value. An example usage is the depth
parameter in an &amp;ldquo;Extrude&amp;rdquo; feature.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTParameterSpecEnum - indicates that an enumerated value should should be provided. An example usage is the
operationType parameter in an &amp;ldquo;Extrude&amp;rdquo; feature.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTParameterSpecBoolean - indicates that a boolean true/false value should be specified. An example usage is the
offset parameter in the &amp;ldquo;Boolean&amp;rdquo; feature&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Some less commonly used parameter spec types are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>BTParameterSpecDerived - indicates that an import of a part from another Part Studio should be specified.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTParameterSpecLookupTablePath - provides a list of string values that can be chosen.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTParameterSpecForeignId - indicates that a &amp;ldquo;foreign id&amp;rdquo; value should be supplied. Foreign ids are currently not
generally accessible through the API, but identify a file that is made available throughout the system.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Parameter Spec query filters:&lt;/p>
&lt;p>Query Filters are even more numerous than parameter spec types.&lt;/p>
&lt;p>Basic selections:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>BTBodyTypeFilter - a specific body type (solid, sheet, wire, acorn, mate_connector)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTClosedCurveFilter - a curve that is either closed or not closed, depending on the isClosed value. (NO)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTConstructionObjectFilter - an object that either is or is not identified as &amp;ldquo;construction&amp;rdquo;, depending on the
isConstruction value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTEdgeTopologyFilter - an edge that either is or is not an internal edge, depending on the isInternalEdge value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTEntityTypeFilter - selects a specific type of entity based on the entityType value (vertex, edge, face, body,
degenerate_edge).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTFeatureTypeFilter - selects a specific type of feature base on the featureType value. (NO)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTGeometryFilter - select specific geometry types based on the geometryType value (line, circle, arg, plane,
cylinder,cone sphere torus, spline, ellipse).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTImageFilter - an entity that either is or is not an image, based on the isImage value. (no)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTMateConnectorFilter - a mate connector (NO)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTMateFilter - a mate object&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTPlaneOrientationFilter - excludes planes that are aligned with another plane, based on the normal value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTSketchObjectFilter - an object that either is or is not a sketch object, or is a sketch object created by the
user, depending on the objectType value (not_sketch_object, any_sketch_object, user_entity).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTTextObjectFilter - an object that either is or is not a text object, depending on the isText value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BTTextStrokeFilter - an object that either is or is not a text stroke, depending on the isStroke value.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Logical operations:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SBTAndFilter - combines query filters with &amp;ldquo;AND&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SBTOrFilter - combines query filters with &amp;ldquo;OR&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SBTNotFilter - negates query filters&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="feature-script-evaluation">Feature Script Evaluation&lt;/h2>
&lt;p>For certain tasks when creating and updating features, there may be information needed that is embedded within the
existing model. You can often access it by running a Feature Script function. Feature Script is a language that is
used to define the behavior of features.&lt;/p>
&lt;p>As an example of its usage, consider the case of using a face of an existing part to define new geometry. A plane is
defined in FeatureScript as an origin, x-direction vector and normal vector. These can be queried from FeatureScript
by using the evPlane function, but it wants a &amp;ldquo;query&amp;rdquo; that identifies the face. Here is an example of how you might do
this with a call to the Evaluate FeatureScript API call. Suppose you know that “JCC” is the geometry Id of a particular
face. The following body can be passed to the evaluate function.&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;script&amp;quot; : &amp;quot;function (context is Context, queries is map) {
return evPlane(context, {face:queries.id});
}&amp;quot;,
&amp;quot;queries&amp;quot; : [ { &amp;quot;key&amp;quot; : &amp;quot;id&amp;quot;, &amp;quot;value&amp;quot; : [ &amp;quot;JCC&amp;quot; ] } ]
}
&lt;/code>&lt;/pre>
&lt;p>Assuming that we have done everything right, the output of this might look something like this:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;result&amp;quot;: {
&amp;quot;type&amp;quot;: 2062,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueMap&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: [
{
&amp;quot;type&amp;quot;: 2077,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueMapEntry&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;key&amp;quot;: {
&amp;quot;type&amp;quot;: 1422,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueString&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: &amp;quot;normal&amp;quot;
}
},
&amp;quot;value&amp;quot;: {
&amp;quot;type&amp;quot;: 1499,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueArray&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: [
{
&amp;quot;type&amp;quot;: 772,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: -1
}
},
{
&amp;quot;type&amp;quot;: 772,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
&amp;quot;message&amp;quot;: {}
},
{
&amp;quot;type&amp;quot;: 772,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
&amp;quot;message&amp;quot;: {}
}
],
&amp;quot;typeTag&amp;quot;: &amp;quot;Vector&amp;quot;
}
}
}
},
{
&amp;quot;type&amp;quot;: 2077,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueMapEntry&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;key&amp;quot;: {
&amp;quot;type&amp;quot;: 1422,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueString&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: &amp;quot;origin&amp;quot;
}
},
&amp;quot;value&amp;quot;: {
&amp;quot;type&amp;quot;: 1499,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueArray&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: [
{
&amp;quot;type&amp;quot;: 1817,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueWithUnits&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;unitToPower&amp;quot;: [
{
&amp;quot;key&amp;quot;: &amp;quot;METER&amp;quot;,
&amp;quot;value&amp;quot;: 1
}
],
&amp;quot;typeTag&amp;quot;: &amp;quot;ValueWithUnits&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 1817,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueWithUnits&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: 0.012700000000000001,
&amp;quot;unitToPower&amp;quot;: [
{
&amp;quot;key&amp;quot;: &amp;quot;METER&amp;quot;,
&amp;quot;value&amp;quot;: 1
}
],
&amp;quot;typeTag&amp;quot;: &amp;quot;ValueWithUnits&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 1817,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueWithUnits&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: 0.012700000000000001,
&amp;quot;unitToPower&amp;quot;: [
{
&amp;quot;key&amp;quot;: &amp;quot;METER&amp;quot;,
&amp;quot;value&amp;quot;: 1
}
],
&amp;quot;typeTag&amp;quot;: &amp;quot;ValueWithUnits&amp;quot;
}
}
],
&amp;quot;typeTag&amp;quot;: &amp;quot;Vector&amp;quot;
}
}
}
},
{
&amp;quot;type&amp;quot;: 2077,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueMapEntry&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;key&amp;quot;: {
&amp;quot;type&amp;quot;: 1422,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueString&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: &amp;quot;x&amp;quot;
}
},
&amp;quot;value&amp;quot;: {
&amp;quot;type&amp;quot;: 1499,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueArray&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: [
{
&amp;quot;type&amp;quot;: 772,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
&amp;quot;message&amp;quot;: {}
},
{
&amp;quot;type&amp;quot;: 772,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: -1
}
},
{
&amp;quot;type&amp;quot;: 772,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
&amp;quot;message&amp;quot;: {}
}
],
&amp;quot;typeTag&amp;quot;: &amp;quot;Vector&amp;quot;
}
}
}
}
],
&amp;quot;typeTag&amp;quot;: &amp;quot;Plane&amp;quot;
}
},
&amp;quot;serializationVersion&amp;quot;: &amp;quot;1.1.6&amp;quot;,
&amp;quot;sourceMicroversion&amp;quot;: &amp;quot;27db48fb62bf6ac3b3ddaeaa&amp;quot;,
&amp;quot;libraryVersion&amp;quot;: 296
}
&lt;/code>&lt;/pre>
&lt;p>You can see from the output that the FeatureScript object representation uses the same typing rules that is used for
other output. In addition, FeatureScript objects may have a typeTag field associated with them, which indicates that
type-specific behavior should be applied. For instance, we see cases where a BTFSValueArray has a typeTag of &amp;ldquo;Vector&amp;rdquo;,
which allows the array to be accepted where a Vector is declared to be required.&lt;/p>
&lt;p>In order to help describe the interpretation of the structure above, here is a possible JSON representation of the
result from the output shown above, but with weaker typing:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;normal&amp;quot; : [ -1, 0, 0 ],
&amp;quot;origin&amp;quot; : { &amp;quot;value&amp;quot; : [ 0,
0.012700000000000001,
0.012700000000000001 ],
&amp;quot;units&amp;quot; : &amp;quot;meter&amp;quot; },
&amp;quot;x&amp;quot; : [ 0, -1, 0 ]
}
&lt;/code>&lt;/pre>
&lt;h2 id="custom-features">Custom Features&lt;/h2>
&lt;p>Custom features can be used in the feature apis with a little additional work. The key to using custom features is
that you must set a namespace field in the feature to tell Onshape where to look for the feature defintion.
The namespace field identifies a specific version of a feature studio. There are two standard forms for the namespace
field to consider:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Intra-workspace - In this case, the namespace field has the form
&amp;ldquo;e&lt;elementId>::m&lt;microversionId>&amp;rdquo;
where elementId is the elementId of the FeatureStudio that defines the feature and microversionId is the element
microversionId of the FeatureStudio. It is important to note that the element microversionId is different from the
document microversionId that is more typically encountered in API usage.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>External - When the definition to be used lives in a different document or in a specific version of the current
document it is referenced using the form
&amp;ldquo;d&lt;documentId>::v&lt;versionId>::e&lt;elementId>::m&lt;microversionId>&amp;rdquo;
This is the same form as for the intra-workspace case but with a documentId and versionId additionally specified.
The documentId is the id of the document containing the FeatureStudio and the versionId is the version of the
document to be used.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In both of the forms listed, it is necessary to determine the FeatureStudio element microversionId. One way to do this
is to call the GET /api/documents/DWMV/elements API, which reports the element microversion for each of the elements.
There is also a GET /api/featurestudios/DWMV/featurespecs API that provides a featurespec for each of the features
defined in the FeatureStudio. These featurespecs also have a namespace field that reports the namespace of the
FeatureStudio in the intra-workspace form.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>Below are several examples of how the API can be used in order to help you get started. The examples are quite trivial,
but should provide a basic demonstration of how to use these API methods. You should be able to execute the calls
against a part studio of yours and see results immediately. The calls could be executed using your preferred software
environment but interactive use in a REST-aware tool is likely the easiest way to try the examples.&lt;/p>
&lt;h3 id="example-1">Example 1&lt;/h3>
&lt;p>In our first example we will create a cube using the cube feature. The feature accepts only a single parameter, which
is the length of a side, and creates a cube with a corner at the origin and aligned with the three default planes. In
running the example, be sure to replace DWE with the the d/:did/w/:wid/e/:eid that is appropriate for the part studio
that you are operating against.&lt;/p>
&lt;p>POST /api/partstudios/DWE/features&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;feature&amp;quot; : {
&amp;quot;type&amp;quot;: 134,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Cube 1&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;1*in&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;
}
}
]
}
}
}
&lt;/code>&lt;/pre>
&lt;p>This returns output similar to the following:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;feature&amp;quot;: {
&amp;quot;type&amp;quot;: 134,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
&amp;quot;featureId&amp;quot;: &amp;quot;FuJu9c8PvO5oyTgaV&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Cube 1&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;1*in&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;,
&amp;quot;nodeId&amp;quot;: &amp;quot;M+iZRdlIZjnuz8DSS&amp;quot;
}
}
],
&amp;quot;nodeId&amp;quot;: &amp;quot;MUdiYYWlCa3arVy8q&amp;quot;
}
},
&amp;quot;featureState&amp;quot;: {
&amp;quot;type&amp;quot;: 1688,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFeatureState&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureStatus&amp;quot;: &amp;quot;OK&amp;quot;
}
},
&amp;quot;serializationVersion&amp;quot;: &amp;quot;1.1.6&amp;quot;,
&amp;quot;sourceMicroversion&amp;quot;: &amp;quot;2d31ccc170551a83995b89c8&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>The output returns us the feature definition that we provided as input with nodeIds and a featureId, plus information
telling us that that the feature executed correctly and information about the serialization version and microversion of
the document that resulted from our feature addition.&lt;/p>
&lt;h3 id="example-2">Example 2&lt;/h3>
&lt;p>In our second example we will create a cube where the sideLength parameter is defined by a variable and will then
update the variable to have a new value.&lt;/p>
&lt;p>Step 1) Create a variable - we create a feature of type assignVariable, which defines a variable and assigns it a
value. Here, the variables name is &amp;ldquo;size&amp;rdquo; and is displayed in the feature list as &amp;ldquo;Cube size&amp;rdquo;, and it is assigned to
have the value &amp;ldquo;1*in&amp;rdquo; with a variableType of ANY. Once again, be sure to replace DWE with the the d/:did/w/:wid/e/:eid
that is appropriate for the part studio that you are operating against.&lt;/p>
&lt;p>A variable can be created with variableType set to &amp;ldquo;ANY&amp;rdquo;, &amp;ldquo;LENGTH&amp;rdquo;, &amp;ldquo;ANGLE&amp;rdquo;, or &amp;ldquo;NUMBER&amp;rdquo;. This supplies a constraint
on the supplied value and each type requires setting the appropriate corresponding parameter, which would be anyValue,
lengthValue, angleValue or numberValue, respectively in addition to setting the value parameter. For the intended
purpose of using it as a length value it might be more appropriate to use &amp;ldquo;LENGTH&amp;rdquo; as the type, which would require
setting the lengthValue and value parameters to a length value. We have chosen to demonstrate the use of the &amp;ldquo;ANY&amp;rdquo;
type here because it can be used in a wider range of applications than a &amp;ldquo;LENGTH&amp;rdquo; variable, but does not provide the
value type checking that is provided by &amp;ldquo;LENGTH&amp;rdquo;, &amp;ldquo;ANGLE&amp;rdquo; or &amp;ldquo;NUMBER&amp;rdquo; types.&lt;/p>
&lt;p>POST /api/partstudios/DWE/features&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;feature&amp;quot; : {
&amp;quot;type&amp;quot;: 134,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureType&amp;quot;: &amp;quot;assignVariable&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Cube size&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 145,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;enumName&amp;quot;: &amp;quot;VariableType&amp;quot;,
&amp;quot;value&amp;quot;: &amp;quot;ANY&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;variableType&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 149,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterString&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: &amp;quot;size&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;name&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;1*in&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;anyValue&amp;quot;
}
}
]
}
}
}
&lt;/code>&lt;/pre>
&lt;p>The returned structure will include a featureId value for the variable. Make note of this value and we will use it
in step 3 below.&lt;/p>
&lt;ol start="2">
&lt;li>Create the cube feature, referencing the variable created&lt;/li>
&lt;/ol>
&lt;p>POST /api/partstudios/DWE/features&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;feature&amp;quot; : {
&amp;quot;type&amp;quot;: 134,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Cube 1&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;#size&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;
}
}
]
}
}
}
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>Update the variable to have a new value. We assume here that the featureId value returned in step 1 is
&amp;ldquo;FuJu9c8PvO5oyTgaV&amp;rdquo; and we will change the cube size from 1 inch to 10 centimeters.&lt;/li>
&lt;/ol>
&lt;p>POST /api/partstudios/DWE/features/featureid/FuJu9c8PvO5oyTgaV&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;feature&amp;quot; : {
&amp;quot;type&amp;quot;: 134,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureType&amp;quot;: &amp;quot;assignVariable&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Cube size&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 145,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;enumName&amp;quot;: &amp;quot;VariableType&amp;quot;,
&amp;quot;value&amp;quot;: &amp;quot;ANY&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;variableType&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 149,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterString&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: &amp;quot;size&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;name&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;10*cm&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;anyValue&amp;quot;
}
}
]
}
}
}
&lt;/code>&lt;/pre>
&lt;p>Take a look at the part studio and you will see the cube at its new size. You can edit the Cube size variable and
change the value again.&lt;/p>
&lt;h3 id="example-3">Example 3&lt;/h3>
&lt;p>In this example, we create a Sketch and extrude it. This demonstrates relationships betweeen features. First, the
sketch must be created on a plane, and for convenience, we will use the pre-defined front plane. Then, the extrude
needs to describe what is to be extruded, and for convenience, we use the BTMIndividualSketchRegionQuery.&lt;/p>
&lt;ol>
&lt;li>Determine the geometryId for the front plane.&lt;/li>
&lt;/ol>
&lt;p>POST /api/features/DWE/featurescript&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;script&amp;quot; :
&amp;quot;function(context is Context, queries)
{
return transientQueriesToStrings(evaluateQuery(context, qCreatedBy(makeId(\&amp;quot;Front\&amp;quot;), EntityType.FACE)));
}&amp;quot;,
&amp;quot;queries&amp;quot; : []
}
&lt;/code>&lt;/pre>
&lt;p>This will likely return something like this:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;result&amp;quot;: {
&amp;quot;type&amp;quot;: 1499,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueArray&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: [
{
&amp;quot;type&amp;quot;: 1422,
&amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueString&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: &amp;quot;JCC&amp;quot;
}
}
]
}
},
&amp;quot;serializationVersion&amp;quot;: &amp;quot;1.1.6&amp;quot;,
&amp;quot;sourceMicroversion&amp;quot;: &amp;quot;a53cabe7d36e30ee100b1d2a&amp;quot;,
&amp;quot;libraryVersion&amp;quot;: 298
}
&lt;/code>&lt;/pre>
&lt;p>This tells us that the geometryId for the face created by the &amp;ldquo;Front&amp;rdquo; feature is &amp;ldquo;JCC&amp;rdquo;.&lt;/p>
&lt;ol start="2">
&lt;li>Determine the geometryId for the Origin&lt;/li>
&lt;/ol>
&lt;p>POST /api/features/DWE/featurescript&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;script&amp;quot; :
&amp;quot;function(context is Context, queries)
{
return transientQueriesToStrings(evaluateQuery(context, qCreatedBy(makeId(\&amp;quot;Origin\&amp;quot;), EntityType.VERTEX)));
}&amp;quot;,
&amp;quot;queries&amp;quot; : []
}
&lt;/code>&lt;/pre>
&lt;p>This will report the geometryId for the origin (probably with the value &amp;ldquo;IB&amp;rdquo;) which we will use in the sketch.&lt;/p>
&lt;ol start="3">
&lt;li>Create the sketch. This will be just a circle on the front plane with its center at the origin and diameter of
1 inch.&lt;/li>
&lt;/ol>
&lt;p>POST /api/partstudios/DWE/features&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;feature&amp;quot; : {
&amp;quot;type&amp;quot;: 151,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMSketch&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;entities&amp;quot;: [
{
&amp;quot;type&amp;quot;: 4,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMSketchCurve&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;geometry&amp;quot;: {
&amp;quot;type&amp;quot;: 115,
&amp;quot;typeName&amp;quot;: &amp;quot;BTCurveGeometryCircle&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;radius&amp;quot;: 0.025400000000000002,
&amp;quot;xDir&amp;quot;: 1,
&amp;quot;yDir&amp;quot;: 0
}
},
&amp;quot;centerId&amp;quot;: &amp;quot;clAhDfZz-Dgmb-d0AJ-01Cv-JINJdWZLbVj1.center&amp;quot;,
&amp;quot;entityId&amp;quot;: &amp;quot;clAhDfZz-Dgmb-d0AJ-01Cv-JINJdWZLbVj1&amp;quot;
}
}
],
&amp;quot;constraints&amp;quot;: [
{
&amp;quot;type&amp;quot;: 2,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMSketchConstraint&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;constraintType&amp;quot;: &amp;quot;COINCIDENT&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 149,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterString&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: &amp;quot;clAhDfZz-Dgmb-d0AJ-01Cv-JINJdWZLbVj1.center&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;localFirst&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 148,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;queries&amp;quot;: [
{
&amp;quot;type&amp;quot;: 138,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMIndividualQuery&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;geometryIds&amp;quot;: [
&amp;quot;IB&amp;quot;
]
}
}
],
&amp;quot;parameterId&amp;quot;: &amp;quot;externalSecond&amp;quot;
}
}
],
&amp;quot;entityId&amp;quot;: &amp;quot;clAhDfZz-Dgmb-d0AJ-01Cv-JINJdWZLbVj1.centerSnap0&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 2,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMSketchConstraint&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;constraintType&amp;quot;: &amp;quot;DIAMETER&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 149,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterString&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: &amp;quot;clAhDfZz-Dgmb-d0AJ-01Cv-JINJdWZLbVj1&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;localFirst&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;1*in&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;length&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;0.637419526959446*rad&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;labelAngle&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;1.76201395706607&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;labelRatio&amp;quot;
}
}
],
&amp;quot;entityId&amp;quot;: &amp;quot;22b5a2c0-d3ea-4376-969d-8b81944035b2&amp;quot;
}
}
],
&amp;quot;featureType&amp;quot;: &amp;quot;newSketch&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Sketch 1&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 148,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;queries&amp;quot;: [
{
&amp;quot;type&amp;quot;: 138,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMIndividualQuery&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;geometryIds&amp;quot;: [
&amp;quot;JCC&amp;quot;
]
}
}
],
&amp;quot;parameterId&amp;quot;: &amp;quot;sketchPlane&amp;quot;
}
}
]
}
}
}
&lt;/code>&lt;/pre>
&lt;ol start="4">
&lt;li>Create the extrude. Here we assume that the previous call returned the sketch with a feature id of
&amp;ldquo;Fj1THqyY7u36ktGSr&amp;rdquo;. The extrude uses the BTMIndividualSketchRegionQuery, identifying the sketch feature in order to
indicate what is to be extruded. The depth of extrude is 1 inch.&lt;/li>
&lt;/ol>
&lt;p>POST /api/partstudios/DWE/features&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;feature&amp;quot; : {
&amp;quot;type&amp;quot;: 134,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureType&amp;quot;: &amp;quot;extrude&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Extrude 1&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 145,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;enumName&amp;quot;: &amp;quot;ToolBodyType&amp;quot;,
&amp;quot;value&amp;quot;: &amp;quot;SOLID&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;bodyType&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 145,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;enumName&amp;quot;: &amp;quot;NewBodyOperationType&amp;quot;,
&amp;quot;value&amp;quot;: &amp;quot;NEW&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;operationType&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 148,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;queries&amp;quot;: [
{
&amp;quot;type&amp;quot;: 140,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMIndividualSketchRegionQuery&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureId&amp;quot;: &amp;quot;Fj1THqyY7u36ktGSr&amp;quot;
}
}
],
&amp;quot;parameterId&amp;quot;: &amp;quot;entities&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 145,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;enumName&amp;quot;: &amp;quot;BoundingType&amp;quot;,
&amp;quot;value&amp;quot;: &amp;quot;BLIND&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;endBound&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;1*in&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;depth&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 148,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;surfaceEntities&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 144,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;oppositeDirection&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 148,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;endBoundEntityFace&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 148,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;endBoundEntityBody&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 144,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;hasDraft&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;3.0*deg&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;draftAngle&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 144,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;draftPullDirection&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 144,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;hasSecondDirection&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 145,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;enumName&amp;quot;: &amp;quot;SecondDirectionBoundingType&amp;quot;,
&amp;quot;value&amp;quot;: &amp;quot;BLIND&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionBound&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 144,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;value&amp;quot;: true,
&amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionOppositeDirection&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 148,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionBoundEntityFace&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 148,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionBoundEntityBody&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;1.0*in&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionDepth&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 144,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;hasSecondDirectionDraft&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;3.0*deg&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionDraftAngle&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 144,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionDraftPullDirection&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 144,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;defaultScope&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 148,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;parameterId&amp;quot;: &amp;quot;booleanScope&amp;quot;
}
}
]
}
}
}
&lt;/code>&lt;/pre>
&lt;p>We see here that there are a lot of parameters that have no values set in them. This is the way features are created
by the Onshape web client, buty the unneeded ones could be left out. All of the parameters after &amp;ldquo;depth&amp;rdquo; could be
omitted without changing the result. However, leaving out a required parameter will normally result in the result
reporting a featureStatus of &amp;ldquo;ERROR&amp;rdquo;.&lt;/p>
&lt;h3 id="example-4">Example 4&lt;/h3>
&lt;p>This example shows an example of configuring a Part Studio with a single Enum (List) input, and a cube feature
is created that has its size vary based on the configuration of the Part studio.&lt;/p>
&lt;ol>
&lt;li>Create a configuration for the part studio. This example assumes that you are starting with an unconfigured Part
Studio. The Enum input is named &amp;ldquo;Size&amp;rdquo;, which 2 options available, &amp;ldquo;Small&amp;rdquo; and &amp;ldquo;Large&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;p>POST /api/partstudios/DWE/configuration&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;configurationParameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 105,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMConfigurationParameterEnum&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;enumName&amp;quot;: &amp;quot;Size_conf&amp;quot;,
&amp;quot;options&amp;quot;: [
{
&amp;quot;type&amp;quot;: 592,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMEnumOption&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;option&amp;quot;: &amp;quot;Small&amp;quot;,
&amp;quot;optionName&amp;quot;: &amp;quot;Small&amp;quot;
}
},
{
&amp;quot;type&amp;quot;: 592,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMEnumOption&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;option&amp;quot;: &amp;quot;Large&amp;quot;,
&amp;quot;optionName&amp;quot;: &amp;quot;Large&amp;quot;
}
}
],
&amp;quot;namespace&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;defaultValue&amp;quot;: &amp;quot;Small&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;Size&amp;quot;,
&amp;quot;parameterName&amp;quot;: &amp;quot;Size&amp;quot;,
&amp;quot;hasUserCode&amp;quot;: false,
&amp;quot;nodeId&amp;quot;: &amp;quot;MgfIjLtd/DvuaT/P/&amp;quot;
}
}
],
&amp;quot;currentConfiguration&amp;quot;: [
{
&amp;quot;type&amp;quot;: 145,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;enumName&amp;quot;: &amp;quot;Size_conf&amp;quot;,
&amp;quot;value&amp;quot;: &amp;quot;Large&amp;quot;,
&amp;quot;namespace&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;parameterId&amp;quot;: &amp;quot;Size&amp;quot;
}
}
]
}
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>Create a cube feature in the Part Studio. When the Size configuration input is set to &amp;ldquo;Small&amp;rdquo;, the cube will
have a sideLength value of &amp;ldquo;1 in&amp;rdquo; and when the Size input is set to &amp;ldquo;Large&amp;rdquo; it will have a sideLength value of &amp;ldquo;2 in&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;p>POST /api/partstudios/DWE/features&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;feature&amp;quot;: {
&amp;quot;type&amp;quot;: 134,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Cube 1&amp;quot;,
&amp;quot;parameters&amp;quot;: [
{
&amp;quot;type&amp;quot;: 2222,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterConfigured&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;configurationParameterId&amp;quot;: &amp;quot;Size&amp;quot;,
&amp;quot;values&amp;quot;: [
{
&amp;quot;type&amp;quot;: 1923,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMConfiguredValueByEnum&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;namespace&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;enumName&amp;quot;: &amp;quot;Size_conf&amp;quot;,
&amp;quot;enumValue&amp;quot;: &amp;quot;Default&amp;quot;,
&amp;quot;value&amp;quot;: {
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;1 in&amp;quot;
}
}
}
},
{
&amp;quot;type&amp;quot;: 1923,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMConfiguredValueByEnum&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;namespace&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;enumName&amp;quot;: &amp;quot;Size_conf&amp;quot;,
&amp;quot;enumValue&amp;quot;: &amp;quot;Large&amp;quot;,
&amp;quot;value&amp;quot;: {
&amp;quot;type&amp;quot;: 147,
&amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
&amp;quot;message&amp;quot;: {
&amp;quot;expression&amp;quot;: &amp;quot;2 in&amp;quot;
}
}
}
}
],
&amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;
}
}
]
}
}
}
&lt;/code>&lt;/pre></description></item><item><title>Docs: Extensions</title><link>https://onshape-public.github.io/docs/app-dev/extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/app-dev/extensions/</guid><description>
&lt;p>This page provides information for some of the more common options for
embedding a third-party application into the Onshape interface. Onshape provides many options for embedding commands in various menus, fly-out panels, and elements. In this example, you will embed a custom web page inside a document’s right side fly-out panel. This interface will receive information from Onshape and push information from the panel back to Onshape, providing a complete, bi-directional integration scenario.&lt;/p>
&lt;p>Please see also:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/tutorials/createextension/">Create an Extension tutorial&lt;/a>: A step-by-step walkthrough of creating an extension.&lt;/li>
&lt;li>Create an Extension Video Sample:
&lt;a href="https://onshape.wistia.com/medias/0ivxxngkjz?embedType=async&amp;seo=false&amp;videoFoam=true&amp;videoWidth=640&amp;wvideo=0ivxxngkjz)">&lt;img src="https://onshape-public.github.io/images/ExtensionsVideoCard.png" style="width:5in" alt="OAuth app creation video"/>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="extension-types">Extension Types&lt;/h2>
&lt;p>We can classify extensions into two high-level types. The first type embeds a UI &lt;em>from&lt;/em> the application &lt;em>into&lt;/em> the Onshape UI. The embedded UI is an HTTPS page displayed in an iFrame in the Onshape UI. The UI is served from the application, and can choose to make API calls to Onshape for additional information. This is exactly like the traditional tab-based applications in Onshape, except that such extensions exist at different UI locations.&lt;/p>
&lt;p>The second type of extension embeds an action that calls a REST API &lt;em>exposed by&lt;/em> the application &lt;em>from&lt;/em> the Onshape UI (e.g., context menu actions and toolbar actions). These types of extensions rely on External OAuth information to authenticate and make a call where Onshape acts as a client, and the application acts as a server.&lt;/p>
&lt;h2 id="extension-attributes">Extension Attributes&lt;/h2>
&lt;p>Each extension exists at a specific place in the Onshape UI and works with a specific context or selection. The attributes of an extension are:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Name&lt;/strong>: This should be short and explicit. It will appear in the Onshape UI as a menu item, a toolbar tooltip, a collapsed panel icon tooltip, or a panel icon. It might be truncated in the UI if it is too long.&lt;/li>
&lt;li>&lt;strong>Description&lt;/strong>: This is where the developer can record a detailed description of the extension. It does not appear in the Onshape UI, but could appear in the grant process.&lt;/li>
&lt;li>&lt;strong>Location&lt;/strong>: This describes where the extension exists in the Onshape UI. Over time, this will cover various panels in the UI, context menus, toolbars, actions in dialogs, etc. You can see the list of currently supported locations &lt;a href="#supported-locations-and-contexts">here&lt;/a>.
&lt;ul>
&lt;li>Please note that you can create only one element tab extension per application.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Context&lt;/strong> (selection): Some locations will work in the context of a selection. Let’s say the application developer wants to show some information from a third-party system, pertinent only to parts (not assemblies or drawings). In this scenario, the developer would choose a location like ‘Document list info panel’, and the context as ‘Selected part’. If the user searches for something in the document list, some documents, Part Studios, parts, and Assemblies would be returned. This extension will show up in the Info panel only if the selected entity is a part. Using context enables application developers to control when the extension is displayed. Check the list of contexts available for different locations &lt;a href="#supported-locations-and-contexts">here&lt;/a>.&lt;/li>
&lt;li>&lt;strong>Action URL&lt;/strong>: Locations that embed a UI use the action URL to define the address of the page to display. The action URL is used to specify the REST endpoint if the location is an action (context menu, toolbar item, action in dialog etc.) and the action type is GET or POST. If the location is an action and the action is ‘Open in new window’, the action URL is the URL to open in the new window.&lt;br>
The action URL can be parameterized to pass information from Onshape to the application. The action URL replaces attributes in the format {$attribute} with the appropriate value. These attributes can be used to identify the selected entity and/or make calls back to Onshape via the API. The currently supported attributes are:
&lt;ul>
&lt;li>&lt;code>{$documentId}&lt;/code> - The Onshape ID for the current or selected document.&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersion}&lt;/code> - This will be either &lt;code>w&lt;/code> or &lt;code>v&lt;/code> for workspace or version respectively depending on current opened document state or selection.&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersionId}&lt;/code> - The Onshape ID for the current or selected workspace or version.&lt;/li>
&lt;li>&lt;code>{$workspaceId}&lt;/code> - DEPRECATED&lt;/li>
&lt;li>&lt;code>{$versionId}&lt;/code> - DEPRECATED&lt;/li>
&lt;li>&lt;code>{$elementId}&lt;/code> - The Onshape ID for the current or selected element (part studio, assembly, drawing).&lt;/li>
&lt;li>&lt;code>{$partId}&lt;/code> - The Onshape ID for the current or selected part.&lt;/li>
&lt;li>&lt;code>{$partNumber}&lt;/code> - The Part number property for the current or selected part, assembly or drawing.&lt;/li>
&lt;li>&lt;code>{$revision}&lt;/code> - The Revision property for the current or selected part, assembly or drawing.&lt;/li>
&lt;li>&lt;code>{$mimeType}&lt;/code> - The mime type if the current or selected element is a blob.&lt;/li>
&lt;li>&lt;code>{$featureId}&lt;/code> - In case of feature selected in the Feature list in a Part Studio.&lt;/li>
&lt;li>&lt;code>{$nodeId}&lt;/code> - In case of mate or mate feature selected in the Assembly list.&lt;/li>
&lt;li>&lt;code>{$occurrencePath}&lt;/code> - In case of part instances, mates, mate connectors and sub assemblies.&lt;/li>
&lt;li>&lt;code>{$configuration}&lt;/code> - In case of extensions inside the document, this attribute will be replaced by current element active configuration.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>The attributes can exist as path parameters or query parameters or attributes in the POST body. For example:&lt;/p>
&lt;pre tabindex="0">&lt;code>[https://whispering-sea-42267.herokuapp.com/oauthSignin?documentId={$documentId}&amp;amp;workspaceOrVersion={workspaceOrVersion}&amp;amp;workspaceOrVersionId={$workspaceOrVersionId}&amp;amp;elementId={$elementId}&amp;amp;partId={$partId}&amp;amp;server=https://cad.onshape.com&amp;amp;companyId=cad&amp;amp;userId=5f1eba76c14a434817d9c588&amp;amp;locale=en-US](https://whispering-sea-42267.herokuapp.com/oauthSignin?documentId=%7B$documentId%7D&amp;amp;workspaceId=%7B$workspaceId%7D&amp;amp;elementId=%7B$elementId%7D&amp;amp;partId=%7B$partId)
&lt;/code>&lt;/pre>&lt;p>or&lt;/p>
&lt;pre tabindex="0">&lt;code>[https://cad.onshape.com/api/partstudios/d/{$documentId}/{$workspaceOrVersion}/{$workspaceOrVersionId}/e/{$elementId}/stl?server=https://cad.onshape.com&amp;amp;companyId=cad&amp;amp;userId=5f1eba76c14a434817d9c588&amp;amp;locale=en-US](https://cad.onshape.com/api/partstudios/d/%7B$documentId%7D/w/%7B$workspaceId%7D/e/%7B$elementId%7D/stl)
&lt;/code>&lt;/pre>&lt;p>The attributes available for replacement differ by location and context selection. You can see the available attributes for each location &lt;a href="#supported-locations-and-contexts">here&lt;/a>.&lt;/p>
&lt;p>The &lt;strong>timeout&lt;/strong> for &lt;code>action_url&lt;/code> of type &lt;code>GET&lt;/code> or &lt;code>POST&lt;/code> is &lt;strong>180 seconds&lt;/strong>.&lt;/p>
&lt;ol start="6">
&lt;li>
&lt;p>&lt;strong>Action type&lt;/strong>: The action type is only applicable for locations that act as actions and not for locations that embed UIs. Check if action type is valid for a location &lt;a href="#supported-locations-and-contexts">here&lt;/a>. The supported action types are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>GET&lt;/code> - This makes a GET API call using the action URL. Parameter replacement is done on the action URL.&lt;/li>
&lt;li>&lt;code>POST&lt;/code> - This makes a POST API call using the action URL and the action body as the post body. Parameter replacement is done on both the action URL and the action body.&lt;/li>
&lt;li>&lt;code>Open in new window&lt;/code> - This opens the action URL in a new browser window. Parameter replacement is done on the action URL.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Action body&lt;/strong>: This is only applicable if the action type is POST. The action body is passed in a POST API call and must be in a valid json format.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Show response&lt;/strong>: This is only applicable if the action type is GET or POST. If this is checked, the UI will wait for a response and show the response in a dialog in the UI. The response must be in a valid json format.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Icon&lt;/strong>: The icon will be shown where the extension exists. This can be an icon in an Info panel, context menu action, toolbar button, action button in a dialog, or other supported locations.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="supported-locations-and-contexts">Supported Locations and Contexts&lt;/h2>
&lt;p>This is the list of supported locations, their valid contexts, and whether they support action types.&lt;/p>
&lt;h3 id="element-context-menu">Element context menu&lt;/h3>
&lt;p>This is the context menu for elements.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage04.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Part Studio&lt;/code>&lt;/li>
&lt;li>&lt;code>Assembly&lt;/code>&lt;/li>
&lt;li>&lt;code>Drawing&lt;/code>&lt;/li>
&lt;li>&lt;code>Blob element&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacements:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{$documentId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersion}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersionId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceId}&lt;/code> DEPRECATED&lt;/li>
&lt;li>&lt;code>{$versionId}&lt;/code> DEPRECATED&lt;/li>
&lt;li>&lt;code>{$elementId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$partNumber}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$mimeType}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$configuration}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>&lt;code>server&lt;/code>&lt;/li>
&lt;li>&lt;code>companyId&lt;/code> - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>&lt;code>userId&lt;/code>&lt;/li>
&lt;li>&lt;code>locale&lt;/code>&lt;/li>
&lt;li>&lt;code>clientId&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This location supports action types.&lt;/p>
&lt;h3 id="tree-context-menu">Tree context menu&lt;/h3>
&lt;p>This is the context menu for the part tree, assembly tree and feature tree in part studios.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage05.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Part&lt;/code>&lt;/li>
&lt;li>&lt;code>Sub assembly&lt;/code>&lt;/li>
&lt;li>&lt;code>Feature&lt;/code>&lt;/li>
&lt;li>&lt;code>Mate&lt;/code>&lt;/li>
&lt;li>&lt;code>Mate feature&lt;/code>&lt;/li>
&lt;li>&lt;code>Instance&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{$documentId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersion}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersionId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceId}&lt;/code> DEPRECATED&lt;/li>
&lt;li>&lt;code>{$versionId}&lt;/code> DEPRECATED&lt;/li>
&lt;li>&lt;code>{$elementId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$partNumber}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$revision}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$featureId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$nodeId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$occurrencePath}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$configuration}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>&lt;code>server&lt;/code>&lt;/li>
&lt;li>&lt;code>companyId&lt;/code> - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>&lt;code>userId&lt;/code>&lt;/li>
&lt;li>&lt;code>locale&lt;/code>&lt;/li>
&lt;li>&lt;code>clientId&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This location supports action types.&lt;/p>
&lt;h3 id="document-list-context-menu">Document list context menu&lt;/h3>
&lt;p>This the context menu available on items in the document list. This is normally documents but can be multiple types based on search results.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage06.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Part&lt;/code>&lt;/li>
&lt;li>&lt;code>Document&lt;/code>&lt;/li>
&lt;li>&lt;code>Part Studio&lt;/code>&lt;/li>
&lt;li>&lt;code>Assembly&lt;/code>&lt;/li>
&lt;li>&lt;code>Drawing&lt;/code>&lt;/li>
&lt;li>&lt;code>Blob element&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{$documentId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersion}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersionId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceId}&lt;/code> DEPRECATED&lt;/li>
&lt;li>&lt;code>{$versionId}&lt;/code> DEPRECATED&lt;/li>
&lt;li>&lt;code>{$elementId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$partNumber}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$revision}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$configuration}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>&lt;code>server&lt;/code>&lt;/li>
&lt;li>&lt;code>companyId&lt;/code> - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>&lt;code>userId&lt;/code>&lt;/li>
&lt;li>&lt;code>locale&lt;/code>&lt;/li>
&lt;li>&lt;code>clientId&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This location supports action types.&lt;/p>
&lt;h3 id="document-list-info-panel">Document list info panel&lt;/h3>
&lt;p>This is the Info panel to the right in the document list. The document list normally contains documents, but can contain other entities as the result of a search.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage07.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Part&lt;/code>&lt;/li>
&lt;li>&lt;code>Document&lt;/code>&lt;/li>
&lt;li>&lt;code>Part Studio&lt;/code>&lt;/li>
&lt;li>&lt;code>Assembly&lt;/code>&lt;/li>
&lt;li>&lt;code>Drawing&lt;/code>&lt;/li>
&lt;li>&lt;code>Blob element&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{$documentId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersion}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersionId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceId}&lt;/code> DEPRECATED&lt;/li>
&lt;li>&lt;code>{$versionId}&lt;/code> DEPRECATED&lt;/li>
&lt;li>&lt;code>{$elementId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$partId}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>&lt;code>server&lt;/code>&lt;/li>
&lt;li>&lt;code>companyId&lt;/code> - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>&lt;code>userId&lt;/code>&lt;/li>
&lt;li>&lt;code>locale&lt;/code>&lt;/li>
&lt;li>&lt;code>clientId&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This location does NOT support action types.&lt;/p>
&lt;h3 id="element-right-panel">Element right panel&lt;/h3>
&lt;p>This is the panel inside a document. It currently houses the BOM, configurations, etc. Applications can use this extension location to add items in this panel.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage08.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Part&lt;/code>&lt;/li>
&lt;li>&lt;code>Document&lt;/code>&lt;/li>
&lt;li>&lt;code>Part Studio&lt;/code>&lt;/li>
&lt;li>&lt;code>Assembly&lt;/code>&lt;/li>
&lt;li>&lt;code>Sub assembly&lt;/code>&lt;/li>
&lt;li>&lt;code>Feature&lt;/code>&lt;/li>
&lt;li>&lt;code>Mate&lt;/code>&lt;/li>
&lt;li>&lt;code>Mate feature&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{$documentId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersion}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceOrVersionId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$workspaceId}&lt;/code> DEPRECATED&lt;/li>
&lt;li>&lt;code>{$versionId}&lt;/code> DEPRECATED&lt;/li>
&lt;li>&lt;code>{$elementId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$partNumber}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$revision}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$featureId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$nodeId}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$occurrencePath}&lt;/code>&lt;/li>
&lt;li>&lt;code>{$configuration}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>&lt;code>server&lt;/code>&lt;/li>
&lt;li>&lt;code>companyId&lt;/code> - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>&lt;code>userId&lt;/code>&lt;/li>
&lt;li>&lt;code>locale&lt;/code>&lt;/li>
&lt;li>&lt;code>clientId&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This location does NOT support action types.&lt;/p>
&lt;h3 id="new-element-tab">New Element tab&lt;/h3>
&lt;p>This is the menu option for &lt;code>+ menu -&amp;gt; Add application&lt;/code> inside a document . After menu click, a new tab will be created with the action url associated with this extension.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage09.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>There are no supported contexts.&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>Parameter replacement not supported.&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>&lt;code>documentId&lt;/code>&lt;/li>
&lt;li>&lt;code>workspaceId&lt;/code>&lt;/li>
&lt;li>&lt;code>versionId&lt;/code>&lt;/li>
&lt;li>&lt;code>elementId&lt;/code>&lt;/li>
&lt;li>&lt;code>server&lt;/code>&lt;/li>
&lt;li>&lt;code>companyId&lt;/code> - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>&lt;code>userId&lt;/code>&lt;/li>
&lt;li>&lt;code>locale&lt;/code>&lt;/li>
&lt;li>&lt;code>clientId&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This location supports action types.&lt;/p>
&lt;h3 id="part-number-generator">Part number generator&lt;/h3>
&lt;p>This extension helps partners to embed their own custom part number generation scheme in Onshape. Each application can have only one extension of this type. Once defined, these extensions are listed as one of the part numbering schemes in the release management configuration in Company settings.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage10.png" alt="image alt text">&lt;/p>
&lt;p>In the above screen shot, ‘Part number generation scheme’ is the user-defined name of the extension.&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>There are no supported contexts.&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>Parameter replacement is not supported.&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>No default query parameters&lt;/li>
&lt;/ul>
&lt;p>Action URL defined by the user is assumed to be a POST API. This API should consume a predefined request body as shown below. This definition may have additional attributes in future.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;id&amp;#34;&lt;/span> : &amp;lt;internal part number id&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;documentId&amp;#34;&lt;/span> : &amp;lt;documentId&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;elementId&amp;#34;&lt;/span> : &amp;lt;elementId&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;workspaceId&amp;#34;&lt;/span> : &amp;lt;workspaceId&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;elementType&amp;#34;&lt;/span> : &amp;lt;elementType&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;partId&amp;#34;&lt;/span> : &amp;lt;partId&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;companyId&amp;#34;&lt;/span> : &amp;lt;companyId&amp;gt;, &lt;span style="color:#aaa;font-style:italic">// Id of the company that owns the document, else the text “cad”
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#a50">&amp;#34;partNumber&amp;#34;&lt;/span> : &amp;lt;current part number&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;configuration&amp;#34;&lt;/span> : &amp;lt;configuration string&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;categories&amp;#34;&lt;/span> : &amp;lt;array &lt;span style="color:#00a">of&lt;/span> category ids and names&amp;gt; &lt;span style="color:#aaa;font-style:italic">// [ { &amp;#34;id&amp;#34;: &amp;lt;String&amp;gt;, &amp;#34;name&amp;#34;: &amp;lt;string&amp;gt; } ]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: Categories are only passed from the Release dialog and properties dialogs for now. They are empty when part number generation is called from the BOM table or configuration table.&lt;/p>
&lt;p>Expected response sent to Onshape is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;id&amp;#34;&lt;/span> : &amp;lt;internal part number id&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;documentId&amp;#34;&lt;/span> : &amp;lt;documentId&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;elementId&amp;#34;&lt;/span> : &amp;lt;elementId&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;workspaceId&amp;#34;&lt;/span> : &amp;lt;workspaceId&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;elementType&amp;#34;&lt;/span> : &amp;lt;elementType&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;partId&amp;#34;&lt;/span> : &amp;lt;partId&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;partNumber&amp;#34;&lt;/span> : &amp;lt;next part number generated by third party numbering scheme&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Third-party applications can simply fill the &lt;code>&amp;quot;partNumber&amp;quot;&lt;/code> attribute with the part number generated by the custom numbering scheme and send it as a response. However, the response should at least contain &lt;code>&amp;quot;id&amp;quot;&lt;/code> and &lt;code>&amp;quot;partNumber&amp;quot;&lt;/code> as highlighted above; other attributes are optional.&lt;/p>
&lt;p>Custom numbering schemes for part generation, once set in the Release management page, can be invoked from all the places where we set part numbers, including the Release candidate dialog shown below:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage11.png" alt="image alt text">&lt;/p>
&lt;h2 id="sample-code">Sample code&lt;/h2>
&lt;p>We have provided a sample application that supports the features described in this document.&lt;/p>
&lt;p>The source code for this &lt;code>Inventory management&lt;/code> application can be found &lt;a href="https://github.com/onshape-public/inventory-oauth2-app">in our public GitHub repository&lt;/a>.&lt;/p>
&lt;p>The instructions to install and the application are available in the &lt;code>README.md&lt;/code> file in the repository.&lt;/p>
&lt;p>The application is built on the Passport node module. It is based on this &lt;a href="http://scottksmith.com/blog/2014/05/02/building-restful-apis-with-node/">article&lt;/a>. Please read the article before proceeding with this section.&lt;/p>
&lt;p>Some structural information about the application:&lt;/p>
&lt;ul>
&lt;li>The dependencies are defined in &lt;code>package.json&lt;/code>&lt;/li>
&lt;li>The routing for inbound calls is defined in &lt;code>server.js&lt;/code>. This includes routing for OAuth2 calls as well as calls for the rest APIs we expose that Onshape can call via the extensions.&lt;/li>
&lt;li>The OAuth2 calls are routed to &lt;code>controllers/oauth2.js&lt;/code>. These include calls to authenticate as calls to get the bearer token.&lt;/li>
&lt;li>&lt;code>controllers/oauth2.js&lt;/code> uses &lt;code>controllers/auth.js&lt;/code> to interact with Passport to manage the authentication and storage.&lt;/li>
&lt;li>Other API calls to get part number, etc, route to the appropriate controller in the controllers directory.&lt;/li>
&lt;li>The controllers use the model defined in the model directory.&lt;/li>
&lt;/ul>
&lt;p>The application is defined in the Developer Portal with extensions that use the exposed APIs.&lt;/p>
&lt;p>The following screenshots define the base configuration of the application and some of the sample extensions.&lt;/p></description></item><item><title>Docs: Client Messaging</title><link>https://onshape-public.github.io/docs/app-dev/clientmessaging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/app-dev/clientmessaging/</guid><description>
&lt;p>Application extensions and the Onshape JavaScript web client need to communicate directly, calling across the iframe containing the application extension using post message.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/javascriptpostmessageimage00.png" alt="image alt text">&lt;/p>
&lt;p>Onshape Client Messaging examples can be split into those that are initiated from the &lt;em>application extension&lt;/em> and those that are initiated from the &lt;em>Onshape client&lt;/em>.&lt;/p>
&lt;h2 id="messages-from-the-extension">Messages from the Extension&lt;/h2>
&lt;p>These Client Messaging examples can be initiated from the application extension:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Click/close flyouts events&lt;/strong>: Notify the Onshape client that the user has clicked in the application extension, which should cause Onshape flyouts (versions, history, uploads, etc.) and dropdown menus (profile dropdown menu, document menu) to close. Without this, flyouts and menus might remain open over the application extension.&lt;/li>
&lt;li>&lt;strong>Shortcut keyboard events&lt;/strong>: Shortcut keys (such as &lt;code>?&lt;/code>, which opens the Onshape Help dialog), can be handled by the application extension by posting a message to the Onshape client to open the dialog.&lt;/li>
&lt;li>&lt;strong>keepAlive&lt;/strong>: Notify the Onshape client that the user is actively working in the application extension, which triggers the Onshape client to send a message to the server to keep the browser session alive. Without this, the Onshape browser session will timeout and ask the user to sign in again.&lt;/li>
&lt;li>&lt;strong>Standard Onshape dialogs&lt;/strong>: Request from the application extension to the Onshape client to open one of the Onshape standard dialogs and send the user’s choices back to the application extension. For example, if the application extension needs the user to choose a part or assembly to be operated on, the application extension can post a message to the Onshape client requesting that dialog be opened and the selected part or assembly information sent back to the application extension.&lt;/li>
&lt;li>&lt;strong>UI customization&lt;/strong>&amp;quot;: Request from the application extension to the Onshape client to customize the Onshape UI (e.g., add commands to menus, add buttons to the toolbars, etc). When these commands or toolbar buttons are clicked, the Onshape client posts a message to the application extension with the available context.
&lt;ul>
&lt;li>&lt;strong>Note&lt;/strong>: This is limited to cases where the application extension is made active by the user; application extensions are not automatically loaded when a document is opened. Most UI customizations should be done when you register the application with Onshape, as those change the Onshape client automatically without needing to load the application extension first.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Content/material insertion&lt;/strong>: Request from the application extension to insert content into the Onshape document. For example, insert a part into a new or existing Part Studio, apply a material to a part, add a material to a material library, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="messages-from-onshape">Messages from Onshape&lt;/h2>
&lt;p>The following examples can be initiated from the Onshape client:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>User action notification&lt;/strong>: The Onshape client can notify an application extension when various user actions occur. For example, the Onshape client might notify when the user has made the application extension active or inactive (when the user clicks on document tabs). When an application extension is made inactive, it is moved off the edges of the browser, so it cannot be seen, but is still active, preserving its state.&lt;/li>
&lt;li>&lt;strong>Printing&lt;/strong>: The Onshape client can notify an application extension when the user has chosen the &lt;strong>Print&lt;/strong> command from the main Onshape document menu, enabling the application extension to perform a print operation.&lt;/li>
&lt;/ul>
&lt;h2 id="security-considerations">Security Considerations&lt;/h2>
&lt;p>To ensure security, an application extension must:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Parse for document, workspace, and element IDs&lt;/strong>: Parse for the &lt;code>documentId&lt;/code>, &lt;code>workspaceId&lt;/code>, and &lt;code>elementId&lt;/code> that were passed as query parameters within the application extension’s iframe &lt;code>src&lt;/code> URL. You must post these back in each &lt;code>POST&lt;/code> message.&lt;/li>
&lt;li>&lt;strong>Parse for the server&lt;/strong>: Parse for the &lt;code>server&lt;/code> that was passed as a query parameter within the application extension’s iframe &lt;code>src&lt;/code> URL. You must use this to validate messages received.
&lt;ul>
&lt;li>If the application extension uses a JavaScript library or framework (e.g., BackboneJS or AngularJS), it can parse the query parameters and maintain state in other ways.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Not redirect to another base URL&lt;/strong>: The browser tells the Onshape client the origin base URL from which a &lt;code>POST&lt;/code> message is received. The Onshape client ignores messages posted from an origin URL that doesn’t match the original iframe &lt;code>src&lt;/code> URL. It is &lt;em>extremely important&lt;/em> to the security of your application that you verify that the origin of all messages you receive is the same as the original server query parameter in the iframe &lt;code>src&lt;/code> (i.e., &lt;code>if (server === e.origin)&lt;/code>). In production operation especially, the message IS NOT SAFE if the message origin does not match the iframe &lt;code>src&lt;/code> server query parameter. Application extensions should not redirect to another base URL after the iframe has been opened, or the messages will be ignored.&lt;/li>
&lt;li>&lt;strong>Post a message on startup&lt;/strong>: Onshape will not post messages until a newly started application extension has first posted a valid message to Onshape. This constraint is in effect anytime an application extension is (re)started and exists to avoid posting messages to application extensions that are not ready to handle them, are not fully loaded, etc. After your application extension is fully loaded and ready to receive messages, post a message to Onshape. A &lt;code>keepAlive&lt;/code> message is a great first message to send to Onshape. Once Onshape receives a valid message, Onshape will start posting messages to the application extension. If the application extension later sends an invalid message Onshape will stop sending messages until a valid message is posted to Onshape.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>POST&lt;/code> messages submitted by application extensions to Onshape will be ignored if any of the following are true:&lt;/p>
&lt;ul>
&lt;li>The documentId, workspaceId, or elementId are missing or not valid.&lt;/li>
&lt;li>The message name is missing or not recognized.&lt;/li>
&lt;li>The origin of the &lt;code>POST&lt;/code> message does not match the original iframe &lt;code>src&lt;/code> URL.&lt;/li>
&lt;/ul>
&lt;h2 id="element-tab">Element Tab&lt;/h2>
&lt;p>Messages may be sent and received by element tab application extensions.&lt;/p>
&lt;p>The following messages can be &lt;strong>sent&lt;/strong> by Element tab application extensions:&lt;/p>
&lt;table>
&lt;tr>
&lt;td>messageName
(case sensitive)&lt;/td>
&lt;td>other message properties?&lt;/td>
&lt;td>comment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>applicationInit&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>notifyWhenSaveRequired: whether Onshape should send a notification to save pending changes during certain operations
(default is false)
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Send once on application startup.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>closeFlyoutsAndMenus&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send when a mouse click or other event happens in the application extension. Closes Onshape flyouts and dropdown menus.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>closeSelectItemDialog&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Closes the select item dialog.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>connectionLost&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Displays the standard Onshape connection lost message in a message bubble, forcing the user to either reload the document or return to the documents page.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>errorReload&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>message: your message
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Similar to the connectionLost message, but enables an application to specify the first part of the message, which will be used instead of "Onshape is not connected." The user must reload the document or return to the documents page.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>finishedSaving&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>messageId: the id sent in the corresponding 'saveChanges' message
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Response to a 'saveChanges' message sent from Onshape. Should be sent after application has cleaned up any pending edits.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>keepAlive&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send periodically while while the user is actively working to avoid the session from timing out.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>saveAVersion&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send when the user types “Shift-S” in the application extension, the keyboard shortcut for save a version.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>showKeyboardShortcutsHelp&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send when the user types “?” (Shift-? on most keyboards) in the application extension, the keyboard shortcut for the keyboard shortcuts help dialog.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>showMessageBubble&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>message: your message
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Send when you want to show a string in the blue message bubble at the top of the Onshape app.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>startLoadingSpinner&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>message: your message
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Send to start a large spinner in the middle of the browser window with your message underneath it.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stopLoadingSpinner&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send to stop the large spinner.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>startWorkingSpinner&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send to start a small spinner in the middle bottom of the browser window.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stopWorkingSpinner&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send to stop the small spinner.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>openSelectItemDialog&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>dialogTitle: your dialog title
(default is no title),
selectBlobs: true or false
(default is false),
selectParts: true or false
(default is false),
selectPartStudios: true or false
(default is false),
selectAssemblies: true or false
(default is false),
selectMultiple: true or false
(default is false),
selectBlobMimeTypes: ‘comma-delimited string of blob mime types to show in dialog (e.g. “application/dwt,application/dwg”)’
(default is an empty string)
showBrowseDocuments: true or false - controls whether ‘Other documents’ choice should be available
(default is true)
showStandardContent: true or false - controls whether ‘Standard content’ choice should be available
(default is false)
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Send when your application wants to open a dialog in which the user will select one or multiple items - blobs, parts, part studios or assemblies.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>requestCameraProperties&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>graphicsElementId: string , Element ID of the part studio or assembly
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>
Send to request camera properties of a specific part studio or assembly element. Note: The element should have been opened at least once in the current session. The messageName of the response is cameraProperties
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;p>The following messages can be &lt;strong>received&lt;/strong> by Element tab application extensions:&lt;/p>
&lt;table>
&lt;tr>
&lt;td>messageName
(case sensitive)&lt;/td>
&lt;td>other message properties?&lt;/td>
&lt;td>comment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>show&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Sent when an element tab application extension is shown (made active) within the Onshape client. This message is NOT sent when the element tab application extension is created.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hide&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Sent when an element tab application extension is made inactive within the Onshape client. This message is NOT sent when an element tab application extension is deleted.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>itemSelectedInSelectItemDialog&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>documentId: id of selected item’s document,
workspaceId: id of selected item’s workspace, empty if versionId not empty,
versionId: id of selected item’s version, empty if workspaceId not empty,
elementId: id of element selected or containing the selected part,
elementName: name of element selected or containing the selected part,
elementType: type of element selected or containing the selected part - ‘partstudio’, ‘assembly’ or ‘blob’,
elementMicroversionId: microversion id of the element,
itemType: type of item selected: ‘part’,‘partStudio’ or ‘assembly’,
partName: name of part selected, empty if itemType is not ‘part’,
idTag: id of part, empty if no part selected
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Sent when the user selects an item (blob, part, part studio or assembly) in the select item dialog that was opened due to an openSelectItemDialog message sent earlier.
When a part is not selected, the partXxx message properties will be empty strings.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>print&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Sent when the user chooses the Print command while the application is the active element. The application can choose to handle this as either a print or an export to a PDF or other format.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>selectItemDialogClosed&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Sent when the select item dialog closes, either because the user selected an item and selectMultiple is false, or the user changed the active element or the user closed the dialog with the "X" button.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>startFirstViewCommand&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>documentId: id of selected item’s document,
workspaceId: id of selected item’s workspace, empty if versionId not empty,
versionId: id of selected item’s version, empty if workspaceId not empty,
elementId: id of element selected or containing the selected part,
elementName: name of element selected or containing the selected part,
elementType: type of element selected or containing the selected part - ‘partstudio’, ‘assembly’ or ‘blob’,
elementMicroversionId: microversion id of the element,
itemType: type of item selected: ‘part’,‘partstudio’ or ‘assembly’,
partName: name of part selected, empty if itemType is not ‘part’,
idTag: id of part
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Sent to a drawings application extension when the drawing is created with zero views.
&lt;p>If other types of applications need a message posted to them with creation context, contact Onshape and we can discuss using this sort of message for your application also.&lt;/td>&lt;/p>
&lt;/tr>
&lt;tr>
&lt;td>export&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>fileExtension: the file extension of the export type the user chose - “.dwg”, “.dxf” are the types currently supported.
baseFileName: the base portion of the expected output file. This is currently set to “&amp;lt;document name&amp;gt; - &amp;lt;element name&amp;gt;”
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Sent when the user chooses a command to export the contents of the application to a file.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cameraProperties&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>graphicsElementId: string , Element ID of the part studio or assembly
isValid: boolean, Indicates if the properties are valid or not. false if element ID is invalid or element has not been open in the current session
projectionType: string, Denotes the projection method. Values are ‘orthographic’, ‘perspective’ . Empty string ‘’ if isValid is false
viewMatrix: 16 element numeric matrix with elements at index 13, 14, 15 corresponding to position of the camera
projectionMatrix: 16 element numeric matrix
verticalFieldOfView: number, 0 in case of orthographic projection
viewportHeight: number, eight of the viewport
viewportWidth: number, width of the viewport
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Sent when application posts a requestCameraProperties message&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>takeFocus&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Sent when the Onshape client sets focus on the content window of the element tab application extension.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>saveChanges&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>messageId: a unique identifier for this message. Should be passed back in the 'finishedSaving' message.
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Sent if the application specified 'notifyWhenSaveRequired' in the 'applicationInit' message. Indicates that the application should cleanup any pending edits before an Onshape process continues (i.e. version save).&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h2 id="element-right-panel">Element Right Panel&lt;/h2>
&lt;p>Most client messaging functionality had been limited to that occurring between the Onshape client and application elements (the &lt;strong>Element tab&lt;/strong> location). Limited functionality in now also available for client messaging to work with application extensions in the &lt;strong>Element right panel&lt;/strong> location.&lt;/p>
&lt;p>Enabled messaging to Element right panel extensions includes the communication of selections that the user makes for the following application extension contexts:&lt;/p>
&lt;ul>
&lt;li>Part Studio&lt;/li>
&lt;li>Assembly&lt;/li>
&lt;li>Document&lt;/li>
&lt;/ul>
&lt;p>All &lt;a href="#security-considerations">Security Considerations&lt;/a> above apply to both Element tab and Element right panel extensions, with the following notes:&lt;/p>
&lt;ul>
&lt;li>Initial message from the application extension to the Onshape client, in the form of an &lt;code>applicationInit&lt;/code> message (or one of any other messages supported by the element right panel extensions), is required to ensure the Onshape client does not send messages to the extension until it is ready.&lt;/li>
&lt;li>Once a valid &lt;code>applicationInit&lt;/code> message is received by the Onshape client, it will start sending messages with the &lt;code>messageName&lt;/code> value &lt;code>SELECTION&lt;/code> upon user selection interactions.&lt;/li>
&lt;li>Prior to accepting &lt;em>any&lt;/em> message from the Onshape client as secure, the &lt;code>origin&lt;/code> attribute value included in incoming messages must be validated as equal to the original &lt;code>server&lt;/code> query parameter value used to load the application extension.&lt;/li>
&lt;/ul>
&lt;h2 id="code-snippets">Code Snippets&lt;/h2>
&lt;h3 id="parse-query-parameters">Parse query parameters&lt;/h3>
&lt;p>This JavaScript code parses the iframe &lt;code>src&lt;/code> query parameters and uses them to post a message:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> documentId;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> workspaceId;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> elementId;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> server;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Parse query parameters
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">var&lt;/span> queryParameters = &lt;span style="color:#0aa">decodeURIComponent&lt;/span>(&lt;span style="color:#0aa">window&lt;/span>.location.search.substr(&lt;span style="color:#099">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> queryParametersArray = queryParameters.split(&lt;span style="color:#a50">&amp;#39;&amp;amp;&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">for&lt;/span> (&lt;span style="color:#00a">var&lt;/span> i = &lt;span style="color:#099">0&lt;/span>; i &amp;lt; queryParametersArray.length; i++) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> parameterArray = queryParametersArray[i].split(&lt;span style="color:#a50">&amp;#39;=&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">if&lt;/span> (parameterArray.length === &lt;span style="color:#099">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">switch&lt;/span> (parameterArray[&lt;span style="color:#099">0&lt;/span>]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">case&lt;/span> &lt;span style="color:#a50">&amp;#39;documentId&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> documentId = parameterArray[&lt;span style="color:#099">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">case&lt;/span> &lt;span style="color:#a50">&amp;#39;workspaceId&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workspaceId = parameterArray[&lt;span style="color:#099">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">case&lt;/span> &lt;span style="color:#a50">&amp;#39;elementId&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elementId = parameterArray[&lt;span style="color:#099">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">case&lt;/span> &lt;span style="color:#a50">&amp;#39;server&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server = parameterArray[&lt;span style="color:#099">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Listen for clicks and post a message to the Onshape client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#0aa">document&lt;/span>.getElementById(&lt;span style="color:#a50">&amp;#39;&amp;lt;id of your topmost element&amp;gt;&amp;#39;&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> addEventListener(&lt;span style="color:#a50">&amp;#39;click&amp;#39;&lt;/span>, &lt;span style="color:#00a">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> message = {documentId: documentId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workspaceId: workspaceId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elementId: elementId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> messageName: &lt;span style="color:#a50">&amp;#39;closeFlyoutsAndMenus&amp;#39;&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0aa">window&lt;/span>.parent.postMessage(message, &lt;span style="color:#a50">&amp;#39;*&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#00a">true&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="create-a-message-object">Create a message object&lt;/h3>
&lt;p>The message object posted to the Onshape client is of the form:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> documentId: documentId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workspaceId: workspaceId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elementId: elementId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> messageName: &lt;span style="color:#a50">&amp;#39;&amp;lt;message name&amp;gt;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// … other properties as needed for other message types …
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The message data object posted to the application extension is of the form:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> messageName: &lt;span style="color:#a50">&amp;#39;&amp;lt;message name&amp;gt;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// … other properties as needed for other message types …
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The message will always have a &lt;code>messageName&lt;/code> property.&lt;/p>
&lt;h3 id="listen-for-messages">Listen for messages&lt;/h3>
&lt;p>To listen for messages from the Onshape client:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// server is one of the iframe src query parameters - see above
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> handlePostMessage = &lt;span style="color:#00a">function&lt;/span>(e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#a50">&amp;#34;Post message received in application extension.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#a50">&amp;#34;e.origin = &amp;#34;&lt;/span> + e.origin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Verify the origin matches the server iframe src query parameter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">if&lt;/span> (server === e.origin) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#a50">&amp;#34;Message safe and can be handled as it is from origin &amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + e.origin +
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;&amp;#39;, which matches server query parameter &amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + server + &lt;span style="color:#a50">&amp;#34;&amp;#39;.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">if&lt;/span> (e.data &amp;amp;&amp;amp; e.data.messageName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#a50">&amp;#34;Message name = &amp;#39;&amp;#34;&lt;/span> + e.data.messageName + &lt;span style="color:#a50">&amp;#34;&amp;#39;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#a50">&amp;#34;Message name not found. Ignoring message.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#a50">&amp;#34;Message NOT safe and should be ignored.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0aa">window&lt;/span>.addEventListener(&lt;span style="color:#a50">&amp;#39;message&amp;#39;&lt;/span>, handlePostMessage, &lt;span style="color:#00a">false&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="send-and-handle-messages">Send and handle messages&lt;/h3>
&lt;p>The following is an example of how one might send an initialization message to, and handle post messages from, the Onshape client.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> Proper clean-up of event listeners is not included in the snippet&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">function&lt;/span> handlePostMessage(event) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// ensure that the event data is from a legit source:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">if&lt;/span>(theServerStringFromActionUrl !== event.origin) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(&lt;span style="color:#a50">&amp;#39;origin of message is not legitimate&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// branch based on messageName attribute
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">switch&lt;/span>(event.data.messageName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">case&lt;/span> &lt;span style="color:#a50">&amp;#39;SELECTION&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.debug(&lt;span style="color:#a50">&amp;#39;SELECTION event data: %o&amp;#39;&lt;/span>, event.data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.debug(&lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>event.data.messageName&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50"> not handled`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0aa">window&lt;/span>.addEventListener(&lt;span style="color:#a50">&amp;#39;message&amp;#39;&lt;/span>, handlePostMessage);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> initMessage = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> documentId: theDocumentId, &lt;span style="color:#aaa;font-style:italic">// required - parsed from action url
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> workspaceId: theWorkspaceId, &lt;span style="color:#aaa;font-style:italic">// required - parsed from action url
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> elementId: theElementId, &lt;span style="color:#aaa;font-style:italic">// required - parsed from action url
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> messageName: &lt;span style="color:#a50">&amp;#39;applicationInit&amp;#39;&lt;/span> &lt;span style="color:#aaa;font-style:italic">// required
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0aa">window&lt;/span>.parent.postMessage(initMessage, &lt;span style="color:#a50">&amp;#39;*&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="right-panel-interaction-sequence">Right panel interaction sequence&lt;/h3>
&lt;p>The sequence diagram below illustrates the interaction between an Element right panel application extension and the Onshape client:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>%%{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;theme&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;default&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;sequence&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;mirrorActors&amp;#34;&lt;/span>: &lt;span style="color:#00a">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;showSequenceNumbers&amp;#34;&lt;/span>: &lt;span style="color:#00a">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;width&amp;#34;&lt;/span>: &lt;span style="color:#099">75&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;height&amp;#34;&lt;/span>: &lt;span style="color:#099">60&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;actorMargin&amp;#34;&lt;/span>: &lt;span style="color:#099">25&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;messageFontSize&amp;#34;&lt;/span>: &lt;span style="color:#099">13&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;messageFontFamily&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;monospace&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#34;messageFontWeight&amp;#34;&lt;/span>: &lt;span style="color:#099">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}%%
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sequenceDiagram
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> actor user
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> participant OSC AS Onshape Client
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> participant AE AS Application Extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user-&amp;gt;&amp;gt;+OSC: start element right panel extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Note right &lt;span style="color:#00a">of&lt;/span> user: via configured button
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OSC-&amp;gt;&amp;gt;+AE: invoke action url (&lt;span style="color:#00a">with&lt;/span> query params)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AE-&amp;gt;&amp;gt;OSC: postMessage(messageName: &lt;span style="color:#a50">&amp;#39;applicationInit&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loop selection interactions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user-&amp;gt;&amp;gt;OSC: select
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OSC-&amp;gt;&amp;gt;AE: postMessage(messageName: &lt;span style="color:#a50">&amp;#39;SELECTION&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user-&amp;gt;&amp;gt;OSC: stop element right panel extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Note right &lt;span style="color:#00a">of&lt;/span> user: via configured button
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deactivate AE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OSC-XAE: destroy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deactivate OSC
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="right-panel-message-exchange">Right panel message exchange&lt;/h3>
&lt;p>The following messages are exchanged for application extensions located in the element right panel and configured for Part Studio, Assembly, or Document contexts.&lt;/p>
&lt;p>The first message with &lt;code>messageName&lt;/code> attribute set to &lt;code>applicationInit&lt;/code> is sent to the Onshape client by an application extension once it is loaded and ready to receive and process incoming messages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> documentId: &lt;span style="color:#a50">&amp;#39;&amp;lt;document id&amp;gt;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workspaceId: &lt;span style="color:#a50">&amp;#39;&amp;lt;workspace id&amp;gt;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elementId: &lt;span style="color:#a50">&amp;#39;&amp;lt;element id&amp;gt;&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> messageName: &lt;span style="color:#a50">&amp;#39;applicationInit&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The values &lt;code>&amp;lt;document id&amp;gt;&lt;/code>, &lt;code>&amp;lt;workspace id&amp;gt;&lt;/code>, &lt;code>&amp;lt;element id&amp;gt;&lt;/code>, and &lt;code>&amp;lt;server id&amp;gt;&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>Are originally included as query parameters in the action URL used to request the content of the application extension&lt;/li>
&lt;li>Must be included in messages sent to the Onshape client&lt;/li>
&lt;/ul>
&lt;p>While initialization is the specific intent of the &lt;code>applicationInit&lt;/code> message, other supported &lt;code>messageName&lt;/code> attributes have the same initialization effect upon their first receipt by the Onshape client.&lt;/p>
&lt;p>Next, as the user interacts with Onshape by selecting various parts of the model, messages with the &lt;code>messageName&lt;/code> attribute set to &lt;code>SELECTION&lt;/code> are sent to the application extension:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> messageName: &lt;span style="color:#a50">&amp;#39;SELECTION&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selections: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selectionType: &lt;span style="color:#a50">&amp;#39;ENTITY&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selectionId: &lt;span style="color:#a50">&amp;#39;KRiB&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entityType: &lt;span style="color:#a50">&amp;#39;FACE&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> occurrencePath: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;MfOieM8xKIDGHe37c&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workspaceMicroversionId: &lt;span style="color:#a50">&amp;#39;a781c53fbd1095e3462d2b70&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selectionType: &lt;span style="color:#a50">&amp;#39;ENTITY&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selectionId: &lt;span style="color:#a50">&amp;#39;KRdC&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entityType: &lt;span style="color:#a50">&amp;#39;EDGE&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> occurrencePath: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;MfOieM8xKIDGHe37c&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workspaceMicroversionId: &lt;span style="color:#a50">&amp;#39;a781c53fbd1095e3462d2b70&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="notes">Notes&lt;/h2>
&lt;h3 id="keyboard-focus">Keyboard focus&lt;/h3>
&lt;p>Keyboard focus will not be transferred to an application until the user clicks in the application or the application programmatically takes focus. An application should programmatically take focus when it is first loaded and when it receives a &lt;code>show&lt;/code> message from Onshape. Shortcut keys will work immediately when the application is shown.&lt;/p>
&lt;h3 id="future-work">Future work&lt;/h3>
&lt;ul>
&lt;li>New message types will be added as needed. If your application extension needs a message not listed in this document, please notify us, and we’ll work with you on it.&lt;/li>
&lt;li>Mobile client support is unclear at this time.&lt;/li>
&lt;li>Onshape is considering using promises to wrap &lt;code>POST&lt;/code> messages, which would make the application extension&amp;rsquo;s JavaScript simpler and enable chaining &lt;code>POST&lt;/code>s with other operations. Promises would make some interactions with multiple responses difficult (e.g., when you open a dialog, like the Select Item dialog, and want to receive multiple &lt;code>POST&lt;/code> messages back due to the user clicking on multiple items in the dialog).&lt;/li>
&lt;/ul></description></item><item><title>Docs: Structured Storage</title><link>https://onshape-public.github.io/docs/app-dev/structuredstorage/</link><pubDate>Mon, 18 May 2020 20:40:16 -0400</pubDate><guid>https://onshape-public.github.io/docs/app-dev/structuredstorage/</guid><description>
&lt;h2 id="sub-elements">Sub Elements&lt;/h2>
&lt;p>Onshape provides application elements storage that is controlled by applications through the API. These elements allow a set of named sub-elements.&lt;/p>
&lt;p>The application can make changes to sub-elements independently or in arbitrary groupings. Changes may be wholesale replacements, or may be deltas. When performing a delta update, the application may post a full version as well, which allows the api to return a smaller number of deltas for subsequent queries.&lt;/p>
&lt;p>An application may need to perform multiple versionable actions in the course of performing a user-level action, and we want to allow the individual actions to be collected into a single action from the perspective of document history. We do this by providing support for creation of a private transaction and support for atomically committing the transaction to the document workspace as a single user-visible action.&lt;/p>
&lt;p>Onshape does not assume any knowledge about the semantics of application deltas. All merging of deltas into a consolidated form is done by the application. Applications should typically send checkpoint state for a sub-element if many delta changes have been made since the last checkpoint.&lt;/p>
&lt;p>Document content and changes are logically an array of bytes, but since they are transmitted through JSON, then are expected to be presented a Base-64 encoding of the array into string form.&lt;/p>
&lt;p>We use some terminology in this document that is new.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>changeId&lt;/strong> - an opaque identifier for the state of an application element. Each change to the application element results in a new changeId&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>transaction&lt;/strong> - a private workspace within a document workspace for composing modifications to an application element. These changes are not visible to the user until committed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>transaction commit&lt;/strong> - an operation that moves the changes performed within a transaction to the application element workspace as a single user-visible action.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Concurrent access by multiple users&lt;/strong>&lt;/p>
&lt;p>If the element is being concurrently accessed by multiple sessions, updates may encounter conflicts during update. If the application has a mechanism that ensures that all accesses to the element are mediated by a single process, as is done with our part studio and assemblies, this can be addressed directly by the application. However, if the application is not able to mediate access in this way, updates by one session may invalidate state held by another session. We address this by notifying updaters when an update cannot be directly applied because their state is out of date and allowing them to refresh their state before re-applying the change.&lt;/p>
&lt;p>This policy of requiring the application have current state when posting updates could be overly conservative in some cases. Detecting conflict at the sub-element level might provide for better concurrent access performance, but there probably are cases where this fails, so it probably would need some level of application control.&lt;/p>
&lt;h2 id="json-tree">JSON Tree&lt;/h2>
&lt;p>In contrast with sub elements, JSON tree storage is a more managed data storage mechanism that Onshape itself can merge and diff. At the root of it, the data structure is a single JSON object per Application Element. The user submits incremental changes that are then applied by Onshape to the JSON tree. Onshape stores these &amp;lsquo;diffs&amp;rsquo; in a new microversion created as a result of the update request, or during a subsequent transaction commit request. When the user then performs a merge or restore operation, Onshape can sum and apply the requisite incremental changes. By storing diffs, Onshape provides to the user a storage mechanism that is more robust to race conditions, since multiple simultaneous edits can be optionally merged by Onshape. All of these qualities make JSON tree a preferred way to store application element data in an Onshape-native manner.&lt;/p>
&lt;h3 id="json-tree-edit-semantics">JSON Tree Edit Semantics&lt;/h3>
&lt;h5 id="btjedit-encoding">BTJEdit Encoding&lt;/h5>
&lt;p>A JSON tree edit represents an incremental change to an application element&amp;rsquo;s JSON tree. The edit is a &lt;code>BTJEdit&lt;/code> class, which is encoded as one of the following:&lt;/p>
&lt;ul>
&lt;li>Deletion:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJEditDelete-1992&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;path&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Insertion:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJEditInsert-2523&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;path&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;newValue&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Change:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJEditChange-2636&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;path&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;newValue&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Move:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJEditMove-3245&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourcePath&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;path&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;destinationPath&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;path&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>List (where edit1, edit2, etc. are zero or more edits.):&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJEditList-2707&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;edits&amp;#34;&lt;/span> : [ &lt;span style="color:#a50">&amp;#34;edit1&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;edit2&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;...&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Within the above encoding, &lt;code>newValue&lt;/code> is a stand in for any valid JSON, and &lt;code>path&lt;/code> is a stand in for an object representing a path to the node at which to perform the edit.&lt;/p>
&lt;h5 id="btjpath-encoding">BTJPath Encoding&lt;/h5>
&lt;p>The BTJPath object describes a path through the JSON tree to a particular node, and is encoded as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;startNode&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span> : [ &lt;span style="color:#a50">&amp;#34;pathElement1&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;pathElement2&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;...&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where startNode is a string that is either empty to specify the root node or a nodeId of a node in the tree. The pathElement is one of:&lt;/p>
&lt;ul>
&lt;li>Key:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;string&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Index:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJPathIndex-1871&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;index&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;integer&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the insertion and move type edits the path elements can describe a path that doesn&amp;rsquo;t currently exist. Onshape will generate the proper keys and values as needed to place the node value in the proper location.&lt;/p>
&lt;h3 id="json-tree-examples">JSON Tree Examples&lt;/h3>
&lt;p>Below are some examples that show the body required to perform the particular edit on a JSON tree.&lt;/p>
&lt;h4 id="deletion-example">Deletion Example&lt;/h4>
&lt;p>If the pre-existing JSON tree looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and a delete edit looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditDelete-1992&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>}]}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the resulting JSON is the result of deleting the node specified by &lt;code>path&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="insert-example">Insert Example&lt;/h4>
&lt;p>If the pre-existing JSON tree looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the insertion edit looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditInsert-2523&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;insertedKey&amp;#34;&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the resulting JSON is the result of inserting the node described by &lt;code>value&lt;/code> at the node specified by &lt;code>path&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;insertedKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="change-example">Change Example&lt;/h4>
&lt;p>If the pre-existing JSON tree looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the change edit looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditChange-2636&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myOtherValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the resulting JSON is the result of changing the node specified by &lt;code>path&lt;/code> to the node described by &lt;code>value&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myOtherValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="move-example">Move Example&lt;/h4>
&lt;p>If the pre-existing JSON tree looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myOtherKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myOtherValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the move edit looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditMove-3245&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourcePath&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;destinationPath&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;keyCreatedFromMove&amp;#34;&lt;/span>}]}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the resulting JSON is the result of moving the node from the specified &lt;code>sourcePath&lt;/code> to the &lt;code>destinationPath&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;keyCreatedFromMove&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="list-example">List Example&lt;/h4>
&lt;p>If the pre-existing JSON tree looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the list edit looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditList-2707&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;edits&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditInsert-2523&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditChange-2636&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;firstValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;secondValue&amp;#34;&lt;/span>]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditInsert-2523&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathIndex-1871&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;index&amp;#34;&lt;/span>: &lt;span style="color:#099">1&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myBetterSecondValue&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditDelete-1992&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathIndex-1871&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;index&amp;#34;&lt;/span>: &lt;span style="color:#099">2&lt;/span>}]}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the resulting JSON is the result of applying all the given edits in order:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;firstValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;myBetterSecondValue&amp;#34;&lt;/span>]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The intermediate steps were:&lt;/p>
&lt;ol>
&lt;li>Insertion:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Change:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;firstValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;secondValue&amp;#34;&lt;/span>]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>List insertion:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;firstValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;myBetterSecondValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;secondValue&amp;#34;&lt;/span>]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>List deletion:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;firstValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;myBetterSecondValue&amp;#34;&lt;/span>]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>All the examples above were tested and validated using the Python client &lt;a href="https://github.com/onshape-public/onshape-clients/blob/next/python/test/test_app_element_json_tree.py">here&lt;/a>.&lt;/p></description></item><item><title>Docs: Webhook Notifications</title><link>https://onshape-public.github.io/docs/app-dev/webhook/</link><pubDate>Mon, 18 May 2020 20:44:05 -0400</pubDate><guid>https://onshape-public.github.io/docs/app-dev/webhook/</guid><description>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Webhook notifications allow an application to register to receive notifications of certain events that occur within the
Onshape environment. To receive a notification, an application must expose an endpoint that Onshape can call.&lt;/p>
&lt;h2 id="example-code">Example Code&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/onshape-public/onshape-clients/blob/master/python/test/test_webhooks.py#L126">Python&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="events">Events&lt;/h2>
&lt;p>Each type of event that an application may receive notifications for has a unique identifier known as the event type.
Event types are grouped into Event Groups. Each group shares specification requirements, as described below.&lt;/p>
&lt;h3 id="event-groups">Event Groups&lt;/h3>
&lt;p>Event types are categorized into several different groups based on the dominant user resource of the event. The group
that a given event is part of defines the required parameters needed in the registration process to identify the
resource or group of resources to watch. For instance, if registering for an event in the &lt;code>document&lt;/code> event group,
the application must identify either a specific document&amp;rsquo;s id or a specific company&amp;rsquo;s id. If registered for a company,
the event will be registered for all present and future documents owned by the company.&lt;/p>
&lt;h4 id="application-group">Application Group&lt;/h4>
&lt;p>Monitor changes to applications.&lt;/p>
&lt;h5 id="registration-requirements">Registration Requirements&lt;/h5>
&lt;ul>
&lt;li>&lt;code>clientId&lt;/code>&lt;/li>
&lt;/ul>
&lt;h5 id="supported-event-types">Supported Event Types&lt;/h5>
&lt;ul>
&lt;li>&lt;code>onshape.user.lifecycle.updateappsettings&lt;/code> - occurs when user application settings are modified&lt;/li>
&lt;/ul>
&lt;h4 id="document-group">Document Group&lt;/h4>
&lt;p>Monitor various aspects of document changes.&lt;/p>
&lt;h5 id="registration-requirements-1">Registration Requirements&lt;/h5>
&lt;ul>
&lt;li>&lt;code>documentId&lt;/code> OR &lt;code>companyId&lt;/code> must be specified in the registration body.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: only &lt;code>documentId&lt;/code> is valid for the &lt;code>onshape.document.lifecycle.statechange&lt;/code>.&lt;/p>
&lt;h5 id="supported-event-types-1">Supported Event Types&lt;/h5>
&lt;ul>
&lt;li>&lt;code>onshape.model.lifecycle.changed&lt;/code> - occurs when a change to a model has been made&lt;/li>
&lt;li>&lt;code>onshape.model.translation.complete&lt;/code> - occurs when a translation request is completed&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.metadata&lt;/code> - occurs when part or element metadata is modified&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.createversion&lt;/code> - occurs when a new version of a document is created&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.createworkspace&lt;/code> - occurs when a new workspace is created&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.createelement&lt;/code> - occurs when a new element is created&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.deleteelement&lt;/code> - occurs when an element is deleted&lt;/li>
&lt;li>&lt;code>onshape.document.lifecycle.statechange&lt;/code> - occurs when an document changes state&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.changed.externalreferences&lt;/code> - occurs when an external reference changes&lt;/li>
&lt;li>&lt;code>onshape.document.lifecycle.created&lt;/code> - occurs when a document is created&lt;/li>
&lt;li>&lt;code>onshape.revision.created&lt;/code> - occurs when a revision is created&lt;/li>
&lt;li>&lt;code>onshape.comment.create&lt;/code> - occurs when a comment is created in a document&lt;/li>
&lt;li>&lt;code>onshape.comment.update&lt;/code> - occurs when a comment is updated in a document&lt;/li>
&lt;li>&lt;code>onshape.comment.delete&lt;/code> - occurs when a deleted is deleted in a document&lt;/li>
&lt;/ul>
&lt;h4 id="workflow-group">Workflow Group&lt;/h4>
&lt;p>Monitor release management actions.&lt;/p>
&lt;h5 id="registration-requirements-2">Registration Requirements&lt;/h5>
&lt;ul>
&lt;li>&lt;code>companyId&lt;/code>&lt;/li>
&lt;/ul>
&lt;h5 id="supported-event-types-2">Supported Event Types&lt;/h5>
&lt;ul>
&lt;li>&lt;code>onshape.workflow.transition&lt;/code> - occurs when a revision or release package transitions through workflow states.&lt;/li>
&lt;/ul>
&lt;h4 id="lifecycle-group">Lifecycle Group&lt;/h4>
&lt;p>Monitor webhook changes.&lt;/p>
&lt;h5 id="registration-requirements-3">Registration Requirements&lt;/h5>
&lt;p>No requirements. This event type responds to any and all webhooks registered by the same application.&lt;/p>
&lt;h5 id="supported-event-types-3">Supported Event Types&lt;/h5>
&lt;ul>
&lt;li>&lt;code>webhook.ping&lt;/code> - occurs either in response to a request by an application to call a registered webhook, or as a post-registration validation initiated by Onshape&lt;/li>
&lt;li>&lt;code>webhook.register&lt;/code> - occurs in response to a notification registration API call&lt;/li>
&lt;li>&lt;code>webhook.unregister&lt;/code> - occurs in response to a notification deregistation API call&lt;/li>
&lt;/ul>
&lt;h2 id="webhook-registration">Webhook Registration&lt;/h2>
&lt;p>An application registers for event notification by making a REST call to the Onshape web service, providing a URL to
notify, and the required parameters for the event types to be registered, as mentioned in &lt;a href="#event-groups">Event Groups&lt;/a>.
If the registration request is well-formed, the registration API call returns information about the registration,
including a unique ID string. This ID string identifies the webhook registration. No de-duplication of notification
registrations is performed by the API. Each registration call will yield a new registration ID, even if the parameters
are identical to those passed in a prior call. Shortly after an application calls the notification registration API,
Onshape will make make an asynchronous trial notification call to the URL generated from the URL template with an event
type of webhook.register in order to test whether the application notification server is accessible. If the trial
notification delivery fails to return an HTTP 200 status code, the notification registration is cancelled. The trial
notification is usually delivered after the notification registration has been received by the application. However,
variations in network delays may result in the trial notification occurring before response is received and processed by
the application, so the notification handler should be ready to process notifications before the registration call is
made.&lt;/p>
&lt;h2 id="notifications">Notifications&lt;/h2>
&lt;p>Notifications are delivered to an application as an HTTP POST with a JSON body. The body includes information about the
identity of the registration request plus information specific to the event and notification message. An application may
register for notifications to a URL that uses either HTTP or HTTPS. If HTTPS is specified by the URL template, the
notification server must supply a certificate that is signed by a certificate authority (CA) recognized by Onshape.&lt;br>
Self-signed certificates as well as certificates signed by unrecognized CAs will be rejected, causing notification
delivery to fail.&lt;/p>
&lt;h2 id="notification-deregistration">Notification Deregistration&lt;/h2>
&lt;p>When an application no longer needs to be notified of changes specified by a particular notification registration, it should normally de-register the notification request. De-registration is performed by making an HTTP that specifies the hook to deregister. Onshape will attempt to call the deregistered hook with an event type of webhook.unregister as validation for the application that the de-registration is complete. If the application does not de-register the webhook, Onshape will continue delivering notifications until either the the application returns an error in response to a notification for the webhook, or fails to respond at all for an extended period of time.&lt;/p>
&lt;h2 id="notification-api-example-messages">Notification API example messages&lt;/h2>
&lt;p>registration&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:45:10.611-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;webhook.register&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;34795d2e5f5f44eeb61fb7b1&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;versionId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>ping&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:24.368-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;webhook.ping&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;6808d9a622644330b6cd95f5&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;versionId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>model change&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:29.284-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;onshape.model.lifecycle.changed&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;f925722bee1c43fc80fb5bb2&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;0f931a1ceba842299192823f&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;60f54ac1cbc04179a6642d9a&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;0f9c4392e5934f30b48ab645&amp;#34;,
&amp;#34;versionId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>document state change&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:29.284-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;onshape.document.lifecycle.statechange&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;60f54ac1cbc04179a6642d9a&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;0f9c4392e5934f30b48ab645&amp;#34;,
&amp;#34;versionId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;documentState&amp;#34;: &amp;#34;TRASH&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>Possible values of documentState are:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;ACTIVE&amp;rdquo; - document is in a normal, usable state&lt;/li>
&lt;li>&amp;ldquo;TRASH&amp;rdquo; - document has been moved to the trash (User can move out of trash to ACTIVE state)&lt;/li>
&lt;li>&amp;ldquo;DELETED&amp;rdquo; - document has been deleted&lt;/li>
&lt;/ul>
&lt;p>user application settings change&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:29.284-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;onshape.user.lifecycle.updateappsettings&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;f925722bee1c43fc80fb5bb2&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;0f931a1ceba842299192823f&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;60f54ac1cbc04179a6642d9a&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;userId&amp;#34;: &amp;#34;567953d60a1a5fbb95940333&amp;#34;,
&amp;#34;clientId&amp;#34;:&amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXZY234567ABCDEFG=&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>translation completion&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:29.284-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;onshape.model.translation.complete&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;f925722bee1c43fc80fb5bb2&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;0f931a1ceba842299192823f&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;60f54ac1cbc04179a6642d9a&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;0f9c4392e5934f30b48ab645&amp;#34;,
&amp;#34;userId&amp;#34;: &amp;#34;567953d60a1a5fbb95940333&amp;#34;,
&amp;#34;translationId&amp;#34;: &amp;#34;4f5de10f9c4392e5934f30b4&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>comment create&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:29.284-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;onshape.comment.create&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;f925722bee1c43fc80fb5bb2&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;0f931a1ceba842299192823f&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;60f54ac1cbc04179a6642d9a&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;0f9c4392e5934f30b48ab645&amp;#34;,
&amp;#34;commentId&amp;#34;: &amp;#34;567953d60a1a5fbb95940333&amp;#34;
}
&lt;/code>&lt;/pre></description></item><item><title>Docs: Launch Checklist</title><link>https://onshape-public.github.io/docs/app-store/checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/app-store/checklist/</guid><description>
&lt;p>This checklist brings together the processes you should follow to ensure your app is launched successfully. While all tasks must be completed to submit your app to the Onshape App Store, the task sequence provided here is a suggestion.&lt;/p>
&lt;h3 id="1-understand-quality-expectations">1. Understand quality expectations&lt;/h3>
&lt;p>These are to ensure that the Onshape App Store remains a trusted resource and that quality is maintained Review the &lt;a href="https://onshape-public.github.io/docs/app-store/quality">Quality Considerations&lt;/a> page, and reach out to the &lt;a href="mailto:onshape-developer-relations@ptc.com">Developer Relations team&lt;/a> with any questions.&lt;/p>
&lt;h3 id="2-sign-in-to-your-developer-account">2. Sign in to your developer account&lt;/h3>
&lt;p>Sign in to your developer account at &lt;a href="https://dev-portal.onshape.com">dev-portal.onshape.com&lt;/a>, and ensure your developer account details are accurate. Contact our &lt;a href="mailto:api-support@onshape.com">API Support team&lt;/a> if you need assistance.&lt;/p>
&lt;h3 id="3-authenticate-your-app">3. Authenticate your app&lt;/h3>
&lt;p>Please refer to the &lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth documentation&lt;/a> for information on authenticating your app with OAuth2.&lt;/p>
&lt;h3 id="4-build-your-app">4. Build your app&lt;/h3>
&lt;p>While building your app, use the resources in our Onshape Developer Documentation, including this API Guide and our API Explorer. We recommend familiarizing yourself with the following pages:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/api-intro/">Introduction to the Onshape REST API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/api-intro/architecture">Onshape Architecture&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/app-dev/">Onshape App Development&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/app-dev/extensions">Extensions&lt;/a> &lt;!-- Susan move the videos to their pages -->&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/app-dev/clientmessaging">Client Messaging&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/app-store">Onshape App Store&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="5-prepare-your-store-entry">5. Prepare your store entry&lt;/h3>
&lt;p>Prepare the descriptions, promotional graphics, screenshots, and videos you&amp;rsquo;ll add to your store entry. Make sure you include a link to if required. Watch this video for more details.&lt;/p>
&lt;p>See the video below for a walkthrough:&lt;/p>
&lt;p>&lt;a href="https://onshape.wistia.com/medias/tuhuzfi7we">&lt;img src="https://onshape-public.github.io/images/AppStoreEntryVideoCard.png" style="width:5in" alt="OAuth app creation video"/>&lt;/a>&lt;/p>
&lt;h3 id="6-run-beta-tests">6. Run beta tests&lt;/h3>
&lt;p>During the beta period, try to enlist at least 5 active testers to get feedback before making your app available to the general public.&lt;/p>
&lt;ol>
&lt;li>To find beta testers, contact our &lt;a href="mailto:onshape-developer-relations@ptc.com">Developer Relations team&lt;/a>, and recruit via the &lt;a href="https://forum.onshape.com/categories/developer-community">Onshape forum&lt;/a>.&lt;/li>
&lt;li>To give beta users early visibility, first &lt;a href="https://cad.onshape.com/help/Content/teams-enterprise.htm">create a team&lt;/a>, then ensure your app is shared with that team in the &lt;a href="https://dev-portal.onshape.com">Developer Portal&lt;/a>. See the &lt;a href="https://onshape.wistia.com/medias/5t1dwkspfo">Create a Team in Onshape video&lt;/a> for a walkthrough.&lt;/li>
&lt;/ol>
&lt;h3 id="7-determine-your-apps-price">7. Determine your app&amp;rsquo;s price&lt;/h3>
&lt;p>Once you&amp;rsquo;ve determined your monetization model, set up your price, billing, and other details. Billing should be tested, and to do so a staging environment is available. See the &lt;a href="https://onshape-public.github.io/docs/api-adv/billing">Billing API&lt;/a> page for more details.&lt;/p>
&lt;h3 id="8-sign-and-return-the-developer-agreement">8. Sign and return the developer agreement&lt;/h3>
&lt;p>Email to the &lt;a href="mailto:onshape-developer-relations@ptc.com">Developer Relations team&lt;/a> to obtain yours.&lt;/p>
&lt;h3 id="9-submit-your-app-for-final-testing">9. Submit your app for final testing&lt;/h3>
&lt;p>Once you&amp;rsquo;ve returned the developer agreement, you can submit your app to the &lt;a href="mailto:onshape-developer-relations@ptc.com">Developer Relations team&lt;/a> for final testing. &lt;a href="https://onshape-public.github.io/docs/app-store/testingguidelines">This is a comprehensive functionality and design test.&lt;/a> During this testing period (expect up to a week, depending on complexity), changes to code are prohibited unless requested. At the conclusion of the test, you will receive one of the following notifications from our Developer Relations team:&lt;/p>
&lt;ul>
&lt;li>Approved for release&lt;/li>
&lt;li>Approved for release with feedback&lt;/li>
&lt;li>Changes required before another round of testing&lt;/li>
&lt;/ul>
&lt;h3 id="10-integrate-your-support-systems">10. Integrate your support systems&lt;/h3>
&lt;p>Whether you use Zendesk, Jira, or email support, we’ll help you determine and set up this integration. Contact the &lt;a href="mailto:onshape-developer-relations@ptc.com">Developer Relations team&lt;/a> to explore these options. This is the channel we will use to test your app and provide feedback.&lt;/p>
&lt;h3 id="11-connect-via-slack">11. Connect via Slack&lt;/h3>
&lt;p>Connecting directly with our Support, Tech, and Sales teams has proven to be valuable to app developers. This dedicated channel is simple to implement if you already have a paid Slack account. If not (or if you want to use the free version of Slack), we can add members of your team as guests to our account. Please contact &lt;a href="mailto:amagnin@ptc.com">Aaron Magnin&lt;/a> to establish this connection.&lt;/p>
&lt;h3 id="12-final-check-and-publish">12. Final check and publish&lt;/h3>
&lt;p>First, double-check you&amp;rsquo;ve done everything on this list. Now you&amp;rsquo;re ready to publish your app to the production channel! Send an email detailing &lt;strong>when&lt;/strong> you’d like this to happen to the &lt;a href="mailto:onshape-developer-relations@ptc.com">Developer Relations team&lt;/a>.&lt;/p>
&lt;h3 id="13-promote-your-app">13. Promote your app&lt;/h3>
&lt;p>Start promoting your app with the &lt;a href="https://www.ptc.com/en/brand-guide/logos/onshape">Onshape badge&lt;/a> and by presenting it to our internal teams in one of the following ways:&lt;/p>
&lt;ul>
&lt;li>To the Onshape Tech and Sales teams in a small meeting (~1 hour, Wednesdays at noon Eastern Time)&lt;/li>
&lt;li>To the entire Onshape organization in a company-wide meeting (~5-10 minutes, Thursdays at 11am Eastern Time).&lt;/li>
&lt;/ul>
&lt;h3 id="14-encourage-reviews-from-users">14. Encourage reviews from users&lt;/h3>
&lt;p>The value of reviews is not to be underestimated. Reviews give users an opportunity to provide feedback, and can also signal to others that your app is worth investigating.&lt;/p>
&lt;h3 id="15-maintain-your-app">15. Maintain your app&lt;/h3>
&lt;p>Continually fix stability and performance issues. Improving the user experience will result in more engaged users, higher ratings, and in turn, more success.&lt;/p>
&lt;blockquote>
&lt;blockquote>
&lt;p>Failure to respond to customer tickets in a reasonable time will lead to the removal of your app from the Onshape App Store.&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h3 id="16-increase-engagement-and-retention">16. Increase engagement and retention&lt;/h3>
&lt;p>Aim to increase user engagement, retain and grow your audience, and earn more revenue by:&lt;/p>
&lt;ul>
&lt;li>Encouraging repeat visits with a nurture stream and training materials&lt;/li>
&lt;li>Integrating more features from user requests&lt;/li>
&lt;li>Interacting with and understanding your audience via the &lt;a href="https://forum.onshape.com/categories/developer-community">Onshape forum&lt;/a>, social media, etc.&lt;/li>
&lt;/ul>
&lt;h3 id="17-address-app-security">17. Address app security&lt;/h3>
&lt;p>At some point, a prospect or user will enquire about your app&amp;rsquo;s security controls. To address this, we recommend that you understand SOC 2 Compliance requirements, and consider filling out the &lt;a href="https://www.google.com/url?q=https://cloudsecurityalliance.org/artifacts/consensus-assessments-initiative-questionnaire-v3-1/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1686683388460627&amp;amp;usg=AOvVaw2xq8zlODs3a7W2Y3jighnr">Consensus Assessment Initiative Questionnaire&lt;/a> (CAIQ). Onshape/PTC cannot and will not attest to your compliance. More on SOC Compliance can be found at the following links:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://us.aicpa.org/interestareas/frc/assuranceadvisoryservices/aicpasoc2report">AICPA.org&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/System_and_Organization_Controls">Wikipedia: System and Organization Controls&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Testing Guidelines</title><link>https://onshape-public.github.io/docs/app-store/testingguidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/app-store/testingguidelines/</guid><description>
&lt;p>The purpose of this document is to help you get your application and App Store entry ready for QA testing.&lt;/p>
&lt;h2 id="application-release-workflow-arw">Application Release Workflow (ARW)&lt;/h2>
&lt;p>Each application submitted to the Onshape App Store goes through a series of stage-gates:&lt;/p>
&lt;ol>
&lt;li>Starting state: &lt;code>Ok to deploy to limited visibility on Production&lt;/code> (Beta testing)&lt;/li>
&lt;li>&lt;code>Ok to make Public&lt;/code>&lt;/li>
&lt;li>Goal state: &lt;code>Application is Public&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>To advance to the next stage, your application must pass testing, and your App Store entry must pass review.&lt;/p>
&lt;h2 id="kick-off-testing">Kick Off Testing&lt;/h2>
&lt;p>While completing the &lt;a href="https://onshape-public.github.io/docs/app-store/checklist">Launch Checklist&lt;/a>, you will need to use Jira to request testing and release for your application. You can initiate the following tasks from Jira:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Request application testing&lt;/code>: This puts your application in the testing queue. We will note when testing has started (&lt;code>in progress&lt;/code>) and when concluded, the ticket will be closed. The outcome will include notes and links to any issues generated (&lt;code>tickets&lt;/code>). This phase may include as many iterations as needed to get your application ready.&lt;/li>
&lt;li>&lt;code>Request public (general) authorization&lt;/code>: We will note when testing has started (&lt;code>in progress&lt;/code>), and this request will trigger a review of your app store entry and any outstanding bugs. Note there is no implied testing of your application, simply a review of outstanding issues (&lt;code>tickets&lt;/code>) and of the App Store entry. Success at this stage will advance the Application Release Workflow (ARW), and you can request public release.&lt;/li>
&lt;li>&lt;code>Request public (general) release&lt;/code>: This request states that you have coordinated with the &lt;a href="mailto:onshape-developer-relations@ptc.com">Developer Relations team&lt;/a> and the Onshape Marketing team&lt;!--How do they get in touch with the Marketing team? Slack?-->, and agreement has been reached that the app is ready for launch. Congratulations!&lt;/li>
&lt;/ul>
&lt;h2 id="testing-protocol">Testing Protocol&lt;/h2>
&lt;p>&lt;em>Applications&lt;/em> are first tested against the checklist in &lt;a href="#addendum-a">Addendum A&lt;/a>. &lt;em>Production App Store&lt;/em> entries are then performed against the checklist in &lt;a href="#addendum-b">Addendum B&lt;/a>.&lt;/p>
&lt;p>Results will be viewable in your Onshape support system (i.e., Zendesk, Jira). The result of each test will be one of:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Pass&lt;/code>:
&lt;ul>
&lt;li>No action needed.&lt;/li>
&lt;li>No notification issued. &lt;!-- How do they know it passed? Does it just show up in the app store? -->&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Enhancement&lt;/code>: Suggestions we believe would make the application better.
&lt;ul>
&lt;li>Will NOT prevent the application from being turned on for public access.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Bug (low priority)&lt;/code>: Slight deviations from the criteria that have low end user impact.
&lt;ul>
&lt;li>Will NOT prevent the application being turned on for public access.&lt;/li>
&lt;li>No stipulated time-frame for resolution.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Bug (medium priority)&lt;/code>: Material deviations from the criteria that are noticeable to the end-user. Represents a minor problem that requires a work-around.
&lt;ul>
&lt;li>Will NOT prevent the application from being turned on for public access.&lt;/li>
&lt;li>Must be fixed within 30 days.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Bug (high priority)&lt;/code>: Significant deviation from the criteria.
&lt;ul>
&lt;li>WILL prevent the application from being turned on for public access.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Bug (MUST FIX)&lt;/code>: Significant deviation from protocol or security violation.
&lt;ul>
&lt;li>WILL prevent the application from being turned on for public access.&lt;/li>
&lt;li>If the application is already public, it may be temporarily suspended from the App Store.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="testing-notes">Testing Notes&lt;/h2>
&lt;ul>
&lt;li>Testing may be requested at any time.&lt;/li>
&lt;li>Testing is done on a first-come basis.&lt;/li>
&lt;li>When testing is complete (pass or fail), you go to the back of the queue.&lt;/li>
&lt;/ul>
&lt;h2 id="addendum-a">Addendum A&lt;/h2>
&lt;p>&lt;font size="5">Application Test Criteria&lt;/font>&lt;/p>
&lt;ul>
&lt;li>The application must use the Onshape OAUTH mechanism&lt;/li>
&lt;li>The OAUTH must be against the correct stack&lt;/li>
&lt;li>To be promoted to the Production stack, and hosted service must be on a monitored production server with worldwide 24/7 availability.&lt;/li>
&lt;li>The application should not generate any avoidable console (browser) errors&lt;/li>
&lt;li>The application should should provide one or more of the following options. The user should not have to leave the registration workflow to complete a pre-requisite.
&lt;ul>
&lt;li>Sign in using the Onshape ID (account created silently on first use)&lt;/li>
&lt;li>Sign in with partner product account credentials&lt;/li>
&lt;li>Create a new partner account&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The application must be capable of managing/displaying documents in excess of 20. The application must display reasonable performance when reading documents, workspaces, elements, and parts. At scale, an account may have thousands of documents, many with multiple workspaces and each with multiple elements. Suggested strategies include:
&lt;ul>
&lt;li>Using a &lt;code>Next&lt;/code> button to load the next 20 documents&lt;/li>
&lt;li>Using infinite scroll (loading the next 20 if the scrollbar reaches the bottom of the dialog)&lt;/li>
&lt;li>Displaying the most recently-opened documents first&lt;/li>
&lt;li>Displaying a counter of documents/workspaces/elements read&lt;/li>
&lt;li>Using progressive loading&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The application should correctly list valid documents when &lt;code>per document app access&lt;/code> is turned on.&lt;/li>
&lt;li>The application should correctly handle selection of versions.&lt;/li>
&lt;li>The application should correctly handle selection of workspaces (branches).&lt;/li>
&lt;li>The application should correctly handle/display elements that are:
&lt;ul>
&lt;li>Part Studios that contain nothing&lt;/li>
&lt;li>Assemblies that contain nothing&lt;/li>
&lt;li>Part Studios that contain only surfaces&lt;/li>
&lt;li>Part Studios that contain only wire data (e.g., helices)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The application should appropriately handle revocation of a grant.&lt;/li>
&lt;/ul>
&lt;h2 id="addendum-b">Addendum B&lt;/h2>
&lt;p>&lt;font size="5">App Store Testing Criteria&lt;/font>&lt;/p>
&lt;ul>
&lt;li>The application should have a descriptive name&lt;/li>
&lt;li>The application summary should be accurate&lt;/li>
&lt;li>The redirect URLS should be valid&lt;/li>
&lt;li>The iframe URL should be valid&lt;/li>
&lt;li>The &lt;code>Grant&lt;/code> (permissions) request should be no more than is needed&lt;/li>
&lt;li>The &lt;code>Application Type&lt;/code> should be correctly set&lt;/li>
&lt;li>Team visibility should be set (optional)&lt;/li>
&lt;li>The category should be appropriate&lt;/li>
&lt;li>The application description should be accurate&lt;/li>
&lt;li>The Sign-In URL should be valid&lt;/li>
&lt;li>The pricing summary should be accurate
&lt;ul>
&lt;li>i.e., trials should not be listed as &lt;code>Free&lt;/code>; &lt;code>Free for xx days and then $xx/month&lt;/code> is more accurate.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>All pay plans should have accurate descriptions.&lt;/li>
&lt;li>The support URL should point to a resource for help (the resource should NOT be an FAQ page, unless that page also contains one of the other options):
&lt;ul>
&lt;li>Support ticketing system (e.g., Zendesk, Jira, etc.)&lt;/li>
&lt;li>Web page with a telephone number&lt;/li>
&lt;li>Web page with an email address&lt;/li>
&lt;li>Forum&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The EULA link should point to an English Language EULA.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Quality Considerations</title><link>https://onshape-public.github.io/docs/app-store/quality/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/app-store/quality/</guid><description>
&lt;h2 id="core-app-quality">Core App Quality&lt;/h2>
&lt;p>Onshape users expect high-quality apps. App quality directly influences the long-term success of your app in terms of installs, user rating and reviews, engagement, and user retention.&lt;/p>
&lt;p>This page helps you assess the core aspects of quality in your app, through a compact set of quality criteria and associated tests. All Onshape apps should meet these criteria.&lt;/p>
&lt;p>Before publishing your apps, test them against these criteria to ensure that they function well. Your testing should go well beyond what&amp;rsquo;s described here; the purpose of this page is to specify the essential quality characteristics all apps should display, so that you can cover them in your test plans.&lt;/p>
&lt;h2 id="functionality">Functionality&lt;/h2>
&lt;p>These criteria ensure that your app provides the expected functional behavior, with the appropriate level of permissions.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Area&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Permissions&lt;/td>
&lt;td>The app requests only the &lt;em>absolute minimum&lt;/em> permissions that it needs to support core functionality.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="compatibility-performance-and-stability">Compatibility, Performance, and Stability&lt;/h2>
&lt;p>These criteria ensure that apps provide the compatibility, performance, stability, and responsiveness expected by users.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Area&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Stability&lt;/td>
&lt;td>The app does not crash, force close, freeze, or otherwise function abnormally.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Performance&lt;/td>
&lt;td>The app loads quickly or provides onscreen feedback to the user (e.g., a progress indicator or similar cue) if the app takes longer than two (2) seconds to load.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Visual quality&lt;/td>
&lt;td>The app displays graphics, text, images, and other UI elements without noticeable distortion, blurring, or pixelation.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="security">Security&lt;/h2>
&lt;p>These criteria ensure that apps handle user data and personal information safely.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Area&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Data&lt;/td>
&lt;td>All private data is stored in the app&amp;rsquo;s internal storage. &lt;/br> All data from external storage is verified before being accessed. &lt;/br> No personal or sensitive user data is logged to the system or app-specific log.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Networking&lt;/td>
&lt;td>All network traffic is sent over SSL.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="onshape-app-store">Onshape App Store&lt;/h2>
&lt;p>These criteria ensure that your apps are ready to publish on Onshape App Store.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Area&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>App Details page&lt;/td>
&lt;td>The app’s feature graphic follows guidelines such as: &lt;/br>- The app listing includes a high-quality feature graphic.&lt;/br>- The feature graphic does not resemble an advertisement.&lt;/br>- The app’s screenshots or videos do not represent the content and experience of your app in a misleading way.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>User support&lt;/td>
&lt;td>User-reported bugs are addressed if they are reproducible.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="test-procedures">Test procedures&lt;/h2>
&lt;p>These test procedures help you discover various types of quality issues in your app. You can combine the tests or integrate groups of tests together in your own test plans. See the sections above for references that associate criteria with these test procedures.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Core suite&lt;/td>
&lt;td>Navigate to all parts of the app: all screens, dialogs, settings, and all user flows.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Security&lt;/td>
&lt;td>- Review all data stored in external storage. &lt;/br>- Review how data loaded from external storage is handled and processed.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Sync Data and Metadata</title><link>https://onshape-public.github.io/docs/tutorials/sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/tutorials/sync/</guid><description>
&lt;p>The first business case is probably the most common, “How do I sync data
that I create in Onshape with my ERP or PLM system?”. There could be
many reasons why you would want to sync data between two different
systems. Primarily Onshape is a system that creates new data. This data
is created by designers as they perform their daily tasks. While the
designer works primarily in Onshape, the actual data that they create
does not exist in a vacuum, it is used by other departments, other
processes within the organization. These departments and processes
probably do not have access to Onshape or the required knowledge of how
to use Onshape. In addition, quite often, the data generated by Onshape
will be augmented with additional data as the product lifecycle process
progresses.&lt;/p>
&lt;p>Therefore, Onshape could be considered the genesis of the data that will
be used to develop a product, yet it is not the only data that will be
required.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>In this business case we examine how a designer could work in Onshape
and how the data generated by Onshape can be used to make decisions in
other systems. Based upon the decisions made, data is pushed back to
Onshape as values calculated in another system. Let’s look at the
process in much more detail.&lt;/p>
&lt;h3 id="step-1-define-properties-in-onshape">Step 1: Define Properties in Onshape&lt;/h3>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage31.png"
style="width:5.41667in;height:1.84722in"
alt="Diagram Description automatically generated" />&lt;/p>
&lt;ol>
&lt;li>
&lt;p>In the first step, the designer starts a new part in Onshape –
remember that in Onshape a Part can be created along with other
parts in a Part Studio, so we can assume that there could be
multiple parts created in the single document. Obviously, we want
the designer to have the freedom to use all Onshape functionality
without constraints placed by the demands of the integration.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>At some point in the design process, the designer will be required
to enter property values for the part – these could include values
such as the Part Name, the description, material and so on.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The designer clicks the “Save” or “Apply” button for the properties
and closes the properties window.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A web hook that listens to any changes in the properties has been
defined. As the user saves the properties, the web hook is
triggered, and it will send a notification through the defined web
hook to the third-party system.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage6.png"
style="width:0.47222in;height:0.47222in" />Note: There are Part
properties, workspace properties and document properties – all these
properties live at different levels of the document. While the trigger
could pick up changes to any to these properties, we are currently
focused on just Part properties – the event will be triggered on any
saving of properties, however our third-party code can ignore anything
that’s not a Part (or an Assembly). In this next step we assume that a
new object is being created in the third-party application.&lt;/p>
&lt;h3 id="step-2-create-corresponding-object">Step 2: Create Corresponding Object&lt;/h3>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage32.png"
style="width:5.16667in;height:2.13889in"
alt="Diagram Description automatically generated" />&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Once the designer made changes to the properties in Onshape and
saved those changes, a message is sent to our third-party
application. This message is in JSON format and contains minimal
information such as the Workspace ID, the Document ID, the Element
ID, the Part ID (if it’s a Part) and information regarding the event
that was triggered. The third-party application receives this
information to an endpoint that was defined during the setup of the
web hook.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The code in our application can now use the ID’s sent over to check
if an object with corresponding IDs exists in our system. Here we
are assuming that no such object exists. This does mean that we must
store Onshape IDs into our objects in the third-party system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We then create a new object and populate the ID information and save
it to the database. Note that at this point in time, we only have
minimal information that provides no more than the identity of the
Onshape Part.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next, in order to get the complete metadata, we must make a REST API
call to Onshape in order to get the metadata for the part. Since we
were provided the ID information in the web hook, we have enough
information to go back to Onshape and request the metadata for a
specific, document, element, workspace and part.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage6.png"
style="width:0.47222in;height:0.47222in" />Note that you can either
store the Onshape IDs in separate fields in your database or as one long
unique string which can be used to easily identify the part in your
application.&lt;/p>
&lt;h3 id="step-3-get-onshape-metadata">Step 3: Get Onshape Metadata&lt;/h3>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage33.png"
style="width:5.75in;height:2.04167in"
alt="Graphical user interface, text, application, chat or text message Description automatically generated" />&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The response from the call to the Onshape API is sent back as JSON.
The data will contain a lot of different objects that represent the
property values, their types, the IDs, name of the property, value
of the property, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once received this data must be parsed by your third-party
application code and the corresponding object updated as required.
For bi-directional update, it is important to store the Onshape
property IDs of any data that will need to be synced back to Onshape
from the third-party application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This is an optional stage. Once you have all the metadata values
imported, you could now calculate any values that are based off the
metadata. The most common use case scenario is the generation of
intelligent part numbers. Based off configuration, part type, etc.,
you could generate a part number that has specific meaning within
the context of the company.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you calculated specific values, you can now store them in your
database.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="step-4-modify-properties-in-onshape">Step 4: Modify Properties in Onshape&lt;/h3>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage34.png"
style="width:5.04167in;height:3.97222in"
alt="Diagram Description automatically generated" />&lt;/p>
&lt;ol>
&lt;li>
&lt;p>As in Step 1 the designer updates the properties in Onshape – this
is obviously something that can happen multiple times&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The web hook is triggered when the designer saves the property
changes&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Our third-party application is listening for property changes&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The third-party application’s code will check if the corresponding
object exists based off the IDs sent from Onshape.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In this scenario the corresponding object has already been saved in
our system&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We make a REST API call to Onshape to get the metadata based off the
IDs sent from Onshape.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Onshape returns the JSON that represents the updated properties&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We ingest the updated metadata and update our existing object in the
third-party system.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="step-5-request-part-number">Step 5: Request Part Number&lt;/h3>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage35.png"
style="width:5.76389in;height:2.13889in"
alt="Graphical user interface, text, application, chat or text message Description automatically generated" />&lt;/p>
&lt;ol>
&lt;li>
&lt;p>As we will see later, Onshape has the built in capability to pull
custom part numbers from a third-party system. From either the
properties window or the release candidate window, click the button
to request a part number&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Onshape sends basic ID information to a predefined endpoint in our
third-party app.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The ID information sent by Onshape is enough data to find the
corresponding object in our database. We then extract from that
object the pre-calculated intelligent part number – or we can
calculate it at this point.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The part number is returned to Onshape and populated in the Part
Number field&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage6.png"
style="width:0.47222in;height:0.47222in" />Note that in order to pull a
part number from a third-party application we will need to implement
OAuth2 in our application and grant Onshape access to the resources of
our application. Onshape has a very good mechanism for achieving this
and we will be explaining this in detail in this section.&lt;/p>
&lt;p>Note that by default Onshape uses its own internal Part number
generator, in order to use a custom third-party generator, we will need
to define an app extension and then define in the Enterprise release
settings to use our custom part number generator.&lt;/p>
&lt;h3 id="step-6-push-updates-from-third-party-application">Step 6: Push Updates from Third-Party Application&lt;/h3>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage36.png"
style="width:5.75in;height:2.45833in"
alt="Graphical user interface, text, application, chat or text message Description automatically generated" />&lt;/p>
&lt;ol>
&lt;li>
&lt;p>In this scenario we are updating an Object in our third-party
application and expecting that some of the property values will be
updated in Onshape. We can either send over all the properties
populated for this object, or a subset of properties and values&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The REST API to update properties in Onshape requires that we
reference the IDs of the properties that we are updating. For this
reason we have stored the Onshape property IDs with our metadata
object in our database.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We construct the correct JSON that contains all the properties to
update and the new values. We can then call the Onshape REST API to
update the properties in Onshape with the new data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once successfully completed, the Onshape REST API call will return
HTTP 200 and we can notify the user if needed.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage6.png"
style="width:0.47222in;height:0.47222in" />Note that updates to Onshape
will happen behind the scenes in real-time, therefore someone working on
the document in Onshape will be able to see the updates as soon as they
have been made. There is no notification in Onshape that notifies the
user that properties have been updated, however you can open the
properties window and view the updated data.&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>We’ll start by defining an &lt;a href="https://onshape-public.github.io/docs/app-dev/extensions">App Extension&lt;/a> in Onshape so that we can
receive custom part numbers.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage4.png"
style="width:0.43056in;height:0.43056in" />&lt;/p>
&lt;h3 id="debug">Debug&lt;/h3>
&lt;p>All Browsers now have developer tools exposed in their interface. These
tools provide us ways to debug client code, view console messages and
most importantly for our use case, view Network requests and their
response.&lt;/p>
&lt;p>In this example I am using Chrome’s developer tools. Most other Browsers
have more or less copied Chrome’s layout for the developer tools so it
should be easy to find the network section.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage39.png"
style="width:5.36972in;height:4.16096in"
alt="Graphical user interface, text, application Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977895" class="anchor">&lt;/span>Figure 24 Accessing
Chrome&amp;rsquo;s Developer Tools&lt;/p>
&lt;p>Let’s take the simple use case of trying to understand which endpoint
Onshape uses for saving Metadata.&lt;/p>
&lt;p>Open a document in Onshape and define some properties – don’t save yet.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage40.png"
style="width:3.42406in;height:2.25966in"
alt="Graphical user interface, text, application, email Description automatically generated" />&lt;/p>
&lt;p>Prior to saving open the developer tools and click on the “Network” tab.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage41.png" style="width:6.5in;height:2.37014in"
alt="Table Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977896" class="anchor">&lt;/span>Figure 25 Developer Tools
Network Tab&lt;/p>
&lt;p>Next save the updated properties by clicking either the Apply Button or
the Save Button&lt;/p>
&lt;p>In the Network tab you will see a new web request – select it:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage42.png"
style="width:5.40656in;height:2.82458in"
alt="Graphical user interface, text, application Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977897" class="anchor">&lt;/span>Figure 26 Network Request
Sample&lt;/p>
&lt;p>What we are seeing here is the response from the call to Save the
properties. We can expand this response to view the complete JSON.&lt;/p>
&lt;p>By clicking on the Headers we can view the actual request:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage43.png"
style="width:5.125in;height:2.47222in"
alt="Graphical user interface, text, application Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977898" class="anchor">&lt;/span>Figure 27 HTTP POST
Request for Saving Properties&lt;/p>
&lt;p>Here we can see that this will correspond to the APIs listed in the API Explorer.&lt;/p>
&lt;p>Most importantly the “Payload” tab is our definition of the body of the
request. This is provided in JSON format and can be expanded. As shown
here:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage44.png"
style="width:4.90769in;height:2.94205in"
alt="Graphical user interface, text, application Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977899" class="anchor">&lt;/span>Figure 28 HTTP POST Body&lt;/p>
&lt;p>We now have the correct API call and the format of the body to
successfully make the API call. We can also see from the body that if we
wish to update properties in Onshape from our third-party application,
we need to store the propertyID value.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage4.png"
style="width:0.43056in;height:0.43056in" />It is important to mention –
ALWAYS use cad.onshape.com to make API calls (no matter what you see in
the Headers tab or is shown in the Payload tab.&lt;/p>
&lt;h3 id="define-an-application-extension">Define an Application Extension&lt;/h3>
&lt;p>An application extension is how Onshape embeds third-party application
features in its UI. There are two types of extension:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>An extension that embeds its UI from the application into the
Onshape UI in an iFrame. Such a application my call Onshape REST
APIs or just expose an application interface inside Onshape.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An extension that embeds and that calls a REST API exposed by the
application from the Onshape UI. For instance, embedding application
functionality in the context menus or toolbars. This type of
application extension relies on external OAuth information in order
to authenticate the call. In this case Onshape acts as the client
and the application as the server.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Each extension will exist at a specific location in the Onshape UI and
will work within the context of that location or a specific selection,
passing the relative information to the application.&lt;/p>
&lt;p>In order to define the Application Extension we return to the
development portal at &lt;a href="https://dev-portal.onshape.com/oauthApps">https://dev-portal.onshape.com/oauthApps&lt;/a> where
we initially defined our OAuth Application.&lt;/p>
&lt;p>Select the OAuth Application that you previously defined and click on
the Extensions tab.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage45.png" style="width:6.5in;height:3.37917in"
alt="Graphical user interface, text, application, Teams Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977900" class="anchor">&lt;/span>Figure 29 - Oauth
Applications - Extensions&lt;/p>
&lt;p>Start by clicking the “Add Extensions button.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage6.png"
style="width:0.47222in;height:0.47222in" />Note that you can create as
many extensions as you need for your application within the Onshape UI.&lt;/p>
&lt;p>This is the interface where you define where in the Onshape UI the
command will appear, and what endpoint in your application the command
will reference. Changing the Location dropdown will provide additional
fields that can be defined to specify context and other relevant fields.&lt;/p>
&lt;p>For our use case, Define a name, i.e. “Custom Part Number Generator”,
define a description of the extension and select “Part Number Generator”
from the Location dropdown. The only other field that you need to define
is the Action URL. This is the endpoint in your application where you
will fetch the part number from.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage46.png" style="width:4.125in;height:4.125in"
alt="Graphical user interface, text, application, email Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977901" class="anchor">&lt;/span>Figure 30 - Define
Application Extension&lt;/p>
&lt;p>Once you save the definition you will see it in the list of extensions.
You can always come back and edit the definition of the extension.&lt;/p>
&lt;h3 id="grant-onshape-access-to-3suprdsup-party-data">Grant Onshape Access to 3&lt;sup>rd&lt;/sup> Party Data&lt;/h3>
&lt;p>If you require Onshape to access the resources of your application, then
you will need to define the external OAuth parameters. In our use case
we will need Onshape to access data in our application in order to pull
the part numbers into Onshape.&lt;/p>
&lt;p>Click on the External OAuth tab, the final tab on the OAuth Applications
page.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage47.png" style="width:6.5in;height:3.27361in"
alt="Graphical user interface, text, application, email Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977902" class="anchor">&lt;/span>Figure 31 - Define
External OAuth&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage4.png"
style="width:0.43056in;height:0.43056in" />In this guide we’re not
detailing the implementation of OAuth2 inside your application, this is
explained very well in many on-line guides. My favorite of these can be
found at:
&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2">https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2&lt;/a>&lt;/p>
&lt;p>Onshape provides the fields that are required for it to make a secure
request to your application, receive an access Token and refresh it when
required. In this case Onshape acts as the client and your application
as the server – this is the inverse to what we defined when we enabled
the third-party application to access Onshape.&lt;/p>
&lt;p>Once you have defined the fields, Save/Update the definitions. We have
now completed defining the application extension and enabling Onshape to
access your applications resources.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage6.png"
style="width:0.47222in;height:0.47222in" />Note if you haven’t defined
all the endpoints at this time, you can come back later and update the
information once you have it defined in your application.&lt;/p>
&lt;p>The last thing we need to do is for the user to grant access for Onshape
to access your applications resources. We can do this through the same
interface that we used to grant access to Onshape.&lt;/p>
&lt;p>From inside Onshape go to your account settings, from the top right
dropdown menu. Click on the applications page.&lt;/p>
&lt;p>For applications that have an application extension and External OAuth
defined we have the “Grant” button available in the “external Access”
column as shown here:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage48.png" style="width:6.5in;height:2.87083in"
alt="Graphical user interface, text, application, email Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977903" class="anchor">&lt;/span>Figure 32 - Grant
External Access&lt;/p>
&lt;p>Click the “Grant” Button in the External Access column.&lt;/p>
&lt;p>Your third-party application will present the user with option to
authorize access to the application – similar to this simple interface:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage49.png"
style="width:4.25285in;height:1.71051in"
alt="Graphical user interface, text Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977904" class="anchor">&lt;/span>Figure 33 - Enabling
Onshape to access a 3rd parties data&lt;/p>
&lt;p>If you click “Allow”, you will be returned to Onshapes Applications page
and external access will be granted.&lt;/p>
&lt;h3 id="defining-webhooks">Defining Webhooks&lt;/h3>
&lt;p>Now that we’ve defined our application extension and OAuth access to our
application, we can start on receiving notifications in our application
when events happen in Onshape.&lt;/p>
&lt;p>Onshape supports webhook notification for many different types of
events. We will register an endpoint in our application that will
receive a notification whenever something occurs in Onshape. In our
specific scenario this will be when the user updates the Onshape
properties – as we defined in &lt;strong>Step 1 Define Properties in Onshape&lt;/strong>:&lt;/p>
&lt;p>For our purposes we will be registering to receive web hook
notifications for the onshape.model.lifecycle.metadata event. When
registering for an event in Onshape there are only two pieces of
information required:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The event (onshape.model.lifecycle.metadata)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Enterprise ID&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>To easily find your enterprise ID, in Onshape select the Enterprise
Settings option from the top right dropdown menu and then click on the
“Details” menu option on the left-hand menu bar.&lt;/p>
&lt;p>You will see your Enterprise ID and a “Copy to Clipboard” button next to
it. This will enable you to directly copy this unique ID into your code.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage50.png"
style="width:3.0006in;height:2.70759in"
alt="Graphical user interface, application Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977905" class="anchor">&lt;/span>Figure 34 - Finding Your
Enterprise ID&lt;/p>
&lt;p>The following code shows how we can register a webhook in Onshape.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage51.emf" alt="">In this example I’ve hard-coded a few of
the values for clarity, however this method could be re-written to be a
generic model for registering various webhooks. Some good examples of
registering for webhooks exist at &lt;a href="https://github.com/onshape-public">https://github.com/onshape-public&lt;/a>.&lt;/p>
&lt;p>As with other calls to Onshape that we’ve seen, we are passing the
accessToken in the header in order to establish a secure call to
Onshape’s resources.&lt;/p>
&lt;p>The information coming back from the registration call will be similar
to the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;timestamp&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;2014-12-16T23:45:10.611-0500&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;event&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;webhook.register&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;workspaceId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;000000000000000000000000&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;elementId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;000000000000000000000000&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;webhookId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;544e91f7fb88ed44f5de1508&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;messageId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;34795d2e5f5f44eeb61fb7b1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;data&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;Some data&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;documentId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;000000000000000000000000&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;versionId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;000000000000000000000000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In our example we are saving the event
(onshape.model.lifecycle.metadata) and the returned webhookId to a
database in order that we can later ping it to make sure that it is
live.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage4.png"
style="width:0.43056in;height:0.43056in" />Following the registration of
the webhook, Onshape will attempt to make a call to the Notify URL
defined in the body of the registration request. This is the endpoint of
your application that should be called when the event is fired in
Onshape. The most common reason for registration failures is that the
endpoint you defined, does not return an HTTP 200 status code.
Therefore, even if you registered for an event and received a
registration notification and a webhookId back from Onshape, your web
hook is not in fact registered until Onshape validates the notify URL
and receives the HTTP 200 notification back from it. Unfortunately there
is no way to easily know if your web hook has been successfully
registered until you either ping it, request to list it, or try to
activate the event through Onshape.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage4.png"
style="width:0.43056in;height:0.43056in" />Also it is important to know
that even when your webhook is registered successfully, if you change
your code later on and Onshape fails to receive an HTTP 200 status code
back from the notify URL, the web hook will be removed.&lt;/p>
&lt;p>One of the ways we can validate that a webhook is “live” is by pinging
it using the Onshape REST API. The following code shows the
implementation of a ping to the webhook. If an HTTP status code of 200
is returned, we know that the webhook is enabled, if not then we can
re-register the webhook as needed.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage6.png"
style="width:0.47222in;height:0.47222in" />&lt;img src="https://onshape-public.github.io/images/integrationguideimage52.emf" alt="">Once
we store the webhook ID in the database we can ping the webhook whenever
the application is loaded and validate that it’s still registered. If we
need to re-register the webhook (usually only occurs when changes are
made to the code in the notify URL), we can create a new webhook
registration and update the database record.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage4.png"
style="width:0.43056in;height:0.43056in" />Note that you can create many
duplicate webhook registrations for the same event with the exact same
notify URL. Onshape doesn’t limit how many registrations are created for
a single webhook. In the event that this happens, the notify URL will be
called as many times as there are webhooks registered for that event.
You can validate the registered webhooks by calling the
&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Webhook">Webhook API&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage6.png"
style="width:0.47222in;height:0.47222in" />Use
&lt;a href="https://cad.onshape.com/glassworks">https://cad.onshape.com/glassworks&lt;/a> to call APIs and validate the
requirements for each REST API call. This interface lists all the
available Onshape REST APIs and provides examples of the values returned
from each call.&lt;/p>
&lt;h3 id="receiving-webhook-notifications">Receiving Webhook Notifications&lt;/h3>
&lt;p>Once your webhook is registered and confirmed to be working you should
be getting a notification from the webhook to your notify URL. The
notification should be similar to the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;timestamp&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;2014-12-16T23:46:29.284-0500&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;event&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;onshape.document.lifecycle.metadata&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;workspaceId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;000000000000000000000000&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;elementId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;000000000000000000000000&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;webhookId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;544e91f7fb88ed44f5de1508&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;messageId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;60f54ac1cbc04179a6642d9a&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;data&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;Some data&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;documentId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;0f9c4392e5934f30b48ab645&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;versionId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;000000000000000000000000&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;documentState&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;IN PROGRESS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In your case the workspaceId, elementID, documentID, and PartId should
be populated with the values from the Onshape document that was open
when the properties were updated.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage4.png"
style="width:0.43056in;height:0.43056in" />It is important to note that
there is currently no OAuth validation on the webhook response,
therefore the endpoint in your application will not receive any access
token data for directly calling Onshape APIs. Therefore, if you need to
make a call to the Onshape REST APIs inside the notify URL endpoint make
a call to an endpoint in your application and include your application
OAuth credentials in the body of the request. In this way, you can make
a call to your application and load the passport and the Onshape
credentials.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage4.png"
style="width:0.43056in;height:0.43056in" />Onshape takes security very
seriously and for this reason, unauthenticated calls only provide
minimal details such aa, in this case, id’s.&lt;/p>
&lt;h3 id="getting-onshape-properties">Getting Onshape Properties&lt;/h3>
&lt;p>In our specific use case, when we received the webhook notification, we
want to use the ID data provided to find the corresponding object in our
database (or create a new one) as shown in Step 2 Create Corresponding
Object: Then we make a call to the Onshape REST API:
/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/{iden}/{pid}&lt;/p>
&lt;p>All the relevant data is provided in the response from the webhook so we
can pass this to the method which will call this API as follows:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage53.emf" alt="">From this call I am returning the
“properties” part of the JSON – this contains all the metadata
definitions that I wish to store in my database and associate with the
corresponding object. The following is an example of one of the property
objects:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage54.emf" alt="">&lt;/p>
&lt;p>In fact there is probably only three key pairs that we’re interested in
here:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Name – name of the property. In this case “Name”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Value – the value of the property. In this case “Top Plate”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>propertyId – the ID of this property. We might need this if we want
to enable a bi-directional sync between both applications.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage4.png"
style="width:0.43056in;height:0.43056in" />Note that for valueType
CATEGORY the actual name, value and id will be embedded deeper in the
object inside an array. I suggest copying and pasting the output from
the API call into a JSON viewer such as &lt;a href="http://jsonviewer.stack.hu/">http://jsonviewer.stack.hu/&lt;/a> so
that it will be easier to find where the correct values are.&lt;/p>
&lt;p>We can now update our corresponding object with the Onshape metadata
values as described in Step 3 Get Onshape Metadata:&lt;/p>
&lt;h3 id="updating-onshape">Updating Onshape&lt;/h3>
&lt;p>So far we have pulled data from Onshape and populated it into our
third-party application, however what if we make updates in our
application that we want to propagate back to Onshape? This is certainly
possible through Onshape’s REST API. Usually this would be implemented
in your application on the click of a button – such as “Save”, if you
have multiple properties to update, or when a property is updated if you
want to trigger the sync for the update of a specific field.&lt;/p>
&lt;p>Either way it is fairly straight forward to send the REST API call to
Onshape to update properties. The following snippet of code shows how
the call can be made:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage55.emf" alt="">As we can see here, we provide the body in
the form of JSON that includes an array of items (in this case one item)
and a nested array of properties (two property objects are listed here).
Each property has a value and an ID of the property in Onshape to
update.&lt;/p>
&lt;p>The response from this API call should be an HTTP 200 status. If this is
the case, we can update the user that the sync was successful.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage6.png"
style="width:0.47222in;height:0.47222in" />If you know that you want to
update Onshape with property values from your application, it will be
important to build a data model that can store the properties with the
unique ID provided by Onshape.&lt;/p>
&lt;h3 id="implementing-custom-part-numbers">Implementing Custom Part Numbers&lt;/h3>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage56.png"
style="width:2.95556in;height:2.94924in" />&lt;/p>
&lt;p>The final step in this
business case is to pull the part numbers form our third-party
application. The part numbers can be calculated based on metadata values
that were previously synced from Onshape or they might be numbers being
pulled from yet another system – such as an ERP or even a Google
Spreadsheet. The important thing is that when the user clicks a button
in Onshape, the correct Part Numbers get populated.&lt;/p>
&lt;p>To first understand how the setup for pulling part numbers from a
third-party application we need to go back to the definition of our
Application Extension in the Onshape developer’s portal.&lt;/p>
&lt;p>Here we can see that we gave the application extension a name, defined
the location as “Part Number Generator” and defined the “Action URL” –
this is the endpoint in our application where we will fetch the part
number from.&lt;/p>
&lt;p>Once we have the application extension defined as Location = Part Number
Generator, you will be able to use this option inside Onshape Release
Management settings.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage4.png"
style="width:0.43056in;height:0.43056in" />Note that in order to use the
Part Number Generator option you will have to define the External OAuth
option and grant Onshape access to the resources of your application.
This is because Onshape will need to access the defined endpoint in
order to pull the part number from the application&lt;/p>
&lt;p>From within Onshape Select the “Enterprise Settings” from the top right
dropdown menu. Navigate to the “Release Management” settings and scroll
down to the “Revisions and part numbers” section of the page.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage57.png"
style="width:4.05994in;height:3.27831in"
alt="Graphical user interface, text, application, email Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977907" class="anchor">&lt;/span>Figure 36 - Revisions and
Part Number Settings&lt;/p>
&lt;p>In the Part Number Generation dropdown select the “Custom Part Number
Generator”. Note that this is the name that you defined in your
Application Extension so it might differ from what’s shown here.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage58.png"
style="width:2.73732in;height:2.03131in"
alt="Graphical user interface, text, application Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977908" class="anchor">&lt;/span>Figure 37 - Selecting
Custom Part Number Generator&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage6.png"
style="width:0.47222in;height:0.47222in" />Finally scroll to the bottom
of the page and save the settings.&lt;/p>
&lt;p>Note that you will need the Admin role in order to access the enterprise
settings.&lt;/p>
&lt;h3 id="implementing-part-number-code">Implementing Part Number Code&lt;/h3>
&lt;p>Onshape will send a message to the endpoint defined in your application
extension settings. The content of this message will be an array of the
following data.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage59.emf" alt="">There might be one or more object depending
upon where the user initiated the call for part numbers from. For
instance, if the call was initiated from the Part properties window,
there will only be one object, however if initiated from the release
candidate window, multiple parts/assemblies and drawings might be
requested in the single call. Therefore, your code should be able to
handle these two situations.&lt;/p>
&lt;p>Onshape will expect a response back from your endpoint and it should be
formatted in the following manner:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage60.emf" alt="">Note that in fact only the id and
partNumber fields are actually required – the other fields are optional.&lt;/p>
&lt;p>The following is an implementation of the getNextPartNumber endpoint
that was defined in the application extension “Action URL” field:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage61.emf" alt="">This in turn calls a function that pulls
the next part number from the corresponding object in the database (this
was defined in, Step 5: Request Part Number). In this function I’m
defining the object that will be sent to Onshape with the part number.
This will be called multiple times depending how many objects were sent
from Onshape.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage62.emf" alt="">In this case I’m sending back all the data
required by Onshape, however it would be enough to just populate the id
and the partNumber.&lt;/p>
&lt;p>Once you load the Part Properties window or the Release candidate
window, you can now request the Next Part number. The part number will
be pulled from the third-party application and populated in the relevant
fields as shown below.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage63.png"
style="width:4.59649in;height:3.80143in"
alt="Graphical user interface, application Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977909" class="anchor">&lt;/span>Figure 38 - Release
Candidate Part Number generation&lt;/p></description></item><item><title>Docs: Sync Releases and Revisions</title><link>https://onshape-public.github.io/docs/tutorials/releases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/tutorials/releases/</guid><description>
&lt;p>This tutorials builds off the &lt;a href="https://onshape-public.github.io/docs/tutorials/sync">Sync Data and Metadata&lt;/a> tutorial. Please complete that one before starting on this one.&lt;/p>
&lt;p>In this case, we’ll be looking at the ability for Onshape to sync its
release data with an external system and for that system to send
information back to Onshape with regards to released data.&lt;/p>
&lt;p>This specific business case will look at what happens when you wish for
a PLM system to control the release of data instead of Onshape having
that control – this is in fact a common use case.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage64.png"
style="width:3.21077in;height:2.56522in" />&lt;/p>
&lt;p>We have mentioned before that
Onshape has the ability to release data – it is totally integrated to
Onshape since there is no division between CAD capabilities and PDM
capabilities in Onshape – they are all part of the same solution. See
Versions and Releases for more information on how Onshape manages
releases. There is importance in releasing data through Onshape. Onshape
uses visual cues to show which parts are released in an assembly for
instance and which parts might have a newer revision. Onshape can also
add/remove watermarks to drawings and update the title block depending
on release states. Also, the BOM table can pull a parts release data and
display it. All this is dependent upon a release process being completed
in Onshape.&lt;/p>
&lt;p>Many organizations have implemented Product Lifecycle management systems
(PLM). One of the key benefits of a PLM system is that it manages more
than just engineering data originating from the engineering department,
it deals with all the data related to the product – from concept through
retirement. Therefore, it is a system that is used by many groups and
departments throughout the organization.&lt;/p>
&lt;p>Often, in release processes or Engineering Change processes, additional
input and approvals are required from various departments downstream
from engineering. PLM systems are very good at routing the data for
approval to users from multiple departments and groups throughout the
organization. Onshape, on the other hand, is very focused on the
engineering department and the data generated there. While it certainly
has the capabilities to bring other groups into approval processes, it
is not considered a process centric enterprise-wide system with the
capabilities of a PLM system.&lt;/p>
&lt;p>Many companies will have well established processes that have been
modeled in their PLM system, it is much easier for us to integrate into
those processes than reinvent the wheel in Onshape.&lt;/p>
&lt;p>This section looks at how we might have the best of both worlds,
initiate release processes in Onshape and update our Onshape visual cues
as well as have the PLM system manage the actual approvals and release.&lt;/p>
&lt;p>This section uses concepts such as OAuth and web hooks that we have
introduced in detail in previous sections, therefore feel free to
reference those sections for more information on these topics.&lt;/p>
&lt;h3 id="step-1-initiate-release">Step 1: Initiate Release&lt;/h3>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage65.png"
style="width:4.88889in;height:2.02778in"
alt="Application Description automatically generated" />&lt;/p>
&lt;p>In this first step we are using Onshape’s out-of-the-box capabilities to
initiate a release candidate – just as we would if we were releasing
natively in Onshape.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>We start by initiating the release on all the data that is required.
In this step you should use a custom workflow that simply has one
approval node.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Define the mandatory and any other release properties in the release
candidate window. &lt;img src="https://onshape-public.github.io/images/integrationguideimage66.png"
style="width:4.70609in;height:3.12281in"
alt="Graphical user interface, text, application, email Description automatically generated" />&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;span id="_Toc102977911" class="anchor">&lt;/span>Figure 40 - Initiating a
release candidate&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>Since an approver is required, we must provide a fictious
user/approver that has been defined in the system – this could be
named “Release Approver” for instance. The process will be sent to
this approver even though they are not a real person and will not be
able to approve the release. Instead, our release process will be
approved by an external source.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Finally, when everything is defined, submit the release. The window
will close. Since the release is pending approval, the parts
involved in the release will enter the state of “Pending” as shown
here:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage67.png"
style="width:4.40131in;height:2.9375in"
alt="Graphical user interface, text, application Description automatically generated" />&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;span id="_Toc102977912" class="anchor">&lt;/span>Figure 41 - Pending
Release&lt;/p>
&lt;p>They will remain in this state until the release has been completed.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage68.png"
style="width:2.71208in;height:1.52174in" />&lt;/p>
&lt;p>It is important to note that
unlike traditional PDM systems where the files are locked for change
until the release is completed or rejected, Onshape does not lock the
files. As mentioned previously, Onshape views the releases as a point in
time. As far as Onshape is concerned, time moves forward, parts can
change and at a specific point in time, the parts are in a state of
pending. It is important to mention that this does in fact prevent
another release from being initiated on the parts until the previous
release has been completed.&lt;/p>
&lt;h3 id="step-2-initiate-release-process-in-3suprdsup-party-app">Step 2: Initiate Release Process in 3&lt;sup>rd&lt;/sup> Party App&lt;/h3>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage69.png"
style="width:5.34722in;height:3.34722in"
alt="Diagram Description automatically generated" />&lt;/p>
&lt;p>Once the user initiates the release candidate and the parts transition
to the “pending” state we can register for a webhook that will notify
our third-party application that the parts have changed state.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Once the parts enter the workflow, the onshape.workflow.transition
webhook will be triggered.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Our third-party application should be listening for this event along
with other data, we are provided with the objectId of the release
package – this is all the data associated with the parts that are to
be released. The response also contains the objectType and the
transitionName; for our use case we will only concern ourselves with
requests that have an objectType of “Release” and a transitionName
of “Submit”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using the ObjectId we make an API call to onshape;
/api/releasepackages/&amp;lt;releasePackageId&amp;gt;?detailed=true&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This API call will return to us a JSON response containing all
assemblies and parts in the release package. The following
information should be extracted from the release package:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>For each line item (assembly or part) extract the documentId,
the elementId, elementType, versionId and PartId&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Iterate through the top level properties and record the
propertyId for property with the name “comment” – this will be
used to update the release comments later on.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Now that we have the relevant IDs we can update the state of our
corresponding objects in the third party system and record any
additional data such as the release comment field.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Finally, we can kick off our official release process in the
third-party application. This could be an automated process or a
manual one.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="step-3-complete-release-process">Step 3: Complete Release Process&lt;/h3>
&lt;p>The release process continues in the third-party application until
approvals have been received by all required actors. Meanwhile in
Onshape the parts are in the pending state. In this step we close the
loop once the release process is completed.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage70.png"
style="width:5.375in;height:3.34722in"
alt="Graphical user interface, text, application Description automatically generated" />&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The release process managed by the third-party application is
completed and the data in that system is released.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once this happens, we make a call to the Onshape API;
/api/releasepackages/&amp;lt;releasePackageId&amp;gt; the releasePackageId is
the ID we were provided with at the start of this process – While
there are different ways of implementing this, I tend to store the
ID and any other data related to the release in a custom “release
Object” in my database so I can retrieve and update the release as
required. In addition to the passing the release package ID, in the
body of the request we should pass the id of the release comment and
a value for the comment. This will update the release in Onshape
with any relevant data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Onshape releases the data that was included in the release candidate
and that completes the workflow process.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Onshape will return a status code that indicates success or failure&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Finally we can optionally update the corresponding object to
indicate that it is in sync with the Onshape data.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>In the event that the release process is rejected at anytime, we can
send the releasePackages API request to Onshape with a REJECT workflow
Action argument. This will cause Onshape to reject the workflow and the
state of the parts at the specific release point in time, will be set to
“Rejected”.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage71.png"
style="width:4.69737in;height:3.12807in"
alt="Graphical user interface, application Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977914" class="anchor">&lt;/span>Figure 43 - release
candidate rejected&lt;/p>
&lt;p>Since our timeline is moving forward this has no actual effect on the
parts other than to cancel the pending release and enable them to be
released at another future point in time.&lt;/p>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>In this section we will take a closer look at how to implement the
release scenario in our code. The first thing we need to do is define
the correct web hook to listen for the initiation of the release – this
means that once the user clicks the submit button on the release
candidate dialog, this web hook will be triggered.&lt;/p>
&lt;h3 id="set-up-webhook">Set Up Webhook&lt;/h3>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage72.emf" alt="">&lt;/p>
&lt;p>This code is very similar to what we defined previously for the metadata
update, instead here we are defining a hook for the
onshape.workflow.transition hook. As with other code examples that
require authentication, we have included error handling in order to
refresh that access token in the event that it has expired.&lt;/p>
&lt;p>The onshape.workflow.transition will in fact fire whenever a revision or
release package transitions through different workflow states. In his
specific case we are only interested in catching the event when the
workflow is initially submitted. This can be filtered by the information
sent to the return URL, in this case
&lt;a href="https://myserver.com/api/getReleaseData">https://myserver.com/api/getReleaseData&lt;/a>&lt;/p>
&lt;p>In this implementation we are storing he webhook ID in the database so
that we can ping it when the application is loaded to make sure that it
is still active. Other implementations delete the webhook after it is
used and then recreate it as required. There is no specific preference
for which methodology is better – that depend s upon the requirements of
your integration.&lt;/p>
&lt;h3 id="receive-web-hook-notifications">Receive Web Hook Notifications&lt;/h3>
&lt;p>Once the user who is initiating the release clicks the Submit button on
the Release Candidate dialog, the webhook will be triggered and a
message will be sent to the third-party application listening for that
webhook.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage66.png"
style="width:4.70609in;height:3.12281in"
alt="Graphical user interface, text, application, email Description automatically generated" />&lt;/p>
&lt;p>In our example the URL that the webhook data from Onshape gets sent to
is:&lt;/p>
&lt;p>&lt;a href="https://myserver.com/api/getReleaseData">https://myserver.com/api/getReleaseData&lt;/a>&lt;/p>
&lt;p>In our application we can define a router for that end point as follows:&lt;/p>
&lt;p>router.route(&amp;rsquo;/getReleaseData&amp;rsquo;).post(mymodule.getReleaseData);&lt;/p>
&lt;p>In this case “mymodule” is where I’ve defined all the functionality for
managing data coming from Onshape. Since the webhook data contains no
authentication information (just minimal data is sent from the webhoom
for security reasons), we can’t directly authenticate our application
against Onshape, therefore we need to pass the data received from the
webhook through a method that will then add the authentication data to
our request object. The getReleaseData method simply passes the webhook
information received by the application to another authenticated
endpoint as follows:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage73.emf" alt="">&lt;/p>
&lt;p>Here is the endpoint defined for processReleasePackage:&lt;/p>
&lt;p>router.route(&amp;rsquo;/processReleasePackage&amp;rsquo;).post(authController.isAuthenticated,
releaseController.processReleasePackage);&lt;/p>
&lt;p>As we can see here, we have now added in the authentication middleware -
authController.isAuthenticated - and can make secure calls to Onsahpe’s
API.&lt;/p>
&lt;h3 id="get-release-package-data">Get Release Package Data&lt;/h3>
&lt;p>The parameter that the web hook sent over to our application that we
need to make use of is the ID of the release package. We can now make a
call to Onshape to retrieve the complete release package with the ID.&lt;/p>
&lt;p>We get the release package ID from the request object and make the REST
API call to get the package as follows:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage74.emf" alt="">&lt;/p>
&lt;p>The complete release package should be returned in “response”. We can
now parse that data to retrieve the properties we need. The most
important properties will the IDs of the parts that we are going to
release – these should already be synced with our system – if not, we
can create them from the data in the release package.&lt;/p>
&lt;h3 id="save-release-package-data">Save Release Package Data&lt;/h3>
&lt;p>The next step is to save the properties of the release package to a
corresponding object in our database. We need at least the ID of the
release package so we can later release it automatically from the
third-party application. In this case I’m storing other properties that
came from the release candidate such as release name and description.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage75.emf" alt="">&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage76.png"
style="width:3.01875in;height:4.38889in" />&lt;/p>
&lt;p>Most of this code deals with
retrieving values from the release package and storing them as a new
release object in the database. Additional values are associated with
the part in the PLM system. In a typical production scenario this code
would interface with the PLMs workflow capabilities and possibly kick
off a release or change process in that system. For our basic example we
are storing values from Onshape with our items and setting a state on
the part so that users can see that the part is pending release and take
actions required.&lt;/p>
&lt;p>At this point in time, Onshape does not care that the part is pending a
release. The part in Onshape will remain in a pending state until it is
released by the PLM system. As noted previously, we used a user setup in
the system to specifically initiate the release, therefore no other
users will receive notifications from Onshape with regards to release
actions on this part.&lt;/p>
&lt;h3 id="complete-the-release">Complete the Release&lt;/h3>
&lt;p>Once the release or change workflow has completed in the PLM system and
all approvals have been received, the Part/Item will be in a released
state in the PLM system. However, we must now update Onshape with the
correct release status of the parts. It is important that Onshape data
is in sync with the corresponding data in the PLM system for reasons of
data integrity and the visual cues used within Onshape to identify a
part as released.&lt;/p>
&lt;p>In a typical scenario Onshape will be automatically updated once the
workflow completes in the PLM system. In our use case we are simplifying
the process by clicking a button to release the item. This will update
the state of the part in our system and send a REST API call to Onshape
to release the data in the release package (be it one part, an assembly
with multiple parts, or drawings).&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage77.emf" alt="">&lt;/p>
&lt;p>This code snippet updates the database with the released status of a
part. Since we stored data from the release package in our database we
now retrieve the “Comment” property so that we can send an updated value
to Onshape with the release.&lt;/p>
&lt;p>let attrid = rp.props.find(ob =&amp;gt; ob.name == &amp;ldquo;Comment&amp;rdquo;);&lt;/p>
&lt;p>The important line of code here is the REST API call to Onshape:&lt;/p>
&lt;p>&lt;strong>axios.post(&amp;lsquo;&lt;a href="https://cad.onshape.com/api/releasepackages/'">https://cad.onshape.com/api/releasepackages/'&lt;/a> + id +
&amp;lsquo;?wfaction=RELEASE&amp;rsquo;&lt;/strong>&lt;/p>
&lt;p>The id provided here is the ID of the release package that we stored
when the web hook was called at the beginning of the process. The
“wfaction” argument indicates that the workflow action in Onshape should
be to release the data associated with this release package.&lt;/p>
&lt;p>In this example we are also updating the release comments in Onshape,
for this reason we required the property ID of the Comment field – which
we also previously stored in our release object in the database.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage78.png" style="width:6.5in;height:4.25903in"
alt="Graphical user interface, text, application Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977916" class="anchor">&lt;/span>Figure 45 - Release
completed automatically in Onshape&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage79.png" style="width:6.5in;height:4.25625in"
alt="Graphical user interface, text, application, email Description automatically generated" />&lt;/p>
&lt;p>&lt;span id="_Toc102977917" class="anchor">&lt;/span>Figure 46 - Release
comments Updated from third-party system&lt;/p></description></item><item><title>Docs: Generate Derivative Files</title><link>https://onshape-public.github.io/docs/tutorials/derivative/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/tutorials/derivative/</guid><description>
&lt;p>This tutorials builds off the &lt;a href="https://onshape-public.github.io/docs/tutorials/releases">Sync Releases and Revisions&lt;/a> tutorial. Please complete that one before starting on this one.&lt;/p>
&lt;p>It’s clear by now that Onshape doesn’t use files to store its data,
instead it is a data driven solution that is always up to date. Files
are a snapshot in time that provide a view of the design at a specific
point in time - such as at a release or version. A new file is required
for each “snapshot” and managing these files can get quite cumbersome.
However, there are situations that require that files be generated from
the Onshape data.&lt;/p>
&lt;p>In general, we want files to be generated at defined points of time and
within the context of a business process – such as a release process.
The derived file could be a format such as a PDF of the drawing that is
generated following the successful release of the data. Also, a common
requirement is to generate STEP files or JT files that can be used in 3D
Printing or viewers embedded in PLM solutions. Regardless of the use
case Onshape has very good export capabilities for many different file
formats.&lt;/p>
&lt;p>This business case examines how to automatically generate files derived
from the Onshape data. The process described here can be plugged into
many different use cases. In this specific example we are plugging the
translation use case into the Release Business case just after the
release is completed in the third-party application and Onshape is
updated. Since we already have all the relevant ID information for the
parts to translate from the release package data, we can directly call
the translation APIs after receiving notification that the release was
successfully executed in Onshape.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage80.png"
style="width:5.5in;height:4.79167in" />&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Once we have received an HTTP 200 status from the call to Onshape to
release the release Package, we can proceed with the translation.
The reason why we may want to wait till the release has successfully
completed could be for several reasons:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>We are generating a PDF of the drawing and want the “In
Progress” watermark removed, and the title block updated with
release information&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We are generating files for 3D printing or for sending to a
vendor to manufacture and we only want to send released data&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>We can now make an API call to Onshape. In both the following cases
we must pass the document Id, the version Id and element Id – all
values that were available in the release package. Other values are
dependent upon your specific use case and can be referenced in
&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/createPartStudioTranslation">https://cad.onshape.com/glassworks/explorer/#/PartStudio/createPartStudioTranslation&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>For Assembly translation we can POST to :/api
/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/translations.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For Parts we can POST to:
/api/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/translations&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Three variables of importance are returned from the API call to
translate: requestState, id (of the translation) and
resultExternalDataIds. We should store or keep this data in memory
until the translation is completed. Depending upon the requestState
there might be additional data available in the response.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We can now periodically ping the translation web service with the id
retrieved in the last step. Using the GET call to
/api/translation/{id} we will receive one of three responses in the
requestState:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>DONE&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ACTIVE&lt;/p>
&lt;/li>
&lt;li>
&lt;p>FAILED&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Depending on the response we can either continue to periodically
ping the translation service if we received ACTIVE&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Notify the user of a failed translation attempt if we received a
FAILED response&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make a call to Onshape to GET the translated file if we received a
DONE response. To retrieve the translated file make a GET request to
/api/documents/d/{documentId}/externaldata/{externalDataId}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The file can now be stored in your third-party system or stored to
an external drive depending upon your specific use case.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>As use cases go, this is a very straightforward process. The only
complexity here is deciding how to receive the notification from Onshape
that the translation has completed. There are several ways of
implementing this including using a webhook to notify us when the
translation completes. In the examples here I will show both the webhook
methodology as well as pinging Onshape with a status request every
couple of seconds. The status request can be initiated from the client
through an AJAX call or, as in the example I use here, from the server.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage81.png"
style="width:3.3395in;height:3.66667in" /> In our example I have added a
button to the interface of my third-party system that enables me to
request a translated file. In this use case I have hard coded that the
resulting file should be a STEP file – in a production ready
implementation, we would expect that one or more formats are available
and possibly selected by the user. In addition, a production ready
implementation might have automated the translation for whenever a part
is released. Other considerations for automation might include
identifying what is being released. I.e. if it’s a part then translate
to STEP, if it’s a Drawing then translate to PDF, etc. These are all
very common use cases.&lt;/p>
&lt;h3 id="initiate-the-translation">Initiate the Translation&lt;/h3>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage82.emf" alt="">The code snippet shown here is fairly
straightforward. First it gets the ID of the part that was sent from the
client, it then uses that ID to retrieve the part from the database. The
part stored in our database already has all the required values to
successfully communicate with Onshape, such as the document ID, the
workspace ID and the element ID – all these values are used in the
translation request.&lt;/p>
&lt;p>In the body of the request we can see some of the required values that
define how the part is to be translated to STEP. In this case I have
only included the minimum required key pairs for this translation.&lt;/p>
&lt;p>The REST API call to translate an Onshape element returns an object that
includes the translationId – this is the value that will be used to ping
Onshape and request the status of the translation.&lt;/p>
&lt;h3 id="ping-onshape-for-translation">Ping Onshape for Translation&lt;/h3>
&lt;p>In this code snippet I have simplified things by including a function
that waits for a second and then pings Onshape again, It will continue
pinging Onshape until it receives back a status that is not “ACTIVE”.
Once the status returned is anything except “ACTIVE” it returns the
resulting object back to the client.&lt;/p>
&lt;p>The id used here is the translationId retrieved from the result object
when the translation was initiated.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage83.emf" alt="">&lt;/p>
&lt;p>Once the requestState is changed, this will indicate that the
translation has completed either with a FAIL or a DONE status. Depending
on the result we can define our logic on the client appropriately.&lt;/p>
&lt;p>The following shows the object returned to the client from the
translation REST API. Note that the requestState is now set to “DONE”,,
meaning that the translation has completed
successfully.&lt;img src="https://onshape-public.github.io/images/integrationguideimage84.png" style="width:6.5in;height:3.17986in"
alt="A picture containing timeline Description automatically generated" />&lt;/p>
&lt;p>With this data we can now request the file directly from Onshape. The ID
that we need to use to retrieve the file is the “resultExternalDataIds”.
Note that this is an array of values – since it makes sense that we
might be translating more than one part.&lt;/p>
&lt;h3 id="retrieve-translated-file">Retrieve Translated File&lt;/h3>
&lt;p>With the resultExternalDataIds we can now retrieve the translated file
from Onshape. The following code snippet does exactly this.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage85.emf" alt="">&lt;/p>
&lt;p>The Onshape REST API&lt;/p>
&lt;p>&lt;a href="https://cad.onshape.com/api/d/'">https://cad.onshape.com/api/d/'&lt;/a> + did + &amp;lsquo;/externaldata/&amp;rsquo; + id&lt;/p>
&lt;p>retrieves the translated file – in this case the ID is
resultExternalDataIds[0] value.&lt;/p>
&lt;p>Once this is completed, we use the response to save the file directly to
our server where the application is hosted. Finally, I’m sending a JSON
object to the client that provides a direct link to the file that is now
hosted on our server.&lt;/p>
&lt;p>The client can then request the translated file from our server, even
though this is a function of the server and not related to Onshape, I
have included a code snippet here that will send the file to the client.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage86.emf" alt="">&lt;/p>
&lt;p>In our sample implementation Once the translation has completed
successfully I display a link to the translated file that calls the
“getfile” endpoint shown above.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage87.png" style="width:6.5in;height:2.32917in"
alt="Graphical user interface, text, application, chat or text message Description automatically generated" />&lt;/p>
&lt;p>Clicking the link will cause the file to be downloaded as shown here.&lt;/p>
&lt;h3 id="define-translation-webhooks">Define Translation Webhooks&lt;/h3>
&lt;p>As we mentioned at the beginning of this section there is more than one
way to receive notification back from Onshape that the translation has
completed. We can also define a webhook that will notify us once the
translation completes. The drawback with this methodology is that the
webhook must be created for each translation and then deleted.&lt;/p>
&lt;p>A complete example of this can be found at:
&lt;a href="https://github.com/onshape-public/app-gltf-viewer/blob/main/services/webhook-service.js">https://github.com/onshape-public/app-gltf-viewer/blob/main/services/webhook-service.js&lt;/a>&lt;/p>
&lt;p>The following function is used in this application to define the
webhook:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage88.emf" alt="">&lt;/p>
&lt;p>The following line would call this function once the user requests to
initiate a translation.&lt;/p>
&lt;p>WebhookService.registerWebhook(req.user.accessToken,
req.session.passport.user.id, did)&lt;/p>
&lt;p>Finally the endpoint registered with the webhook could be defined as
follows:&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage89.emf" alt="">&lt;/p>
&lt;p>In this case once the translation is completed, this endpoint receives a
notification. If the event is equal to&lt;/p>
&lt;p>onshape.model.translation.complete&lt;/p>
&lt;p>We can assume that the translation has completed and we can unregister
the webhook and retrieve the translated file.&lt;/p>
&lt;p>The complete sample including it setup and deployment can be found at:
&lt;a href="https://github.com/onshape-public/app-gltf-viewer">https://github.com/onshape-public/app-gltf-viewer&lt;/a>&lt;/p></description></item><item><title>Docs: Create an Extension</title><link>https://onshape-public.github.io/docs/tutorials/createextension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/tutorials/createextension/</guid><description>
&lt;p>In this example, you will create a custom web page (as shown in the image below) that is displayed in the
right-hand fly-out panel. This interface displays metadata pulled from
a third-party system when a part in Onshape is selected. This interface can also update metadata in Onshape through the &lt;code>Update&lt;/code> functionality.&lt;/p>
&lt;p>You can follow along with the steps below with this video:
&lt;a href="https://onshape.wistia.com/medias/0ivxxngkjz?embedType=async&amp;seo=false&amp;videoFoam=true&amp;videoWidth=640&amp;wvideo=0ivxxngkjz)">&lt;img src="https://onshape-public.github.io/images/ExtensionsVideoCard.png" style="width:5in" alt="OAuth app creation video"/>&lt;/a>&lt;/p>
&lt;h3 id="define-the-extension">Define the extension&lt;/h3>
&lt;p>This tutorials builds off the &lt;a href="https://onshape-public.github.io/docs/tutorials/derivative">Generate Derivative Files&lt;/a> tutorial. Please complete that one before starting on this one.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Navigate to the Developer portal from &lt;a href="https://dev-portal.onshape.com">https://dev-portal.onshape.com&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click &lt;strong>OAuth applications&lt;/strong> in the left menu.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select your application, and the click the &lt;strong>Extensions&lt;/strong> tab.
&lt;img src="https://onshape-public.github.io/images/integrationguideimage91.png" style="width:6.5in;height:3.48958in" alt="Graphical user interface, application, Teams Description automatically generated" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click the &lt;strong>Add Extension&lt;/strong> button on the top right.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select &lt;code>Element Right Panel&lt;/code>.
&lt;img src="https://onshape-public.github.io/images/integrationguideimage92.png" style="width:5.05785in;height:5.66469in" alt="Graphical user interface, application Description automatically generated" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next, define the context. The context defines what parameters
can be sent from Onshape to the application. Some basic
parameters are automatically sent with any context, additional information can be passed to our
application, depending on the context selected. Click the &lt;code>Selected part&lt;/code> option. This sends the &lt;code>partId&lt;/code> and &lt;code>partNumber&lt;/code> to the application, along with the &lt;code>documentId&lt;/code>, &lt;code>elementId&lt;/code>, and the &lt;code>workspaceOrVersionId&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In the &lt;code>Action URL&lt;/code> field, fill in the URL of the page to load in the right element panel. The parameters can be added as arguments (variable that get replaced with real values when the page is loaded from Onshape).&lt;/p>
&lt;pre tabindex="0">&lt;code>https://ourserver.com/bom?documentId=${documentid}&amp;amp;elementId=${elementid}&amp;amp;partId={$partId}&amp;amp;partNumber={$partNumber}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Finally, select an icon for the extension. This will appear on the tab that opens the right element panel.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>You have now defined the extension, and it will appear in the Onshape
interface.&lt;/p>
&lt;h3 id="call-a-page-in-the-extension">Call a page in the extension&lt;/h3>
&lt;p>The following code snippet shows how to use your previous definition to
pull data from the third-party application and send it to the web page:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//https://myserver.com/bom?documentId=${documentId}&amp;amp;elementId=${elementId}&amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//partId=${partId}&amp;amp;partNumber=${partNumber}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>app.get(&lt;span style="color:#a50">&amp;#39;/bom&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">if&lt;/span> (req.query.partNumber !== &lt;span style="color:#a50">&amp;#39;${partNumber&amp;#39;&lt;/span>}) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> partController.getPartsList(req.query.partNumber).then((parts) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> catController.getCatById(parts.Category).then((cat) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.render(&lt;span style="color:#a50">&amp;#39;bomview&amp;#39;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parts: parts,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cat: cat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.render(&lt;span style="color:#a50">&amp;#39;bomview&amp;#39;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parts: { &lt;span style="color:#a50">&amp;#34;_id&amp;#34;&lt;/span>: &lt;span style="color:#099">0&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cat: { &lt;span style="color:#a50">&amp;#34;_id&amp;#34;&lt;/span>: &lt;span style="color:#099">0&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code checks to see if the &lt;code>partNumber&lt;/code> parameter was actually populated (i.e., that a part number was defined for the selected part). If defined, you can use the part number to
retrieve information about the selected part from our third-party application.&lt;/p>
&lt;p>If the part number isn’t defined, you can send an alert to the web page to notify the user that a part number must be defined to use this web page.&lt;/p>
&lt;p>You can also use the document ID, the element ID, and the Part ID to retrieve the correct part as long as they are stored with the part in your application.&lt;/p>
&lt;h3 id="use-the-extension">Use the extension&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>In Onshape, load a document. You will see your icon embedded in
the location you chose for you extension.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select a part in a Part Studio, and click the icon to open the extension application:
&lt;img src="https://onshape-public.github.io/images/integrationguideimage94.png" style="width:6.5in;height:3.94236in" alt="Graphical user interface Description automatically generated" />&lt;/p>
&lt;p>If the part you selected has not yet been synced with your third-party application, no part number has been generated, and the system can’t find a corresponding object in our database.&lt;/p>
&lt;p>When you select a part that has been synced, and a part number has been generated, you will see the expected result:&lt;/p>
&lt;img src="https://onshape-public.github.io/images/integrationguideimage95.png" style="width:5.49548in;height:3.32019in" alt="Graphical user interface Description automatically generated" />
&lt;p>Since the context you selected for this application extension was &lt;code>Selected Part&lt;/code>, a part must be selected to load anything in the extension. If no part is selected, you will see a notification similar to the following:&lt;/p>
&lt;img src="https://onshape-public.github.io/images/integrationguideimage96.png" style="width:5.10442in;height:1.41408in" alt="Graphical user interface, text, application Description automatically generated" />&lt;/li>
&lt;/ol></description></item><item><title>Docs: glTF Viewer</title><link>https://onshape-public.github.io/docs/tutorials/gltf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/tutorials/gltf/</guid><description>
&lt;p>The GLTF Viewer is a sample application that demonstrates:&lt;/p>
&lt;ul>
&lt;li>How to fetch a glTF representation of an Onshape model&lt;/li>
&lt;li>How to create an app that runs as a tab inside an Onshape document&lt;/li>
&lt;li>OAuth2 authentication&lt;/li>
&lt;li>Use of REST APIs&lt;/li>
&lt;li>Use of document context&lt;/li>
&lt;/ul>
&lt;p>The application is built using Express and is deployed on Heroku.&lt;/p>
&lt;p>Refer to the &lt;a href="https://github.com/onshape-public/app-gltf-viewer">gltf-viewer-app README&lt;/a> for instructions on running this sample app.&lt;/p></description></item><item><title>Docs: Changelog</title><link>https://onshape-public.github.io/docs/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/changelog/</guid><description>
&lt;h4 id="rel-1173---released-2023-11-28">&lt;code>rel-1.173&lt;/code> - released 2023-11-28&lt;/h4>
&lt;ul>
&lt;li>Update all classroom endpoints (&lt;code>/classrooms/&lt;/code>) to support OAuth&lt;/li>
&lt;li>Add description of output to schema for getAssemblyShadedViews API&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1172---released-2023-11-06">&lt;code>rel-1.172&lt;/code> - released 2023-11-06&lt;/h4>
&lt;ul>
&lt;li>Update all endpoints for &lt;code>bodydetails&lt;/code> | &lt;code>tessellatededges&lt;/code> | &lt;code>tessellatedfaces&lt;/code> | &lt;code>featurescript&lt;/code> to include new response body &lt;code>errorEnum&lt;/code>:&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>errorEnum&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>FIT_TOLERANCE_LIMITS_NOT_FOUND&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>FIT_TOLERANCE_SIZE_TOO_LARGE_ISO&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>FIT_TOLERANCE_SIZE_TOO_LARGE_ANSI&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>OFFSET_WIRE_SHEET_CREATION_FAILED&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>REPLACE_FACE_SHEET_SMALL&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>REPLACE_FACES_NOT_ADJACENT&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SHEET_METAL_HOLE_REBUILD_FAILED&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CPLANE_TANGENT_INPUT&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CPLANE_TANGENT_SELECT_REFERENCE&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CNE_TANGENT_PLANE_INVALID&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CPLANE_TANGENT_POINT_INVALID&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>REPLACE_FACES_NOT_SAME_BODY&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>MUST_USE_DEFAULT_RADIUS_WITH_FACE_BEND&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CANNOT_RIP_A_FACE_BEND&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CANNOT_MAKE_A_FACE_BEND_TANGENT&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>References to &lt;code>API Guide&lt;/code> for endpoint descriptions in Glassworks&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1171---released-2023-10-13">&lt;code>rel-1.171&lt;/code> - released 2023-10-13&lt;/h4>
&lt;ul>
&lt;li>Update all translation &lt;code>POST&lt;/code> endpoints to have a new request body properties &lt;code>hideInspectionItems&lt;/code> and &lt;code>textOption&lt;/code>&lt;/li>
&lt;li>Replaced &lt;code>GET&lt;/code> : &lt;code> /releasepackages/companyreleaseworkflow&lt;/code> | &lt;code>/workflow/active&lt;/code> property &lt;code>canCurrentUserSyncVersionsToArena&lt;/code> with &lt;code>canCurrentUserSyncStandardContentToArena&lt;/code>&lt;/li>
&lt;li>Updated &lt;code>GET&lt;/code> and &lt;code>POST&lt;/code> : &lt;code>/tabletemplates&lt;/code> endpoint with new response property &lt;code>valueType&lt;/code>&lt;/li>
&lt;li>Comprehensive update to remaining endpoint summary and descriptions in Glassworks&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1170---released-2023-09-22">&lt;code>rel-1.170&lt;/code> - released 2023-09-22&lt;/h4>
&lt;ul>
&lt;li>New appelements delete subelement endpoint &lt;code>DELETE&lt;/code> : &lt;code>/appelements/d/[did]/[wvm]/[wvmid]/e/[eid]/content/subelements&lt;/code>&lt;/li>
&lt;li>New company add new user endoint &lt;code>POST&lt;/code> : &lt;code>/companies/[cid]/users&lt;/code>&lt;/li>
&lt;li>New company update user endoint &lt;code>POST&lt;/code> : &lt;code>/companies/[cid]/users/[uid]&lt;/code>&lt;/li>
&lt;li>New company delete user endoint &lt;code>DELETE&lt;/code> : &lt;code>/companies/[cid]/users/[uid]&lt;/code>&lt;/li>
&lt;li>Comprehensive update to remaining endpoint summary and descriptions in Glassworks&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1169---released-2023-09-01">&lt;code>rel-1.169&lt;/code> - released 2023-09-01&lt;/h4>
&lt;ul>
&lt;li>Comprehensive update to most endpoint summary and descriptions in Glassworks&lt;/li>
&lt;li>Update all translation endpoints to include new property &lt;code>importAppearances&lt;/code>&lt;/li>
&lt;li>Update &lt;code>POST&lt;/code> : &lt;code>/partstudios/d/[did]/[wvm]/[wvmid]/e/[eid]/featurescript&lt;/code> has a new property &lt;code>expressionErrorInfo&lt;/code>&lt;/li>
&lt;li>Update &lt;code>GET&lt;/code> and &lt;code>POST&lt;/code> : &lt;code>/releasepackages/[rpid]&lt;/code> property &lt;code>workflow/actions&lt;/code> has a new enum value &lt;code>REASSIGN_TASK&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1168---released-2023-08-11">&lt;code>rel-1.168&lt;/code> - released 2023-08-11&lt;/h4>
&lt;ul>
&lt;li>Deprecated &lt;code>POST&lt;/code> : &lt;code>/api/drawings/create&lt;/code> -&amp;gt; Replaced with &lt;code>POST&lt;/code> : &lt;code>/api/drawings/d/[did]/w/w/[wid]/create&lt;/code>&lt;/li>
&lt;li>Update &lt;code>GET&lt;/code> : &lt;code>/api/documents&lt;/code> endpoint has a new property &lt;code>publishedVersion&lt;/code>&lt;/li>
&lt;li>Update &lt;code>GET&lt;/code> and &lt;code>POST&lt;/code> : &lt;code>/api/releasepackages/[rpid]&lt;/code> has a new property &lt;code>syncedWithPLM&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1167---released-2023-07-21">&lt;code>rel-1.167&lt;/code> - released 2023-07-21&lt;/h4>
&lt;ul>
&lt;li>Update glTF translation endpoints to use new field &lt;code>useGltfCompression&lt;/code> (bool)&lt;/li>
&lt;li>Update STEP translation endpoints to use new field &lt;code>stepParasolidPreprocessingOption&lt;/code> (0-None, 1-Advanced, 2-Automatic, 3-Basic)&lt;/li>
&lt;li>Update &lt;code>GET&lt;/code> : &lt;code>/api/documents&lt;/code> | &lt;code>/api/documents/[did]&lt;/code> | &lt;code>/api/companies/[cid]/documentsbyname&lt;/code> to include new field &lt;code>forceExportRules&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1165---released-2023-06-12">&lt;code>rel-1.165&lt;/code> - released 2023-06-12&lt;/h4>
&lt;ul>
&lt;li>Support &lt;code>partId&lt;/code> array string for &lt;code>GET&lt;/code> : &lt;code>/api/partstudios/bodydetails&lt;/code> endpoint for the option of getting a subset of parts from a partstudio (empty = all parts)&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1163---released-2023-04-28">&lt;code>rel-1.163&lt;/code> - released 2023-04-28&lt;/h4>
&lt;ul>
&lt;li>Update documentation for the Documents endpoint (&lt;code>/api/documents&lt;/code>)&lt;/li>
&lt;li>Update Releasepackage endpoint &lt;code>GET&lt;/code> : &lt;code>/api/releasepackage&lt;/code> to include &lt;code>type&lt;/code> to understand action (ie. Approve vs Reject)&lt;/li>
&lt;li>Update API to V6 - Fix a bug in how updating the JSON tree of an app element in a transaction returns the diff&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1162---released-2023-04-12">&lt;code>rel-1.162&lt;/code> - released 2023-04-12&lt;/h4>
&lt;ul>
&lt;li>New Assembly modify endpoint &lt;code>POST&lt;/code> : &lt;code>/api/assemblies/d/{did}/w/{wid}/e/{eid}/modify&lt;/code> for bulk deletion and suppression of instances and features&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1161---released-2023-03-20">&lt;code>rel-1.161&lt;/code> - released 2023-03-20&lt;/h4>
&lt;ul>
&lt;li>New BOM templates endpoint (&lt;code>/api/tabletemplates&lt;/code>)&lt;/li>
&lt;li>Support POST &lt;code>/api/webhooks&lt;/code> parameter &lt;code>isTransient = true&lt;/code> to specify auto cleanup after a set number of days&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1160---released-2023-02-24">&lt;code>rel-1.160&lt;/code> - released 2023-02-24&lt;/h4>
&lt;ul>
&lt;li>Support configuratons for &lt;code>GET&lt;/code> : &lt;code>/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features&lt;/code>&lt;/li>
&lt;li>Remove deprecated &lt;code>GET&lt;/code> : &lt;code>/api/elements/:emid&lt;/code>&lt;/li>
&lt;li>Remove deprecated &lt;code>GET&lt;/code> and &lt;code>POST&lt;/code> : &lt;code>/api/elements/d/:did/[wvm]/:wvmid/e/:eid/metadata&lt;/code>&lt;/li>
&lt;li>Deprecated &lt;code>GET&lt;/code> and &lt;code>POST&lt;/code> : &lt;code>/api/parts/standardcontent/d/:did/v/:vid/e/:eid/[cu]/:cuid/partid/:pid/metadata&lt;/code>&lt;/li>
&lt;li>Deprecated &lt;code>GET&lt;/code> and &lt;code>POST&lt;/code> : &lt;code>/api/parts/d/:did/[wvm]/:wmvid/e/:eid/partid/:pid/metadata&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1158---released-2023-01-11">&lt;code>rel-1.158&lt;/code> - released 2023-01-11&lt;/h4>
&lt;ul>
&lt;li>New example values in Glassworks API documentation&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1155---released-2022-11-01">&lt;code>rel-1.155&lt;/code> - released 2022-11-01&lt;/h4>
&lt;ul>
&lt;li>Support Parasolid binary (x_b) exports&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1154---released-2022-10-10">&lt;code>rel-1.154&lt;/code> - released 2022-10-10&lt;/h4>
&lt;ul>
&lt;li>Add face color, hidden state and type of composite to body details endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1152---released-2022-08-30">&lt;code>rel-1.152&lt;/code> - released 2022-08-30&lt;/h4>
&lt;ul>
&lt;li>Support more parameters to filter the partstudio endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1147---released-2022-05-16">&lt;code>rel-1.147&lt;/code> - released 2022-05-16&lt;/h4>
&lt;ul>
&lt;li>Support global tree node endpoint for impacting recently opened filter&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1146---released-2022-04-25">&lt;code>rel-1.146&lt;/code> - released 2022-04-25&lt;/h4>
&lt;ul>
&lt;li>Support API versioning&lt;/li>
&lt;li>Return ‘nodeId’ when adding or updating an AppElement&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1145---released-2022-04-05">&lt;code>rel-1.145&lt;/code> - released 2022-04-05&lt;/h4>
&lt;ul>
&lt;li>Fixed issue where assembly feature errors were missing&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1140---released-2021-12-15">&lt;code>rel-1.140&lt;/code> - released 2021-12-15&lt;/h4>
&lt;ul>
&lt;li>Add mass properties for assemblies&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1139---released-2021-11-15">&lt;code>rel-1.139&lt;/code> - released 2021-11-15&lt;/h4>
&lt;ul>
&lt;li>Relax casing search in Glassworks (Swagger client)&lt;/li>
&lt;li>BOM and Metadata API endpoint responses now matched&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1138---released-2021-10-25">&lt;code>rel-1.138&lt;/code> - released 2021-10-25&lt;/h4>
&lt;ul>
&lt;li>Updated webhook documentation&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1135---released-2021-8-20">&lt;code>rel-1.135&lt;/code> - released 2021-8-20&lt;/h4>
&lt;ul>
&lt;li>Webhook events for Enterprise SSO configuration changes&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1134---released-2021-07-30">&lt;code>rel-1.134&lt;/code> - released 2021-07-30&lt;/h4>
&lt;ul>
&lt;li>Support comment events (add, update, delete) for the web-hook endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1131---released-2021-06-01">&lt;code>rel-1.131&lt;/code> - released 2021-06-01&lt;/h4>
&lt;ul>
&lt;li>Add synchronous glTF/gLB endpoint for assemblies&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1128---released-2021-03-29">&lt;code>rel-1.128&lt;/code> - released 2021-03-29&lt;/h4>
&lt;ul>
&lt;li>Support face color for export of glTF/gLB&lt;/li>
&lt;li>Add document API endpoint for comments&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1127---released-2021-03-08">&lt;code>rel-1.127&lt;/code> - released 2021-03-08&lt;/h4>
&lt;ul>
&lt;li>Add translation option dtkPeriodicFacesPolicy=3 for CATIA parts&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1126---released-2021-02-12">&lt;code>rel-1.126&lt;/code> - released 2021-02-12&lt;/h4>
&lt;ul>
&lt;li>Add GLTF and GLB accepts option to the tessellation APIs&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1125---released-2021-01-25">&lt;code>rel-1.125&lt;/code> - released 2021-01-25&lt;/h4>
&lt;ul>
&lt;li>Add ‘good/better/best’ quality query parameters to tessellation endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1122---released-2020-11-18">&lt;code>rel-1.122&lt;/code> - released 2020-11-18&lt;/h4>
&lt;ul>
&lt;li>Enforce OAuth endpoint rate limiting&lt;/li>
&lt;li>Add release package action/transition based webhooks&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1119---released-2020-09-15">&lt;code>rel-1.119&lt;/code> - released 2020-09-15&lt;/h4>
&lt;ul>
&lt;li>Add rollback bar to EvalFeatureScript endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1118---released-2020-08-25">&lt;code>rel-1.118&lt;/code> - released 2020-08-25&lt;/h4>
&lt;ul>
&lt;li>PartStudio GET support for sketch constraints in features endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1116---released-2020-07-15">&lt;code>rel-1.116&lt;/code> - released 2020-07-15&lt;/h4>
&lt;ul>
&lt;li>Specify starting elements to create document endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1114---released-2020-06-03">&lt;code>rel-1.114&lt;/code> - released 2020-06-03&lt;/h4>
&lt;ul>
&lt;li>Project endpoints&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1113---released-2020-05-11">&lt;code>rel-1.113&lt;/code> - released 2020-05-11&lt;/h4>
&lt;ul>
&lt;li>Output GLTF files for an element (tab)&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1111---released-2020-03-31">&lt;code>rel-1.111&lt;/code> - released 2020-03-31&lt;/h4>
&lt;ul>
&lt;li>Support ownership transfer for teams&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1110---released-2020-03-09">&lt;code>rel-1.110&lt;/code> - released 2020-03-09&lt;/h4>
&lt;ul>
&lt;li>Add support for exploded views&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1108---released-2020-01-29">&lt;code>rel-1.108&lt;/code> - released 2020-01-29&lt;/h4>
&lt;ul>
&lt;li>Drawings endpoints for create 4 view, get view geometry and view definition&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1102---released-2019-09-11">&lt;code>rel-1.102&lt;/code> - released 2019-09-11&lt;/h4>
&lt;ul>
&lt;li>Added webhook events for release management&lt;/li>
&lt;li>Added webhook event for document version creation&lt;/li>
&lt;/ul>
&lt;h4 id="rel-199---released-2019-07-08">&lt;code>rel-1.99&lt;/code> - released 2019-07-08&lt;/h4>
&lt;ul>
&lt;li>Assembly BOM API support for items&lt;/li>
&lt;/ul>
&lt;h4 id="rel-196---released-2019-05-03">&lt;code>rel-1.96&lt;/code> - released 2019-05-03&lt;/h4>
&lt;ul>
&lt;li>Part Studio compare endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-193---released-2019-03-01">&lt;code>rel-1.93&lt;/code> - released 2019-03-01&lt;/h4>
&lt;ul>
&lt;li>Webhook subscriptions for a company&lt;/li>
&lt;/ul>
&lt;h4 id="rel-186---released-2018-09-28">&lt;code>rel-1.86&lt;/code> - released 2018-09-28&lt;/h4>
&lt;ul>
&lt;li>Export Drawings to DXF, DWG and PDF&lt;/li>
&lt;/ul></description></item></channel></rss>