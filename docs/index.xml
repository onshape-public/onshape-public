<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Onshape Developer Documentation – Welcome to the Developer Portal</title>
    <link>http://example.org/docs/</link>
    <description>Recent content in Welcome to the Developer Portal on Onshape Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 May 2020 20:44:05 -0400</lastBuildDate>
    
	  <atom:link href="http://example.org/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: API Keys</title>
      <link>http://example.org/docs/apikeys/</link>
      <pubDate>Mon, 18 May 2020 20:20:41 -0400</pubDate>
      
      <guid>http://example.org/docs/apikeys/</guid>
      <description>
        
        
        &lt;h1 id=&#34;using-api-keys-with-onshape&#34;&gt;Using API Keys with Onshape&lt;/h1&gt;
&lt;h3 id=&#34;why-api-keys&#34;&gt;Why API Keys?&lt;/h3&gt;
&lt;p&gt;API keys are useful for small applications meant for personal use, allowing developers to avoid the overhead of the OAuth workflow.  Creating an app is very easy with API keys: create an API key with the Developer Portal, set up a function to build your API key header as in the samples, and make your API calls!  There&amp;rsquo;s no need to deal with OAuth redirects or things like that.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve moved over to using API keys for authenticating requests instead of using cookies for several reasons.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Security: Each request is signed with unique headers so that we can be sure it&amp;rsquo;s coming from the right place.&lt;/li&gt;
&lt;li&gt;OAuth: The API key system we&amp;rsquo;re now using for HTTP requests is the same process developers follow when building full-blown OAuth applications; there&amp;rsquo;s no longer a disconnect between the two.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you create an API key, it will only be valid in the stack on which it was created.  An API key created on the partner stack, for example, will not function on the production stack.&lt;/p&gt;
&lt;h3 id=&#34;questions-and-concerns&#34;&gt;Questions and Concerns&lt;/h3&gt;
&lt;p&gt;If you need information or have a question unanswered in this documentation, feel free to chat with us by sending an email to &lt;a href=&#34;mailto:api-support@onshape.com&#34;&gt;api-support@onshape.com&lt;/a&gt; or by checking out the &lt;a href=&#34;https://forum.onshape.com&#34; target=&#34;_blank&#34;&gt;forums&lt;/a&gt;.  If you are a member of the DevPartners group (see the Development help page for information) more detailed instructions and code examples are in the apikey sample repo.&lt;/p&gt;
&lt;h3 id=&#34;working-with-api-keys&#34;&gt;Working with API Keys&lt;/h3&gt;
&lt;p&gt;Read the following and you&amp;rsquo;ll be up and running with using API keys in your application:&lt;/p&gt;
&lt;h5 id=&#34;instructions&#34;&gt;Instructions&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get the Developer role for your Onshape account by contacting us at &lt;a href=&#34;mailto:api-support@onshape.com&#34;&gt;api-support@onshape.com&lt;/a&gt;.  You should already have this since you&amp;rsquo;re in the Developer Portal already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create and manage your API key pairs from the Developer Portal; note that the secret will only be displayed once! Keep it somewhere safe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now that you have a key pair, see &lt;a href=&#34;#generating-a-request-signature&#34;&gt;below&lt;/a&gt; for information on signing your requests to use our API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you have your access key and secret, you will want to avoid giving others access to them since they&amp;rsquo;re tied directly to your personal Onshape account.  Think of your API key as a username and password pair.  Therefore, you should avoid placing them directly in the code for your application, especially if others might see it.  The samples use a separate configuration file that you yourself will need to create that will contain this information, but there are other ways to keep the access key and secret safe, like setting them as environment variables.&lt;/p&gt;
&lt;h5 id=&#34;scopes&#34;&gt;Scopes&lt;/h5&gt;
&lt;p&gt;There are several scopes available for API keys (equivalent to OAuth scopes):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;OAuth2Read&amp;rdquo; - Read non-personal information (documents, parts, etc.)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;OAuth2ReadPII&amp;rdquo; - Read personal information (name, email, etc.)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;OAuth2Write&amp;rdquo; - Create and edit documents / etc.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;OAuth2Delete&amp;rdquo; - Delete documents / etc.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;OAuth2Purchase&amp;rdquo; - Authorize purchases from account&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;generating-a-request-signature&#34;&gt;Generating A Request Signature&lt;/h5&gt;
&lt;p&gt;To ensure that a request is coming from you, we have a process for signing requests that you must follow for API calls to work. Everything is done via HTTP headers that you&amp;rsquo;ll need to set:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: A standard date header giving the time of the request; must be accurate within &lt;strong&gt;5 minutes&lt;/strong&gt; of request. Example: &lt;code&gt;Mon, 11 Apr 2016 20:08:56 GMT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;On-Nonce&lt;/em&gt;: A string that satisfies the following requirements (see the code for one possible way to generate it):
&lt;ul&gt;
&lt;li&gt;At least 16 characters&lt;/li&gt;
&lt;li&gt;Alphanumeric&lt;/li&gt;
&lt;li&gt;Unique for each request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authorization&lt;/em&gt;: This is where the API keys come into play. You&amp;rsquo;ll sign the request by implementing this algorithm:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input&lt;/strong&gt;: Method, URL, On-Nonce, Date, Content-Type, AccessKey, SecretKey&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt;: String of the form: &lt;code&gt;On &amp;lt;AccessKey&amp;gt;:HmacSHA256:&amp;lt;Signature&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steps to generate the signature portion&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;Parse the URL and get the following:
&lt;ol&gt;
&lt;li&gt;The path, e.g. &lt;code&gt;/api/documents&lt;/code&gt; (no query params!)&lt;/li&gt;
&lt;li&gt;The query string, e.g. &lt;code&gt;a=1&amp;amp;b=2&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;NOTE: If no query paramaters are present, use an empty string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Create a string by appending the following information in order. Each field should be separated by a newline (&lt;code&gt;\n&lt;/code&gt;) character, and the string must be converted to lowercase:
&lt;ol&gt;
&lt;li&gt;HTTP method&lt;/li&gt;
&lt;li&gt;On-Nonce header value&lt;/li&gt;
&lt;li&gt;Date header value&lt;/li&gt;
&lt;li&gt;Content-Type header value&lt;/li&gt;
&lt;li&gt;URL pathname&lt;/li&gt;
&lt;li&gt;URL query string&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Using SHA-256, generate an &lt;a href=&#34;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&#34; target=&#34;_blank&#34;&gt;HMAC digest&lt;/a&gt;, using the API secret key first and then the above string, then encode it in Base64.&lt;/li&gt;
&lt;li&gt;Create the &lt;code&gt;On &amp;lt;AccessKey&amp;gt;:HmacSHA256:&amp;lt;Signature&amp;gt;&lt;/code&gt; string and use that in the Authorization header in your request.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below is an example function to generate the authorization header, using Node.js&amp;rsquo;s standard &lt;code&gt;crypto&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; libraries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...at top of file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crypto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;crypto&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* Generates the &amp;#34;Authorization&amp;#34; HTTP header for using the Onshape API
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @param {string} method - Request method; GET, POST, etc.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @param {string} url - The full request URL
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @param {string} nonce - 25-character nonce (generated by you)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @param {string} authDate - UTC-formatted date string (generated by you)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @param {string} contentType - Value of the &amp;#34;Content-Type&amp;#34; header; generally &amp;#34;application/json&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @param {string} accessKey - API access key
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @param {string} secretKey - API secret key
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* @return {string} Value for the &amp;#34;Authorization&amp;#34; header
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createSignature&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nonce&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;authDate&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;contentType&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;accessKey&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;secretKey&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urlObj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urlPath&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urlObj&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pathname&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urlQuery&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urlObj&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urlObj&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// if no query, use empty string
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nonce&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;authDate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contentType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;urlPath&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urlQuery&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toLowerCase&lt;/span&gt;();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hmac&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crypto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createHmac&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sha256&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;secretKey&lt;/span&gt;)
        .&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;)
        .&lt;span style=&#34;color:#a6e22e&#34;&gt;digest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signature&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;On &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accessKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:HmacSHA256:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hmac&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signature&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some API endpoints return 307 redirects.  You must generate an Authorization header for the redirect as well, but please note that the server portion of the URL might be different, the redirect URL may contain query parameters that must be encoded in the Authorization header, etc.  Please see the samples for examples.&lt;/p&gt;
&lt;h3 id=&#34;api-keys-and-oauth&#34;&gt;API keys and OAuth&lt;/h3&gt;
&lt;p&gt;Our API key workflow differs from our OAuth workflow in one important characteristic: an API key allows a &lt;em&gt;user&lt;/em&gt; (specifically, a developer) to make requests, while OAuth allows an &lt;em&gt;application&lt;/em&gt; to make requests on behalf of the user.  We require the OAuth workflow for apps in the Onshape App Store, so if you develop an app using API keys and want to distribute it through the App Store, you will need to change to OAuth.  Please see our OAuth sample apps for examples of how to make OAuth work (onshape/app-bom is a great place to start).  The good news is that we&amp;rsquo;ve structured API keys to work very similarly to OAuth in the operation of your app.  While you will need to build your Authorization header differently (and set up redirects and signins as in the onshape/app-bom sample), the API calls themselves will work the same in both versions, provided that the API key and the OAuth app have the same scopes.  An API key with the OAuth2Read and OAuth2Write scopes will have the same access to the same API endpoints as an OAuth application with the OAuth2Read and OAuth2Write scopes, for example.  (The only differences are when calling API endpoints relating to the OAuth application itself, since an API key request obviously does not come from an OAuth application.)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: API Overview</title>
      <link>http://example.org/docs/apioverview/</link>
      <pubDate>Mon, 18 May 2020 20:25:28 -0400</pubDate>
      
      <guid>http://example.org/docs/apioverview/</guid>
      <description>
        
        
        &lt;h2 id=&#34;getting-started-with-the-onshape-rest-api&#34;&gt;Getting Started with the Onshape REST API&lt;/h2&gt;
&lt;p&gt;This document describes APIs that will allow partners to interact with the Onshape system.&lt;/p&gt;
&lt;p&gt;Please address questions to &amp;quot; &lt;a href=&#34;mailto:api-support@onshape.com&#34;&gt;api-support@onshape.com&lt;/a&gt;&amp;rdquo; for the fastest response.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE The API is still under development. Many of the previous interfaces have been deprecated in favor of a more consistent API. All previously described interfaces should continue to work, but we reserve the right to remove support for them. Please update to use the new forms as described in the API Explorer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Use the API Explorer to see detailed documentation of the Onshape API. To use the API Explorer, subscribe in the Appstore at &lt;a href=&#34;https://appstore.onshape.com&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://appstore.onshape.com&#34;&gt;https://appstore.onshape.com&lt;/a&gt;&lt;/a&gt;, then add the Explorer to a document using the plus menu.&lt;/li&gt;
&lt;li&gt;Sample applications are available at &lt;a href=&#34;https://github.com/onshape-public&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/onshape-public&#34;&gt;https://github.com/onshape-public&lt;/a&gt;&lt;a&gt;.&lt;/li&gt;
&lt;li&gt;Request access to the private forum for API and App Store development. Send an email to Lou Gallo (&lt;a href=&#34;mailto:lgallo@onshape.com&#34;&gt;lgallo@onshape.com&lt;/a&gt;) requesting access to the partner forum. Include the email address you use for signing in to the Onshape production server (cad.onshape.com).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Create your own application and let us know how it goes. We look forward to your questions, comments, and a demo of what you build!&lt;/p&gt;
&lt;h2 id=&#34;onshape-appstore&#34;&gt;Onshape Appstore&lt;/h2&gt;
&lt;p&gt;Onshape will make applications available through the Onshape Appstore. The Appstore will be actively promoted to users, making it easy for users to find, purchase and use third party applications. Click &lt;a href=&#34;https://appstore.onshape.com&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://appstore.onshape.com&#34;&gt;https://appstore.onshape.com&lt;/a&gt;&lt;/a&gt; to view the Onshape Appstore.&lt;/p&gt;
&lt;h2 id=&#34;the-lifecycle-of-an-application&#34;&gt;The Lifecycle of an Application&lt;/h2&gt;
&lt;p&gt;Onshape expects that typical applications will follow this timeline:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Phase&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Initial development&lt;/td&gt;
&lt;td&gt;Development will take place on Onshape&amp;rsquo;s Production stack - &lt;a href=&#34;https://cad.onshape.com&#34;&gt;https://cad.onshape.com&lt;/a&gt; your application is initially only visible to yourself and members of teams that you create an specify in the developer portal.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alpha testing&lt;/td&gt;
&lt;td&gt;When an application is ready for early named-user testing, Onshape may be able to provide user accounts for named test users, or you can add your own users to the Visibility team for your application.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Beta testing&lt;/td&gt;
&lt;td&gt;Once an application is ready for broader testing increase the number of users in the visiblity team. Additionally Onshape will work with you to complete the ready for release checklist.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release&lt;/td&gt;
&lt;td&gt;Released applications will be promoted to public visibility on the Appstore (if appropriate) and become available for general use.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;how-your-program-interacts-with-onshape&#34;&gt;How Your Program Interacts with Onshape&lt;/h2&gt;
&lt;p&gt;The primary APIs provided by Onshape are REST interfaces that are accessed over HTTPS. The client can be a web server or a desktop application (including command line tools such as curl). Onshape does not support use of the APIs directly from a browser client due to cross-domain scripting concerns.&lt;/p&gt;
&lt;p&gt;We anticipate that partner applications will interact with Onshape in three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;File Exchange.&lt;/strong&gt;
Onshape provides extensive import and export translation capabilities to interact with applications that can read or write a variety of file formats.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Live Link Integration.&lt;/strong&gt;
Desktop or server applications can use REST calls to read information from the Onshape servers, and store information back. These applications can gain &amp;ldquo;cloud value&amp;rdquo; by using Onshape data management capabilities for sharing, versioning and durability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In-Tab Integration.&lt;/strong&gt;
Web server applications can create a tightly integrated experience within Onshape by using a combination of REST and client-side APIs to build a seamless interaction by interacting with users inside an Onshape tab.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following diagram illustrates basic desktop integration and cloud integration architecture. The REST, WebHook and Client POST messages are documented in this and additional API documents.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/images/apioverviewimage00.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Onshape Server Stack consists of a number of cooperating servers that provide the underlying support for the Onshape CAD experience. The Onshape servers are built with a variety of technologies, including Java and C++, database and message services, geometry and constraint management systems, and much more.&lt;/p&gt;
&lt;p&gt;Partner cloud applications can be written in any web framework. Onshape provides a set of samples in Github. Onshape is also planning to provide a library that simplifies desktop application development.&lt;/p&gt;
&lt;p&gt;The user interface code that runs in the Onshape browser client is written in Javascript.&lt;/p&gt;
&lt;p&gt;You may notice that this diagram does not illustrate the Onshape mobile clients for iOS and Android devices; the development of 3rd-party mobile applications for Onshape is beyond the scope of this document.&lt;/p&gt;
&lt;h2 id=&#34;tools-and-samples&#34;&gt;Tools and Samples&lt;/h2&gt;
&lt;p&gt;Onshape provides a set of sample applications and tools to assist third party development. These samples demonstrate how to use the API from a variety of environments, including desktop Windows applications, node.js servers, Windows Azure servers and more.&lt;/p&gt;
&lt;p&gt;The components of the sample applications written by Onshape are provided under the MIT License; applications may include other open source components as well.&lt;/p&gt;
&lt;p&gt;For access to samples and tools, please visit &lt;a href=&#34;https://github.com/onshape-public&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/onshape-public&#34;&gt;https://github.com/onshape-public&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;
&lt;p&gt;Onshape provides API Explorer - an application written using the Onshape API that offers REST documentation and a &amp;ldquo;try me&amp;rdquo; mode for experimenting with the REST interfaces. To use API Explorer, visit the Appstore, select the API Explorer app and click &amp;ldquo;Try for Free.&amp;rdquo; Then, add a new Application tab using the plus button:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/images/apioverviewimage01.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select &amp;ldquo;Add Application&amp;rdquo; to create a tab with the API Explorer.&lt;/p&gt;
&lt;h2 id=&#34;sample-applications&#34;&gt;Sample Applications&lt;/h2&gt;
&lt;p&gt;The easiest way to get started with the Onshape API is to look at the sample applications. Each sample application is provided as a Github repository. For access, go to &lt;a href=&#34;https://github.com/onshape-public&#34;&gt;https://github.com/onshape-public&lt;/a&gt;. More samples will be made available over time. The current samples are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;STL Viewer&lt;/td&gt;
&lt;td&gt;View the mesh of a model in a new tab within an Onshape document. This application is written in node.js, and the Readme file describes how to deploy the viewer to Heroku for hosting. The viewer demonstrates OAuth authentication, navigating parts in an Onshape model, and retrieving a tessellated mesh of an Onshape part.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/onshape-public/app-gltf-viewer&#34;&gt;GLTF Viewer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Visualize GLTF data translated from an Onshape model. This is a Node.JS application, and the README provides instructions for deploying to Heroku. The GLTF viewer demonstrates OAuth authentication, navigating Elements and Parts in an Onshape model, triggering a translation and obtaining the resulting data, and registering, listening for, and un-registering webhooks.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BOM&lt;/td&gt;
&lt;td&gt;Create a Bill of Materials for an Onshape assembly. This application is written in node.js and includes documentation on Heroku deployment. The bom application demonstrates OAuth authentication, assembly navigation, metadata retrieval and shaded view generation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;API Key&lt;/td&gt;
&lt;td&gt;A set of examples demonstrating the use of API Keys for Onshape authentication. This includes sample code for both Python and Node applications.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;A Visual C# application demonstrating the use of a wide variety of API calls using OAuth for authentication.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;architecture-overview&#34;&gt;Architecture Overview&lt;/h2&gt;
&lt;p&gt;This document primarily describes partner applications that run as server applications and provide a UI that is displayed within an Onshape tab. The API described can also be called from applications that do not display inside an Onshape document. All access to the document must be made using a secure (HTTPS) connection.&lt;/p&gt;
&lt;p&gt;It is important to understand how Onshape documents are structured in order to use the API.&lt;/p&gt;
&lt;h2 id=&#34;elements&#34;&gt;Elements&lt;/h2&gt;
&lt;p&gt;All data in an Onshape document is stored in Elements (represented as tabs in the user interface). Onshape documents currently contain 5 kinds of elements.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Part Studio (zero or more parts)&lt;/li&gt;
&lt;li&gt;Assembly (zero or more parts or assemblies)&lt;/li&gt;
&lt;li&gt;Blob (&amp;ldquo;Binary Large OBject&amp;rdquo;)  This can be data provided by a partner, or by the end user.  For example, the user can upload a PDF file, an image or a text file. Partner applications can store arbitrary data, but we recommend using the structured storage available in an Application element for better integration.&lt;/li&gt;
&lt;li&gt;Application.  This is an element that presents an IFrame to the user. The user interface in the IFrame is managed by a server that can be provided by a third-party. Note that Onshape Drawings are a special case of an application element.&lt;/li&gt;
&lt;li&gt;FeatureStudio. This element contains the definition of Onshape Features which are defined in FeatureScript.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;workspaces-versions-and-microversions&#34;&gt;Workspaces, Versions and Microversions&lt;/h2&gt;
&lt;p&gt;A document is stored in Onshape as a collection of changes. Each individual change to the document creates a new &amp;ldquo;Document Microversion&amp;rdquo;. You can think of a &amp;ldquo;Workspace&amp;rdquo; as a branch of the document, similar to a branch in a source control system. As the document is edited, changes are applied to the active workspace, creating new Microversions. Periodically, the user may designate &amp;ldquo;Versions&amp;rdquo; of the document. A Version is a named snapshot of the entire document at some point in time (that is, at some Microversion).&lt;/p&gt;
&lt;p&gt;You cannot change a Version of the document - all changes are applied to a Workspace (and create a new Microversion). Thus, while in general the GET methods of the API can read from a Version, Microversion or Workspace, the POST methods generally require a Workspace, and create a new Microversion when data is written to the document. (An exception is that it is possible to set metadata within a Version - this does not create a new microversion).&lt;/p&gt;
&lt;p&gt;The following IDs are used by many of the APIs. Each ID (except for Geometry IDs such as Part, Face and Edge) is currently a 24-character string that is used internally by Onshape to uniquely identify the resource. The Geometry IDs are variable-length strings used to resolve to a specific geometric entity within a model.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;User ID&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;Identifies a single user.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Document ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Document ID identifies a document.  The logged-in user must be able to access the requested document for the API to succeed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Workspace ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Workspace ID identifies a workspace within the document.  Workspaces are used to distinguish between different branches of the document.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Version ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Version ID identifies a specific named version.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Microversion ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Microversion ID identifies an internal revision of the document.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Element ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Element ID identifies an element within the document.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Part ID&lt;/strong&gt; ** Face ID ** &lt;strong&gt;Edge ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Part ID identifies a part within a part studio. The Part ID should generally not be stored for long-term use, as it is only expected to be valid during the course of a session. Note that a Part ID may reference a part that no longer exists if the model is changed, so it is best to specify a Version or Microversion to pick the context for the Part ID. Note that even with the Version or Microversion, internal changes to the Onshape system may result in the Part ID changing. Therefore, Onshape provides mechanisms for maintaining persistent references. See the &lt;a href=&#34;associativity.html&#34;&gt;associativity APIs&lt;/a&gt; for more information. Face and Edge IDs are used in similar ways, and will be documented in further detail.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;linked-documents&#34;&gt;Linked Documents&lt;/h2&gt;
&lt;p&gt;Although a document can contain a complex model tree involving many Part Studio and Assembly elements, it is often more efficient to split the content into multiple documents. Connections between the documents are always made from a document referring to a specific version of the target document. Once a version of a document is used as the target of a linked document, that document version will be preserved as long as any document references it, event in the containing document is deleted. In addition, any user that has access to the referring document will have limited read access to the target document, regardless of what permission grants are currently on the target document.&lt;/p&gt;
&lt;h2 id=&#34;configurations&#34;&gt;Configurations&lt;/h2&gt;
&lt;p&gt;Onshape Part Studios may be contructed to be configurable using Onshape Configurations. API calls that
reference Part Studios (primarily within the Parts and Part Studios APIs) often accept a &amp;ldquo;configuration&amp;rdquo;
parameter that identifies what specific configuraton of the Part Studios is being referenced. When not
specified, the API implementation will typically use the configuration that is currently selected within
the Part Studio, which means that an interactive ad-hoc API call will often behave as you expect, but might
not behave consistently in an application, so be sure to specify the configuration parameter where
applicable.&lt;/p&gt;
&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;Onshape uses the OAuth for authentication. The Onshape sample applications demonstrate how to use OAuth; additional documentation about the OAuth protocol is available on the web and in the OAuth item in the documentation list.&lt;/p&gt;
&lt;p&gt;Using OAuth will be required for all application in the Onshape Appstore, and is strongly encouraged for general security and privacy in general. By using OAuth, customers can maintain control of their own passwords, and enable and disable applications according to the their preferences. For security and privacy, vendors should not capture and store customer passwords.&lt;/p&gt;
&lt;h3 id=&#34;oauth&#34;&gt;OAuth&lt;/h3&gt;
&lt;p&gt;Onshape uses standard OAuth2. See the RFC at &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;https://tools.ietf.org/html/rfc6749&lt;/a&gt;&lt;/a&gt; for a detailed description of OAuth. More details on Onshape&amp;rsquo;s OAuth implementation is available in the &lt;a href=&#34;oauth.html&#34;&gt;OAuth document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Onshape provides the following OAuth endpoints:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://oauth.onshape.com/oauth/token&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://oauth.onshape.com/oauth/authorize&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The Oauth Header should be in the form:&lt;/p&gt;
&lt;p&gt;&amp;lsquo;Authorization: Bearer &amp;lt;_token_&amp;gt;&amp;rsquo;&lt;/p&gt;
&lt;p&gt;The Onshape samples provide a working template demonstrating OAuth use. To build your own applications based on these samples, you will need an OAuth Client ID and OAuth Client Secret from Onshape.&lt;/p&gt;
&lt;p&gt;You can generate an ID and Secret by using the Onshape Developer Portal at &lt;a href=&#34;https://dev-portal.onshape.com&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev-portal.onshape.com&#34;&gt;https://dev-portal.onshape.com&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also add your application to the Appstore using the Developer Portal. Note that by default, only Onshape, the Application Owner and members of the &amp;lsquo;visiblity team&amp;rsquo; will be able to see the App in the Appstore.&lt;/p&gt;
&lt;h3 id=&#34;username-and-password&#34;&gt;Username and password&lt;/h3&gt;
&lt;p&gt;Authentication using username and password is now deprecated. This interface is not supported for applications in the Appstore.&lt;/p&gt;
&lt;h2 id=&#34;ui-integration-for-applications&#34;&gt;UI Integration for Applications&lt;/h2&gt;
&lt;h3 id=&#34;development-and-testing&#34;&gt;Development and testing&lt;/h3&gt;
&lt;p&gt;Developers can create applications using the Developer Portal at &lt;a href=&#34;https://dev-portal.onshape.com&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev-portal.onshape.com&#34;&gt;https://dev-portal.onshape.com&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When your application is instantiated in a document, it will be called with a URL similar to the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://_your-server.your-domain.com_?documentId=1bf13f86674e42e88da3ba72&amp;amp;workspaceId=b0526d577bb844bea463aea7&amp;amp;elementId=36c2f534a07941e1a26b4928&amp;amp;server=https%3A%2F%2Fcad.onshape.com&amp;amp;userId=53da35fbe4b0412c60b5e3b7&amp;amp;access=edit&amp;amp;debug=true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The query parameters passed from Onshape to your application are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Parameter&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;documentId&lt;/td&gt;
&lt;td&gt;Current document ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;workspaceId&lt;/td&gt;
&lt;td&gt;Current workspace ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;elementId&lt;/td&gt;
&lt;td&gt;Current (application) element ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;server&lt;/td&gt;
&lt;td&gt;The address of the current Onshape server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;userId&lt;/td&gt;
&lt;td&gt;Current user ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;access&lt;/td&gt;
&lt;td&gt;To be documented&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;debug&lt;/td&gt;
&lt;td&gt;To be documented&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These query parameters provide the context you need to interact with the current document; you will need to authenticate to the Onshape server in order to use the REST APIs. The server parameter is informational, REST requests should always be sent to &lt;a href=&#34;https://cad.onshape.com&#34;&gt;https://cad.onshape.com&lt;/a&gt; for API requests and &lt;a href=&#34;https://oauth.onshape.com&#34;&gt;https://oauth.onshape.com&lt;/a&gt; for OAuth related operations.&lt;/p&gt;
&lt;h3 id=&#34;end-user-integration&#34;&gt;End user integration&lt;/h3&gt;
&lt;p&gt;When a user registers an application, there are several possible integration points to expose the application within the Onshape user experience. At this time, applications that provide a UI in an Onshape tab will be added to the menu attached to the plus button on the Onshape tab bar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/images/apioverviewimage02.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Use the Developer Portal to create an application and an Appstore entry. We are still considering how to best offer additional integration options, possibly including context menus for appropriate entities, application-specific toolbar buttons and more.&lt;/p&gt;
&lt;h3 id=&#34;applications-for-mobile-clients&#34;&gt;Applications for Mobile Clients&lt;/h3&gt;
&lt;p&gt;Onshape expects to enable applications tabs in iOS and Android environments, but details, including touch event handling in mobile environments, have not been finalized.&lt;/p&gt;
&lt;h2 id=&#34;rest-api-documentation&#34;&gt;REST API Documentation&lt;/h2&gt;
&lt;p&gt;The available REST API endpoints are documented in the API Explorer. Documentation of deprecated forms of the API are provided for reference below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT NOTE&lt;/strong&gt; The documentation in the API Explorer reflects the supported interface. Some API calls may, for historical reasons, return additional undocumented fields. Unless the return fields are documented in the API Explorer, you should NOT use them, as they may be removed without warning. Your application should always ignore unexpected or undocumented return data. Onshape reserves the right to add, remove or change any undocumented fields.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;api-conventions&#34;&gt;API conventions&lt;/h2&gt;
&lt;p&gt;The Onshape API generally follows the following conventions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Onshape generally supports only 3 methods: GET for read-only operations, POST for write operations, and DELETE for deletions. Onshape does not currently support other methods such as PUT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strings should be UTF-8 encoded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Query parameters are used for optional parameters. All required parameters are included in the path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For brevity, we use the following upper case letters in path definitions in this document:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D Document ID (24-characters)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;W Workspace ID (24-characters)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V Version ID (24-characters)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M Microversion ID (24-characters)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E Element ID (24-characters)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The general form of a path is /resource/context/subresource. When present, the context identifies the document (D), the workspace, version or microversion (WVM), and the element (E).  For example, to request the definition of an assembly within a workspace of the document:
&lt;code&gt;GET /api/assemblies/d/eb48129ebf9a499ea67d49fd/w/71534f2162b04565897e9769/e/4dd5d4d11fee45229d6e6ef8&lt;/code&gt;
or, more succinctly:
&lt;code&gt;GET /api/assemblies/d/D/w/W/e/E&lt;/code&gt;
Note that the path elements &amp;ldquo;d&amp;rdquo;, &amp;ldquo;w&amp;rdquo;, &amp;ldquo;v&amp;rdquo;, &amp;ldquo;m&amp;rdquo; and &amp;ldquo;e&amp;rdquo; are abbreviated when used in the &amp;ldquo;context&amp;rdquo; section of the path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our intention is to provide Workspace, Version and Microversion forms for all appropriate GET operations. POST will always be to a Workspace, as Versions and Microversions are immutable. Not all forms of all interfaces are implemented at this time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As of this writing, some API calls return information that is of use only for Onshape clients. You should generally only use the fields that are documented for external use. The internal data may be changed or removed without notice.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;current-rest-api-list&#34;&gt;Current REST API list&lt;/h2&gt;
&lt;p&gt;API endpoints start with /api/, for example, /api/documents where the
path segment following /api/ identifies the logical major resource with which they are associated.
Our APIs are continuously evolving. Our policy with regard to maintaining API compatibility is that
we may extend APIs to accept additional parameters and return additional fields in outputs without
providing any advance notification. If we decide to modify an API in a way that would alter output in
a meaningful way, we will either introduce a new API or define a new version of the existing API. API
callers should take note of the documented Accept header for an API call and specify that in their
application. When no version header is specified the behavior will behave according to the oldest
supported version.&lt;/p&gt;
&lt;p&gt;Please refer to the API Explorer for detailed information. The API Explorer describes the officially supported interfaces and documents all supported options and return values.  You should only use documented fields. Internal data may be changed or removed without notice.&lt;/p&gt;
&lt;p&gt;To obtain a complete list of API endpoints, open the API Explorer and click on the &amp;ldquo;Toggle All Endpoints&amp;rdquo; button to expand all available REST APIs. You can search this list using your browser&amp;rsquo;s search capability to locate specific interfaces.&lt;/p&gt;
&lt;h2 id=&#34;units-parameters&#34;&gt;Units parameters&lt;/h2&gt;
&lt;p&gt;The following strings are valid unit designators:&lt;/p&gt;
&lt;p&gt;For length measures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;meter, meters, m&lt;/li&gt;
&lt;li&gt;millimeter, millimeters, mm&lt;/li&gt;
&lt;li&gt;centimeter, centimeters, cm&lt;/li&gt;
&lt;li&gt;inch, inches, in&lt;/li&gt;
&lt;li&gt;foot, feet, ft&lt;/li&gt;
&lt;li&gt;yard, yards, yd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For angular measures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;degree, degrees, deg&lt;/li&gt;
&lt;li&gt;radian, radians, rad&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;change-history&#34;&gt;Change History&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;14-Sep-2017&lt;/td&gt;
&lt;td&gt;Updated sample application descriptions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;02-Feb-2016&lt;/td&gt;
&lt;td&gt;Reformat for markdown, clarify app store visibility mechanisms.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18-Nov-2015&lt;/td&gt;
&lt;td&gt;Remove deprecated interfaces, add new instructions for accessing API Explorer from the Appstore.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22-Oct-2015&lt;/td&gt;
&lt;td&gt;Add instructions for accessing the private API forum&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9-Oct-2015&lt;/td&gt;
&lt;td&gt;Document Developer Portal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14-Sep-2015&lt;/td&gt;
&lt;td&gt;Clarify OAuth requirement.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6-Jul-2015&lt;/td&gt;
&lt;td&gt;Copy editing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26-Jun-2015&lt;/td&gt;
&lt;td&gt;Add information about registering an application.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23-Jun-2015&lt;/td&gt;
&lt;td&gt;Remove caveat about tool installation now that &amp;ldquo;Add Application…&amp;rdquo; works correctly. Refer to deprecated login authentication until OAuth password auth is available.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13-Jun-2015&lt;/td&gt;
&lt;td&gt;Significant update to reflect refactoring, new samples, OAuth, new interfaces and more.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30-Mar-2015&lt;/td&gt;
&lt;td&gt;Add warning about cut/past hyphen character.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26-Mar-2015&lt;/td&gt;
&lt;td&gt;Fix ToC, add support info, add architectural overview description and diagram.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20-Mar-2015&lt;/td&gt;
&lt;td&gt;Add XSRF cookie/token handling description. Updated authentication token name information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19-Mar-2015&lt;/td&gt;
&lt;td&gt;Add change history to make it easier to track API changes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19-Mar-2015&lt;/td&gt;
&lt;td&gt;Add maxWidth and facetNormal options to edge and face tessellation APIs.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Associativity</title>
      <link>http://example.org/docs/associativity/</link>
      <pubDate>Mon, 18 May 2020 20:28:26 -0400</pubDate>
      
      <guid>http://example.org/docs/associativity/</guid>
      <description>
        
        
        &lt;p&gt;Onshape Associativity for external applications&lt;/p&gt;
&lt;p&gt;This document describes data structures and APIs that external applications can use to implement associativity.&lt;/p&gt;
&lt;p&gt;Please address questions, comments and suggestions to &amp;ldquo;&lt;a href=&#34;mailto:api-support@onshape.com&#34;&gt;api-support@onshape.com&lt;/a&gt;&amp;rdquo; for the fastest response.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Onshape data is stored in replicated databases in the cloud. The data model for accessing Parts and Assemblies through the REST API is described here. The model is influenced by the data model used by Git and similar source code repositories.&lt;/p&gt;
&lt;h2 id=&#34;onshape-data-model&#34;&gt;Onshape Data Model&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Documents&lt;/em&gt; contain &lt;em&gt;Elements&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Elements&lt;/em&gt; are presented as tabs in the user interface. An element can be one of the following types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part Studio&lt;/li&gt;
&lt;li&gt;Assembly&lt;/li&gt;
&lt;li&gt;Blob&lt;/li&gt;
&lt;li&gt;Application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With some exceptions, all data in a document is stored within an element.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Documents&lt;/em&gt; can be branched, creating new &lt;em&gt;Workspaces&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Note that &lt;em&gt;Workspaces&lt;/em&gt; are branches of the entire document. Every change to a document is recorded in the database. The *Document Microversion ID *is an ID that represents the entire state of the document at a point in the history.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Workspaces&lt;/em&gt; can be named at a point in time, creating a &lt;em&gt;Version&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Versions&lt;/em&gt; are permanent names that identify the state of a workspace at a point in time. Thus, versions are immutable - changes can be made to a workspace, not to a version.&lt;/p&gt;
&lt;p&gt;The following table describes what data stored in each &lt;em&gt;Element&lt;/em&gt; type:&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;Part Studio&lt;/td&gt;
    &lt;td&gt;Each Part Studio contains exactly one Feature List. The feature list contains Features such as Sketches, Planes, Extrudes, and so on. Each feature contains one or parameters. Onshape is in the process of publishing APIs to provide read and write access to features.
&lt;p&gt;Whenever the feature list changes, the parametric history is evaluated, causing the model to be regenerated. This results in zero or more parts and surfaces to be created.&lt;/td&gt;&lt;/p&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Assembly&lt;/td&gt;
    &lt;td&gt;Each Assembly contains an Assembly Tree, which contains parts and/or other assemblies (sub-assemblies), along with mate information. Onshape provides an API call to retrieve the assembly tree definition.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Blob&lt;/td&gt;
    &lt;td&gt;Each Blob element contains an uninterpreted binary object that has been uploaded to Onshape, typically from a file. Onshape depends on the browser client to display some blob data (PDF and image data), but does not interpret the data. A blob element can be updated with new data.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Application&lt;/td&gt;
    &lt;td&gt;Each Application element contains zero or more sub-elements, providing a structured set of transactional data that is defined and managed by an application. A detailed description of the application storage data model is described elsewhere.
&lt;p&gt;Application data can be displayed in the Onshape tab in an iframe; the application is responsible for rendering the data in the iframe from their server.&lt;/td&gt;&lt;/p&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Note that Onshape &lt;em&gt;Drawing&lt;/em&gt; elements are Application elements tagged as managed by Onshape.&lt;/p&gt;
&lt;p&gt;Documents, Elements, Workspaces, Versions, Microversions, Users and various other data objects are identified by a unique ID. These IDs form the basic building blocks for the Onshape REST API.&lt;/p&gt;
&lt;p&gt;Tessellated data is not stored persistently in Onshape; it is generated on demand for display by the Onshape clients, or in response to application REST API requests. This data may be cached for performance.&lt;/p&gt;
&lt;h2 id=&#34;git-analogy&#34;&gt;Git analogy&lt;/h2&gt;
&lt;p&gt;The following table identifies Onshape concepts and the corresponding Git concepts. Note that this is not a direct mapping, and the implementation of the concepts is very different.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;Onshape concept&lt;/td&gt;
    &lt;td&gt;Git concept&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Document&lt;/td&gt;
    &lt;td&gt;Repository&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Element&lt;/td&gt;
    &lt;td&gt;File&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Workspace&lt;/td&gt;
    &lt;td&gt;Branch&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Version&lt;/td&gt;
    &lt;td&gt;Tag&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Microversion&lt;/td&gt;
    &lt;td&gt;Commit&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Document Microversion ID&lt;/td&gt;
    &lt;td&gt;SHA&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;model-definition-data&#34;&gt;Model definition data&lt;/h2&gt;
&lt;p&gt;Model definition in Onshape is history based, each change of the model represents a unique record in the model&amp;rsquo;s history and the model can be restored to that particular state any time in the future. Each record of the model&amp;rsquo;s history has a unique persistent identifier which is called microversion id in Onshape.&lt;/p&gt;
&lt;p&gt;Model definition can be changed in a context of a Workspace only. Each workspace represents an independent line of history of the model, i.e. a sorted list of model microversions. A reference to a state of the Workspace can be stored as an immutable Version. New Workspaces can be branched from a Version, to continue model history from the moment the Version was created. One Workspace can be merged into another to combine model changes made in both workspaces. Merge conflicts leading to an invalid state of the model are possible.&lt;/p&gt;
&lt;p&gt;Part Studio model is defined by a list of features, some of which (e.g. sketch), may have complex internal structure composed of entities. Model definition features and entities are referenced by unique persistent identifiers. Model definition features and entities can appear, disappear, and reappear depending on the current microversion of the model.&lt;/p&gt;
&lt;p&gt;Assembly model is defined as a list of assembly features and a tree of subassemblies / part instances. Occurrence id is a unique persistent identifier of an occurrence of a part in the assembly structure.&lt;/p&gt;
&lt;h2 id=&#34;model-presentation-data&#34;&gt;Model presentation data&lt;/h2&gt;
&lt;p&gt;A valid model definition usually corresponds to a real world manufacturable topology. The topology is represented internally as a set of 3-d, 2-d, 1-d, 0-d entities and a set of relations between them. It can be tessellated into a set of geometric primitives which approximate the shape of the model. Tessellated data can be used for visual representation of the model or other processing related to the shape of the model.&lt;/p&gt;
&lt;p&gt;Model topology is represented as a set of Parts, Faces, Edges, and Vertices in the API. Each of these has a unique identifier in every state of the model. The identifier represents an encoded index in the model&amp;rsquo;s history journal and its value depends on the structure of the model&amp;rsquo;s history. The value is not guaranteed to be preserved across model changes, and will almost always change if the model changes in significant ways.&lt;/p&gt;
&lt;p&gt;The following changes in the topological representation can occur between two microversions of the model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New topological entities can appear;&lt;/li&gt;
&lt;li&gt;Id of existing topology can change;&lt;/li&gt;
&lt;li&gt;Topological entities can disappear;&lt;/li&gt;
&lt;li&gt;Existing topological entities can be merged into a single entity;&lt;/li&gt;
&lt;li&gt;Existing topological entity can be split into multiple entities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A pair of model microversion and Topology ID can be used to identify topological entities across the model changes. Topology ID defined in a specific microversion can be translated into a set of topology ids in the current microversion of the model. (The Topology ID is sometimes referred to as a Deterministic ID within Onshape, and is exposed in specific API calls as Part ID,  Face ID, and so on).&lt;/p&gt;
&lt;p&gt;The following table contains a summary of Topology IDs exposed through Onshape REST APIs. The details of the API calls are documented in the API Explorer.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;Topology ID&lt;/td&gt;
    &lt;td&gt;REST API&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Part ID&lt;/td&gt;
    &lt;td&gt;/partstudio/d/:did/[wvm]/:wvm/e/:eid/bodydetails
/partstudio/d/:did/[wvm]/:wvm/e/:eid/tessellatededges
/partstudio/d/:did/[wvm]/:wvm/e/:eid/tessellatedfaces
/partstudio/d/:did/[wvm]/:wvm/e/:eid/partid/:partid/shadedviews
/partstudio/d/:did/[wvm]/:wvm/e/:eid/partid/:partid/boundingboxes
/partstudios/d/:did/w/:w/e/:eid/metadata
/parts/d/:did/[wvm]/:wvm/e/:eid/bodydetails
/parts/d/:did/[wvm]/:wvm/e/:eid/tessellatededges
/parts/d/:did/[wvm]/:wvm/e/:eid/tessellatedfaces
/parts/d/:did/[wvm]/:wvm/e/:eid/partid/:partid/shadedviews
/parts/d/:did/[wvm]/:wvm/e/:eid/partid/:partid/boundingboxes
/parts/d/:did/w/:w/e/:eid/metadata
/parts/d/:did/w/:w/e/:eid
/assemblies/d/:did/w/:wvm/e/:eid
/parts/d/:did/[wvm]/:wvm/e/:eid/partid/:partid/parasolid
/parts/d/:did/[wvm]/:wvm/e/:eid/partid/:partid/stl&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Face ID&lt;/td&gt;
    &lt;td&gt;/partstudios/d/:did/[wvm]/:wvm/e/:eid/bodydetails
/partstudios/d/:did/[wvm]/:wvm/e/:eid/tessellatedfaces
/partstudios/d/:did/[wvm]/:wvm/e/:eid/tessellatededges
/part/d/:did/[wvm]/:wvm/e/:eid/bodydetails
/part/d/:did/[wvm]/:wvm/e/:eid/tessellatedfaces
/part/d/:did/[wvm]/:wvm/e/:eid/tessellatededges&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Edge ID&lt;/td&gt;
    &lt;td&gt;/partstudios/d/:did/[wvm]/:wvm/e/:eid/bodydetails
/partstudios/d/:did/[wvm]/:wvm/e/:eid/tessellatededges
/parts/d/:did/[wvm]/:wvm/e/:eid/bodydetails
/parts/d/:did/[wvm]/:wvm/e/:eid/tessellatededges&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Vertex ID&lt;/td&gt;
    &lt;td&gt;/partstudios/d/:did/[wvm]/:wvm/e/:eid/bodydetails
/parts/d/:did/[wvm]/:wvm/e/:eid/bodydetails&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;associativity&#34;&gt;Associativity&lt;/h2&gt;
&lt;p&gt;The key to understanding associativity in Onshape is to recognize that Onshape does not expose a persistent ID for any of these entities. When the model changes, the ID may change. Therefore, Onshape provides an API that allows you map IDs from a previous microversion to the current microversion. Assuming a simple case of maintaining associativity for a face, an abstract workflow might be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read the tessellated model data.&lt;/li&gt;
&lt;li&gt;Select the face of interest.&lt;/li&gt;
&lt;li&gt;Store the Face ID and Document Microversion ID for the face.&lt;/li&gt;
&lt;li&gt;[ user changes model ]&lt;/li&gt;
&lt;li&gt;Call the REST API to translate from the known Face ID to an ID in the new model.&lt;/li&gt;
&lt;li&gt;Re-apply application-specific data to the face(s) in the new model. Note that a face may become zero, one or multiple faces in the new model, depending on what changes the user made.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following example shows the sequence of API calls.&lt;/p&gt;
&lt;h3 id=&#34;associativity-example&#34;&gt;Associativity Example&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a unit length [cube]:
&lt;img src=&#34;http://example.org/images/associativityimage03.png&#34; alt=&#34;image alt text&#34;&gt;&lt;/li&gt;
&lt;li&gt;Get document microversion (&lt;code&gt;https://cad.onshape.com/api/documents/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/microversion&lt;/code&gt;).
Use the appropriate REST API to get the tessellated faces &lt;code&gt;https://cad.onshape.com/api/partstudios/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/e/&amp;lt;eid&amp;gt;/tessellatedfaces&lt;/code&gt;
and edges &lt;code&gt;https://cad.onshape.com/api/partstudios/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/e/&amp;lt;eid&amp;gt;/tessellatededges&lt;/code&gt;. Note the ids:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Part Id : &amp;ldquo;JHD&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;Front face Id : &amp;ldquo;JHO&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;Top edge of the front face Id : &amp;ldquo;JHd&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;Right edge of the top face Id : &amp;ldquo;JHt&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Split cube with the [&amp;ldquo;Front&amp;rdquo; plane], translate ids:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/images/associativityimage00.png&#34; alt=&#34;image alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt; &lt;code&gt;https://cad.onshape.com/api/partstudios/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/e/&amp;lt;eid&amp;gt;/idtranslations&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Body&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{&#34; data-lang=&#34;{&#34;&gt;  &amp;quot;sourceDocumentMicroversion&amp;quot; : &amp;quot;47e75ab2ee8b4356a76ebd47&amp;quot;,
  &amp;quot;ids&amp;quot; : [&amp;quot;JHD&amp;quot;, &amp;quot;JHO&amp;quot;, &amp;quot;JHd&amp;quot;, &amp;quot;JHt&amp;quot;  ]
}```

**Response**:

```{
    &amp;quot;documentId&amp;quot;: &amp;quot;748d6e850c9248328189922b&amp;quot;,
    &amp;quot;elementId&amp;quot;: &amp;quot;042a6fa54e79451e8076463d&amp;quot;,
    &amp;quot;sourceDocumentMicroversion&amp;quot;: &amp;quot;47e75ab2ee8b4356a76ebd47&amp;quot;,
    &amp;quot;ids&amp;quot;: [
        { &amp;quot;source&amp;quot;: &amp;quot;JHD&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;SPLIT&amp;quot;, &amp;quot;target&amp;quot;: [&amp;quot;JID&amp;quot;, &amp;quot;JIH&amp;quot;] },
        { &amp;quot;source&amp;quot;: &amp;quot;JHO&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;OK&amp;quot;, &amp;quot;target&amp;quot;: [&amp;quot;JHO&amp;quot;] },
        { &amp;quot;source&amp;quot;: &amp;quot;JHd&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;OK&amp;quot;, &amp;quot;target&amp;quot;: [&amp;quot;JHd&amp;quot;] },
        { &amp;quot;source&amp;quot;: &amp;quot;JHt&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;SPLIT&amp;quot;, &amp;quot;target&amp;quot;: [&amp;quot;JI5&amp;quot;, &amp;quot;JI9&amp;quot;] }
    ],
    &amp;quot;targetDocumentMicroversion&amp;quot;: &amp;quot;78bc7f3fcf82475085c2f3ab&amp;quot;
}```

4. Delete one of the [parts], translate ids:

![image alt text](/images/associativityimage01.png)

**POST** `https://cad.onshape.com/api/partstudios/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/e/&amp;lt;eid&amp;gt;/idtranslations`

**Body**:

```{
  &amp;quot;sourceDocumentMicroversion&amp;quot; : &amp;quot;47e75ab2ee8b4356a76ebd47&amp;quot;,
  &amp;quot;ids&amp;quot; : [&amp;quot;JHD&amp;quot;, &amp;quot;JHO&amp;quot;, &amp;quot;JHd&amp;quot;, &amp;quot;JHt&amp;quot;]
}```

**Response**:

```{
    &amp;quot;documentId&amp;quot;: &amp;quot;748d6e850c9248328189922b&amp;quot;,
    &amp;quot;elementId&amp;quot;: &amp;quot;042a6fa54e79451e8076463d&amp;quot;,
    &amp;quot;sourceDocumentMicroversion&amp;quot;: &amp;quot;47e75ab2ee8b4356a76ebd47&amp;quot;,
    &amp;quot;ids&amp;quot;: [
        { &amp;quot;source&amp;quot;: &amp;quot;JHD&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;OK&amp;quot;, &amp;quot;target&amp;quot;: [&amp;quot;JID&amp;quot;] },
        { &amp;quot;source&amp;quot;: &amp;quot;JHO&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;FAILED_TO_RESOLVE&amp;quot;, &amp;quot;target&amp;quot;: [] },
        { &amp;quot;source&amp;quot;: &amp;quot;JHd&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;FAILED_TO_RESOLVE&amp;quot;, &amp;quot;target&amp;quot;: [] },
        { &amp;quot;source&amp;quot;: &amp;quot;JHt&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;OK&amp;quot;, &amp;quot;target&amp;quot;: [&amp;quot;JI5&amp;quot;] }
    ],
    &amp;quot;targetDocumentMicroversion&amp;quot;: &amp;quot;52aa74d34b624f3aaef33204&amp;quot;
}```

5. Rollback delete and [split], translate ids:

![image alt text](/images/associativityimage02.png)

**POST** `https://cad.onshape.com/api/partstudios/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/e/&amp;lt;eid&amp;gt;/idtranslations`

**Body**:

```{
  &amp;quot;sourceDocumentMicroversion&amp;quot; : &amp;quot;47e75ab2ee8b4356a76ebd47&amp;quot;,
  &amp;quot;ids&amp;quot; : [&amp;quot;JHD&amp;quot;, &amp;quot;JHO&amp;quot;, &amp;quot;JHd&amp;quot;, &amp;quot;JHt&amp;quot;]
}```

**Response**:

```{
    &amp;quot;documentId&amp;quot;: &amp;quot;748d6e850c9248328189922b&amp;quot;,
    &amp;quot;elementId&amp;quot;: &amp;quot;042a6fa54e79451e8076463d&amp;quot;,
    &amp;quot;sourceDocumentMicroversion&amp;quot;: &amp;quot;47e75ab2ee8b4356a76ebd47&amp;quot;,
    &amp;quot;ids&amp;quot;: [
        { &amp;quot;source&amp;quot;: &amp;quot;JHD&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;OK&amp;quot;, &amp;quot;target&amp;quot;: [&amp;quot;JID&amp;quot;] },
        { &amp;quot;source&amp;quot;: &amp;quot;JHO&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;OK&amp;quot;, &amp;quot;target&amp;quot;: [&amp;quot;JHO&amp;quot;] },
        { &amp;quot;source&amp;quot;: &amp;quot;JHd&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;OK&amp;quot;, &amp;quot;target&amp;quot;: [&amp;quot;JHd&amp;quot;] },
        { &amp;quot;source&amp;quot;: &amp;quot;JHt&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;OK&amp;quot;, &amp;quot;target&amp;quot;: [&amp;quot;JHt&amp;quot;] }
    ],
    &amp;quot;targetDocumentMicroversion&amp;quot;: &amp;quot;52aa74d34b624f3aaef33204&amp;quot;
}```&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Billing</title>
      <link>http://example.org/docs/billing/</link>
      <pubDate>Mon, 18 May 2020 20:29:36 -0400</pubDate>
      
      <guid>http://example.org/docs/billing/</guid>
      <description>
        
        
        &lt;p&gt;Using Billing within Onshape&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Last updated 30-October-2015&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This document describes APIs that will allow partners to interact with the Onshape billing system.&lt;/p&gt;
&lt;p&gt;Please address questions to &amp;ldquo;&lt;a href=&#34;mailto:api-support@onshape.com&#34;&gt;api-support@onshape.com&lt;/a&gt;&amp;rdquo; for the fastest response.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;All billing is done through &amp;ldquo;plans&amp;rdquo; that are created in the Developer Portal. A “plan” has the following attributes:&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;Name (also called SKU)&lt;/td&gt;
    &lt;td&gt;A unique (within your company) plan name&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Description&lt;/td&gt;
    &lt;td&gt;A user-visible description of the plan&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Amount&lt;/td&gt;
    &lt;td&gt;The cost of the plan (may be one-time or recurring, depending on the type)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Type&lt;/td&gt;
    &lt;td&gt;Monthly, One-time or Consumable&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Onshape defines three kinds of plans:&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;Plan type&lt;/td&gt;
    &lt;td&gt;Description&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Recurring
(Monthly Subscription)&lt;/td&gt;
    &lt;td&gt;A plan that is renewed monthly at a fixed cost. All Apps in the app store must have a Free monthly plan (which is created by default), and may have additional paid plans.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;One-time&lt;/td&gt;
    &lt;td&gt;A plan that is purchased once (not renewed monthly). A user may purchase these multiple times.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Consumable&lt;/td&gt;
    &lt;td&gt;A plan that represents a consumable unit, such as &#34;hours of rendering&#34; or “simulation runs”. Consumable plans are not fully implemented at this time, but the consumable functionality can be implemented using One-time Purchase plans as described below.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Users may purchase plans through the App Store interface. In addition, if your application has the OAuth Purchase Scope, your application can initiate &amp;ldquo;in-app&amp;rdquo; purchases by calling Onshape to request a purchase.&lt;/p&gt;
&lt;p&gt;The basic steps for interacting with Onshape Billing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Define one or more plans using the Developer Portal interface&lt;/li&gt;
&lt;li&gt;Use the Onshape API to determine the current user’s plan&lt;/li&gt;
&lt;li&gt;Provide features and/or limits based on the current plan&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;using-the-onshape-billing-api&#34;&gt;Using the Onshape Billing API&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;GET /api/accounts/purchases&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Returns a list of purchase made by the current user for plans owned by the current application. Use this information to determine what capabilities or features the user is entitled to use.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DELETE /api/accounts/purchases/&amp;lt;purchase id&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Cancel a recurring purchase.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST /api/accounts/purchases/&amp;lt;purchase id&amp;gt;/consume&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Indicate the use of a consumable. (Not fully implemented at this time)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET /api/billing/plans/client/&amp;lt;client id&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Get a list of the billing plans defined for this client.&lt;/p&gt;
&lt;h2 id=&#34;initiating-a-purchase-from-an-application-in-app-purchases&#34;&gt;Initiating a purchase from an application (in-app purchases)&lt;/h2&gt;
&lt;p&gt;To initiate a purchase of a subscription or one time item you must set the browser’s location to particular URL within the Onshape stack:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://cad.onshape.com/billing/purchase?redirectUri=RRRR&amp;amp;clientId=CCCC&amp;amp;sku=SSSS&amp;amp;userId=UUUU&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Each of the query parameters should be URL encoded. The clientId is your application’s OAuth Client ID, the sku is the name/sku field for an item (you can find this in the developer portal or it’s retrievable through the /api/billing/plans REST endpoints). The user Id should be the Onshape user Id for the current user and is available through the /api/users/session REST endpoint. The redirectUri is the URI the user will be returned to within your website when the purchase is finished.&lt;/p&gt;
&lt;p&gt;When the browser’s location is changed to this pattern the Onshape stack will serve content to confirm the users identity, confirm the details of what is being purchased (or obtained if the item is free) and then after the user agrees to the purchase will confirm the transaction (with our payment processor if the item is not free) and then redirect the user back to the supplied redirectUri (the browser location will be changed to the redirectUri). Additionally Onshape will add a &lt;code&gt;success=true&lt;/code&gt; or &lt;code&gt;success=false&lt;/code&gt; query parameter to the redirectURI indicating whether the user completed successfully (payment was taken if required etc.) or failed, either due to cancelling the purchase or an issue with payment.&lt;/p&gt;
&lt;p&gt;When the browser fetches the redirectUri your application must call back through the &lt;code&gt;/api/account/purchases&lt;/code&gt; API to get confirmation of the purchase - do NOT assume that a fetch of the redirectUri with a &lt;code&gt;success=true&lt;/code&gt; query parameter actually indicates a purchase has occurred. Query the Onshape stack with the &lt;code&gt;/api/account/purchases&lt;/code&gt; API to ensure that the required item has actually been bought.&lt;/p&gt;
&lt;h2 id=&#34;consumable-items&#34;&gt;Consumable Items&lt;/h2&gt;
&lt;p&gt;A detailed description of the interface for managing consumable purchases will be provided shortly. You can use one-time plans to achieve similar results:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Define a one-time purchase plan with a description indicating the nature of the purchase, for example:&lt;/p&gt;
&lt;p&gt;RENDER-10	Ten rendering hours	$100&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep track of the number of hours that the user has consumed. You can store and retrieve this information in Onshape using the following APIs. These APIs allow you to store and retrieve arbitrary information on a per-user basis.&lt;/p&gt;
&lt;p&gt;POST /applications/clients/:cid/settings/users/:uid
GET  /applications/clients/:cid/settings/users/:uid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the number of available &amp;ldquo;units&amp;rdquo; by getting the purchases and the record of consumables. Be sure to include UI in your application that the user can use to see their remaining quantity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alternately, you can store the consumption data in your own system; you do not need to use the Onshape API to manage that data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Onshape intends to provide a richer set of APIs that help track the purchase and consumption of consumables in the near future.&lt;/p&gt;
&lt;h2 id=&#34;other-billing-models&#34;&gt;Other billing models&lt;/h2&gt;
&lt;p&gt;You can use these mechanisms to implement other models. For example, a time-limited trial could be implemented by scanning purchases for the first &amp;ldquo;purchase&amp;rdquo; and denying service if it is more than a defined number of days in the past. A “fixed number of uses per month” could be implemented as a monthly subscription, string usage data with the settings API, and denying service after a fixed number of uses.&lt;/p&gt;
&lt;h2 id=&#34;samples&#34;&gt;Samples&lt;/h2&gt;
&lt;p&gt;Onshape will provide sample code for both desktop and integrated applications demonstrating the use of the billing APIs and workflow. If you are subscribed to the Onshape Github Partner group, you will have access to those samples as soon as they are posted.&lt;/p&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Please contact &lt;a href=&#34;mailto:api-support@onshape.com&#34;&gt;api-support@onshape.com&lt;/a&gt; to discuss details of testing billing &amp;amp; subscriptions.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Client Messaging</title>
      <link>http://example.org/docs/clientmessaging/</link>
      <pubDate>Mon, 18 May 2020 20:30:40 -0400</pubDate>
      
      <guid>http://example.org/docs/clientmessaging/</guid>
      <description>
        
        
        &lt;h1 id=&#34;javascript-post-message-api&#34;&gt;JavaScript Post Message API&lt;/h1&gt;
&lt;p&gt;Last updated 29-October-2015&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Application elements and the Onshape JavaScript web client need to communicate directly, calling across the iframe containing the application element using post message.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://example.org/images/javascriptpostmessageimage00.png&#34; alt=&#34;image alt text&#34;&gt;&lt;/p&gt;
&lt;p&gt;Typical use cases (not all currently implemented) include:&lt;/p&gt;
&lt;h2 id=&#34;from-the-application-element-to-the-onshape-client&#34;&gt;From the Application Element to the Onshape Client:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Click/Close Flyouts Events&lt;/strong&gt; - Notify the Onshape client that the user has clicked in the application element, which should cause Onshape flyouts (versions, history, uploads, etc.) and dropdown menus (profile dropdown menu, document menu) to close.  Without this, the flyouts and menus remain open, over the application element.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Shortcut Keyboard Events&lt;/strong&gt; - Shortcut keys such as &amp;ldquo;?&amp;rdquo; that should open the Onshape help dialog could be handled by the application element posting a message to the Onshape client to open the help dialog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keep Alive&lt;/strong&gt; - Notify the Onshape client that the user is actively working in the application element, which will cause the Onshape client to send a message to the server to keep the browser session alive.  Without this, the Onshape browser session will timeout after some amount of time, asking the user to login again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Standard Onshape Dialogs&lt;/strong&gt; - Request from the application element to the Onshape client to open one of the Onshape standard dialogs and send the user’s choices back to the application element.  For example, if the application element needs the user to choose a part or assembly to be operated on, the application element can post a message to the Onshape client requesting that dialog be opened and the selected part or assembly information sent back to the application element.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UI Customization&lt;/strong&gt; - Request from the application element to the Onshape client to customize the Onshape UI - to add commands to menus, add buttons to the toolbars, etc.  When such commands or toolbar buttons are clicked, the Onshape client would post a message to the application element with the available context.  **Note - **this is limited to cases where the application element is made active by the user, as application elements are not automatically loaded when a document is opened.  Most UI customizations should be done when you register the application with Onshape, as those would change the Onshape client automatically without needing to load the application element first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content/Material Insertion&lt;/strong&gt; - Request from the application element to insert content into the Onshape document.  Possible examples: to insert a part into a new or existing partstudio, to apply a material to a part, or to add a material to a material library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;from-the-onshape-client-to-the-application-element&#34;&gt;From the Onshape Client to the Application Element:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;**User Action Notification **- The Onshape client could notify an application element when various user actions happen.  For example, the Onshape client might notify when the user has made the application element active or inactive (when the user clicks on document tabs), as there is no way to know this currently otherwise except when initially loading an application element.  When an application element is made inactive, it is moved off the edges of the browser, so it cannot be seen but is still active, preserving its state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Printing&lt;/strong&gt; - The Onshape client could notify an application element when the user has chosen the Print command from the main Onshape document menu, enabling the application element to do a print operation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;posting-a-message-from-the-application-element-to-the-onshape-client&#34;&gt;Posting a message from the Application Element to the Onshape Client&lt;/h2&gt;
&lt;p&gt;To ensure security, an application element must:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;document, workspace and element ids&lt;/strong&gt; - Parse for the document id, workspace id and element id that were passed as query parameters within the application element’s iframe src URL.  You will need to post these back in each post message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;server&lt;/strong&gt; - Parse for the server that was passed as a query parameter within the application element’s iframe src URL.  You will need to use this to validate messages received, as shown later in this document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;do not redirect to another base URL&lt;/strong&gt; - The browser will tell the Onshape client the origin base URL from which a post message is received.  The Onshape client will ignore messages posted from an origin URL that doesn’t match the original iframe src URL.  Hence application elements should not redirect to another base URL after the iframe has been opened, as that will result in the Onshape ignoring its messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;post a message on startup&lt;/strong&gt; - After an application element has started up and finished loading, it should post a message to the Onshape client.  This tells the Onshape client that the application element is able to handle post messages.  The Onshape client will not post a message to an application element until it has first received a message from the application element.  This ensures the Onshape client won’t send messages to an application element that isn’t listening for them and won’t send messages until the application element is fully loaded.  Any type of valid message sent to the Onshape client will trigger postings from the Onshape client (e.g. keepAlive).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This JavaScript code parses the iframe src query parameters uses them to post a message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  var documentId;
  var workspaceId;
  var elementId;
  var server;

  // Parse query parameters
  var queryParameters = decodeURIComponent(window.location.search.substr(1));
  var queryParametersArray = queryParameters.split(&#39;&amp;amp;&#39;);
  for (var i = 0; i &amp;lt; queryParametersArray.length; i++) {
    var parameterArray = queryParametersArray[i].split(&#39;=&#39;);
    if (parameterArray.length === 2) {
      switch (parameterArray[0]) {
        case &#39;documentId&#39;:
          documentId = parameterArray[1];
          break;
        case &#39;workspaceId&#39;:
          workspaceId = parameterArray[1];
          break;
        case &#39;elementId&#39;:
          elementId = parameterArray[1];
          break;
        case &#39;server&#39;:
          server = parameterArray[1];
          break;
      }
    }
  }

  // Listen for clicks and post a message to the Onshape client
  document.getElementById(&#39;&amp;lt;id of your topmost element&amp;gt;&#39;).
    addEventListener(&#39;click&#39;, function() {
      var message = {documentId: documentId,
                     workspaceId: workspaceId,
                     elementId: elementId,
                     messageName: &#39;closeFlyoutsAndMenus&#39;};
      window.parent.postMessage(message, &#39;*&#39;);
    }, true);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The server query parameter is used when receiving post messages from Onshape.  See later in this document.&lt;/p&gt;
&lt;p&gt;If the application element uses a JavaScript library or framework such as BackboneJS or AngularJS, it can parse the query parameters and maintain state in other ways.&lt;/p&gt;
&lt;p&gt;The message object posted to the Onshape client is of the form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    documentId: documentId,
     workspaceId: workspaceId,
     elementId: elementId,
     messageName: &#39;&amp;lt;message name&amp;gt;&#39;,
     … other properties as needed for other message types …};
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The messages supported currently are:&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;messageName
(case sensitive)&lt;/td&gt;
    &lt;td&gt;other message properties?&lt;/td&gt;
    &lt;td&gt;comment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;applicationInit&lt;/td&gt;
    &lt;td&gt;yes
&lt;p&gt;notifyWhenSaveRequired: whether Onshape should send a notification to save pending changes during certain operations
(default is false)&lt;/p&gt;
&lt;/td&gt;
    &lt;td&gt;Send once on application startup.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;closeFlyoutsAndMenus&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Send when a mouse click or other event happens in the application element.  Closes Onshape flyouts and dropdown menus.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;closeSelectItemDialog&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Closes the select item dialog.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;connectionLost&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Displays the standard Onshape connection lost message in a message bubble, forcing the user to either reload the document or return to the documents page.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;errorReload&lt;/td&gt;
    &lt;td&gt;yes
&lt;p&gt;message: your message&lt;/td&gt;
&lt;td&gt;Similar to the connectionLost message, but enables an application to specify the first part of the message, which will be used instead of &amp;ldquo;Onshape is not connected.&amp;rdquo;  The user must reload the document or return to the documents page.&lt;/td&gt;&lt;/p&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;finishedSaving&lt;/td&gt;
    &lt;td&gt;yes
&lt;p&gt;messageId: the id sent in the corresponding &amp;lsquo;saveChanges&amp;rsquo; message&lt;/td&gt;
&lt;td&gt;Response to a &amp;lsquo;saveChanges&amp;rsquo; message sent from Onshape. Should be sent after application has cleaned up any pending edits.&lt;/td&gt;&lt;/p&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;keepAlive&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Send periodically while while the user is actively working to avoid the session from timing out.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;saveAVersion&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Send when the user types “Shift-S” in the application element, the keyboard shortcut for save a version.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;showKeyboardShortcutsHelp&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Send when the user types “?” (Shift-? on most keyboards) in the application element, the keyboard shortcut for the keyboard shortcuts help dialog.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;showMessageBubble&lt;/td&gt;
    &lt;td&gt;yes
&lt;p&gt;message: your message&lt;/td&gt;
&lt;td&gt;Send when you want to show a string in the blue message bubble at the top of the Onshape app.&lt;/td&gt;&lt;/p&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;startLoadingSpinner&lt;/td&gt;
    &lt;td&gt;yes
&lt;p&gt;message: your message&lt;/td&gt;
&lt;td&gt;Send to start a large spinner in the middle of the browser window with your message underneath it.&lt;/td&gt;&lt;/p&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;stopLoadingSpinner&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Send to stop the large spinner.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;startWorkingSpinner&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Send to start a small spinner in the middle bottom of the browser window.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;stopWorkingSpinner&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Send to stop the small spinner.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;openSelectItemDialog&lt;/td&gt;
    &lt;td&gt;yes
&lt;p&gt;dialogTitle: your dialog title
(default is no title),
selectBlobs: true or false
(default is false),
selectParts: true or false
(default is false),
selectPartStudios: true or false
(default is false),
selectAssemblies: true or false
(default is false),
selectMultiple: true or false
(default is false),
selectBlobMimeTypes: ‘comma-delimited string of blob mime types to show in dialog (e.g. “application/dwt,application/dwg”)’
(default is an empty string)
showBrowseDocuments: true or false - controls whether ‘Other documents’ choice should be available
(default is true)
showStandardContent: true or false - controls whether ‘Standard content’ choice should be available
(default is false)&lt;/p&gt;
&lt;/td&gt;
    &lt;td&gt;Send when your application wants to open a dialog in which the user will select one or multiple items - blobs, parts, part studios or assemblies.
&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;requestCameraProperties&lt;/td&gt;
    &lt;td&gt;yes
&lt;p&gt;graphicsElementId: string , Element ID of the part studio or assembly &lt;/td&gt;
&lt;td&gt;
Send to request camera properties of a specific part studio or assembly element. Note: The element should have been opened at least once in the current session. The messageName of the response is cameraProperties
&lt;/td&gt;&lt;/p&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As said before, a message will be ignored if any of the following are true:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the document id, workspace id or element id are missing or not valid.&lt;/li&gt;
&lt;li&gt;If the message name is missing or not recognized.&lt;/li&gt;
&lt;li&gt;If the origin of the post message does not match the original iframe src URL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Receiving a message from the Onshape Client&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As said earlier in this document, the Onshape client will not post messages to an application element until the application element has loaded and sent at least one message to the Onshape client.  Typically an application element would send a keepAlive message after it is fully loaded to initiate messaging.&lt;/p&gt;
&lt;p&gt;The message data object posted to the application element is of the form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    messageName: &#39;&amp;lt;message name&amp;gt;&#39;,
     … other properties as needed for other message types …
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The messages supported currently are:&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;messageName
(case sensitive)&lt;/td&gt;
    &lt;td&gt;other message properties?&lt;/td&gt;
    &lt;td&gt;comment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;show&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Sent when an application element is shown (made active) within the Onshape client.   This message is NOT sent when the application element is created.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;hide&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Sent when an application element is made inactive within the Onshape client.  This message is NOT sent when an application element is deleted.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;itemSelectedInSelectItemDialog&lt;/td&gt;
    &lt;td&gt;yes
```
documentId: id of selected item’s document,
workspaceId: id of selected item’s workspace, empty if versionId not empty,
versionId: id of selected item’s version, empty if workspaceId not empty,
elementId: id of element selected or containing the selected part,
elementName: name of element selected or containing the selected part,
elementType: type of element selected or containing the selected part - ‘partstudio’, ‘assembly’ or ‘blob’,
elementMicroversionId: microversion id of the element,
itemType: type of item selected: ‘part’,‘partStudio’ or ‘assembly’,
partName: name of part selected, empty if itemType is not ‘part’,
idTag: id of part, empty if no part selected
```
    &lt;/td&gt;
    &lt;td&gt;Sent when the user selects an item (blob, part, part studio or assembly) in the select item dialog that was opened due to an openSelectItemDialog message sent earlier.
When a part is not selected, the partXxx message properties will be empty strings.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Sent when the user chooses the Print command while the application is the active element.  The application can choose to handle this as either a print or an export to a PDF or other format.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;selectItemDialogClosed&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Sent when the select item dialog closes, either because the user selected an item and selectMultiple is false, or the user changed the active element or the user closed the dialog with the &#34;X&#34; button.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;startFirstViewCommand&lt;/td&gt;
    &lt;td&gt;                  yes
```
documentId: id of selected item’s document,
workspaceId: id of selected item’s workspace, empty if versionId not empty,
versionId: id of selected item’s version, empty if workspaceId not empty,
elementId: id of element selected or containing the selected part,
elementName: name of element selected or containing the selected part,
elementType: type of element selected or containing the selected part - ‘partstudio’, ‘assembly’ or ‘blob’,
elementMicroversionId: microversion id of the element,
itemType: type of item selected: ‘part’,‘partstudio’ or ‘assembly’,
partName: name of part selected, empty if itemType is not ‘part’,
idTag: id of part
```
&lt;/td&gt;
    &lt;td&gt;Sent to a drawings application element when the drawing is created with zero views.
&lt;p&gt;If other types of applications need a message posted to them with creation context, contact Onshape and we can discuss using this sort of message for your application also.&lt;/td&gt;&lt;/p&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;export&lt;/td&gt;
    &lt;td&gt;yes
```
fileExtension: the file extension of the export type the user chose - “.dwg”, “.dxf” are the types currently supported.
baseFileName: the base portion of the expected output file.  This is currently set to “&lt;document name&gt; - &lt;element name&gt;”&lt;/td&gt;
```
    &lt;td&gt;Sent when the user chooses a command to export the contents of the application to a file.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;cameraProperties&lt;/td&gt;
    &lt;td&gt;yes
&lt;pre&gt;&lt;code&gt;graphicsElementId: string , Element ID of the part studio or assembly
isValid: boolean, Indicates if the properties are valid or not. false if element ID is invalid or element has not been open in the current session
projectionType: string, Denotes the projection method. Values are ‘orthographic’, ‘perspective’ . Empty string ‘’ if isValid is false
viewMatrix: 16 element numeric matrix with elements at index 13, 14, 15 corresponding to position of the camera
projectionMatrix: 16 element numeric matrix
verticalFieldOfView: number, 0 in case of orthographic projection
viewportHeight:      number, eight of the viewport
viewportWidth:       number, width of the viewport
&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;
    &lt;td&gt;Sent when application posts a requestCameraProperties message&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;takeFocus&lt;/td&gt;
    &lt;td&gt;no&lt;/td&gt;
    &lt;td&gt;Sent when the Onshape client sets focus on the content window of the application element.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;saveChanges&lt;/td&gt;
    &lt;td&gt;yes
&lt;p&gt;messageId: a unique identifier for this message. Should be passed back in the &amp;lsquo;finishedSaving&amp;rsquo; message.&lt;/td&gt;
&lt;td&gt;Sent if the application specified &amp;lsquo;notifyWhenSaveRequired&amp;rsquo; in the &amp;lsquo;applicationInit&amp;rsquo; message. Indicates that the application should cleanup any pending edits before an Onshape process continues (i.e. version save).&lt;/td&gt;&lt;/p&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The message will always have a ‘messageName’ property.&lt;/p&gt;
&lt;p&gt;Here’s some JavaScript code showing how to listen for messages from the Onshape client:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  // server is one of the iframe src query parameters - see above

  var handlePostMessage = function(e) {
    console.log(&amp;quot;Post message received in application element.&amp;quot;);
    console.log(&amp;quot;e.origin = &amp;quot; + e.origin);

    // Verify the origin matches the server iframe src query parameter
    if (server === e.origin) {
      console.log(&amp;quot;Message safe and can be handled as it is from origin &#39;&amp;quot;
                  + e.origin +
                  &amp;quot;&#39;, which matches server query parameter &#39;&amp;quot;
                  + server + &amp;quot;&#39;.&amp;quot;);
      if (e.data &amp;amp;&amp;amp; e.data.messageName) {
        console.log(&amp;quot;Message name = &#39;&amp;quot; + e.data.messageName + &amp;quot;&#39;&amp;quot;);
      } else {
        console.log(&amp;quot;Message name not found. Ignoring message.&amp;quot;);
      }
    } else {
      console.log(&amp;quot;Message NOT safe and should be ignored.&amp;quot;);
    }
  };

  window.addEventListener(&#39;message&#39;, handlePostMessage, false);
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;It is &lt;em&gt;extremely important&lt;/em&gt; to the security of your application that you verify that the origin of all messages you receive is the same as the original server query parameter in the iframe src, as shown above:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;       if (server === e.origin) {
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;In production operation especially, the message IS NOT SAFE if the message origin does not match the iframe src server query parameter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Application Must Post First Message&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Onshape will not post messages to an application until that application has previously posted a valid message to Onshape.  This is to avoid posting messages to an application that isn’t ready to handle them, isn’t fully loaded, etc.&lt;/p&gt;
&lt;p&gt;So after your application is fully loaded and ready to receive messages, post a message to Onshape.  A keepAlive message is a great first message to send to Onshape.  Once Onshape receives a valid message, Onshape will start posting messages to the application.&lt;/p&gt;
&lt;p&gt;If the application later sends an invalid message to Onshape, again Onshape will stop sending messages until a valid message is posted to Onshape.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keyboard Focus / Shortcut Keys&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Keyboard focus will not be transferred to an application until the user clicks in the application or the application programmatically takes focus.  The simplest thing is an application should programmatically take focus when it is first loaded and then also take focus when it receives a &amp;ldquo;show&amp;rdquo; message from Onshape.  If an application does this, then shortcut keys will work immediately when the application is shown.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future Notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;New message types will be added as needed.  If your application element needs a message not listed in this document, please notify Onshape and we’ll work with you on it.&lt;/p&gt;
&lt;p&gt;Mobile client support is unclear at this time.&lt;/p&gt;
&lt;p&gt;Onshape is considering using promises to wrap post messages.  This would make the application element’s JavaScript simpler and enables chaining posts with other operations.  But promises would make some sorts of interactions where there are multiple responses difficult, such as when you open a dialog like the select item dialog and want to receive multiple post messages back due to the user clicking on multiple items in the dialog.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Feature List API</title>
      <link>http://example.org/docs/featureaccess/</link>
      <pubDate>Mon, 18 May 2020 20:37:28 -0400</pubDate>
      
      <guid>http://example.org/docs/featureaccess/</guid>
      <description>
        
        
        &lt;p&gt;Onshape Part Studio Feature Access API&lt;/p&gt;
&lt;p&gt;May 1, 2017&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;The Onshape Part Studio tab tracks edits in terms of a feature list.  Creation and modification of geometry is
performed by manipulating that list.  This document describes capabilities that are intended to allow partners
and customers to manipulate the feature list from software.&lt;/p&gt;
&lt;p&gt;The feature API comprises the following API methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GET /api/partstudios/DWMVE/features - get feature list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET /api/partstudios/DWMVE/featurespecs - get feature specs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POST /api/partstudios/DWE/features - add feature to feature list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POST /api/partstudios/DWE/features/featureid/:fid - update an existing feature in feature list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DELETE /api/partstudios/DWE/features/featureid/:fid - delete an existing feature from feature list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POST /api/partstudios/DWE/features/features/updates - selectively update features in feature list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POST /api/partstudios/DWE/features/rollback - move the rollback bar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POST /api/partstudios/DWMVE/featurescript - evaluate featurescript&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As well as related configuration API methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GET /api/partstudios/DWMVE/configuration - get part studio configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POST /api/partstudios/DWE/configuration - update part studio configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the use of &amp;ldquo;DWE&amp;rdquo; occurrences within this document are a shorthand notation for “d/:did/w/:wid/e/:eid”
and DWMVE occurrences within this document are a shorthand notation for any of “d/:did/w/:wid/e/:eid”,
“d/:did/v/:vid/e/:eid”, “d/:did/m/:mid/e/:eid”.  It is assumed that the reader is familiar with these URL path patterns
from the API Explorer documentation.&lt;/p&gt;
&lt;h2 id=&#34;api-methods&#34;&gt;API Methods&lt;/h2&gt;
&lt;p&gt;The methods described here are also documented at an overview level in the API Explorer within the Part Studios group.&lt;/p&gt;
&lt;h3 id=&#34;get-feature-list&#34;&gt;Get Feature List&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;GET /api/partstudios/DWMVE/features - get feature list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have a part studio ekement, you can call the get feature list api to find the features that are instantiated within the part studio.
The return structure contains the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;features - A list of user-define features in the part studio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;defaultFeatures - A list of the default feature (pre-defined) in the part studio&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;imports - A list of capabilities that may be referenced by the features. We currently only support a specific
predefined set of geometry capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;featureStates - A list of feature states, one per feature, which describe whether the feature is valid. If a feature
has been added to the feature list with an incorrect definition it remains in the feature list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;isComplete - A boolean indicating whether the features represents the entire part studio (true) or is only a subset
(false).  The result is a subset if the call to the api specifies a filter on the feature ids&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rollbackIndex - The ordinal position of the rollback bar w.r.t. the list of features.  Onshape only executes features
that are prior to the rollback bar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serializationVersion - A string identifying the version of the structure serialization rules used to encode the
output. This is included so that if the output is fed back in and the software has changed incompatibilities can be
detected&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sourceMicroversion - The microversion identifier for the document that describes the state from which the result was
extracted. This is critical when attempting to use geometry ids that are included in the output, since the
interpretation of a geometry id is dependent on the document microversion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libraryVersion - An integer indicating the version number for FeatureScript in the Part Studio&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;get-feature-specs&#34;&gt;Get Feature Specs&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;GET /api/partstudios/DWMVE/featurespecs - get feature specs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Returns a list of feature specs that are available within the part studio. A feature spec provides a data description
of the interface to a feature. This can, in theory, allow an application to use introspection to allow dynamically
generated features. In practice, we expect that the application developer understands the features ahead of time and
might utilize the feature spec to understand the options available and the required format for feature
addition/modification.&lt;/p&gt;
&lt;h3 id=&#34;add-feature&#34;&gt;Add Feature&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;POST /api/partstudios/DWE/features
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A feature can be added to the feature list by calling the add feature API. The API accepts as input a JSON structure
containing the fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;feature - A single feature definition, in the same format that is output by the get feature list API, except that
there is no need to provide feature ids, node ids, or typeNames.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sourceMicroversion - The microversion of the document that is assumed. Any geometry ids included in the feature are
interpreted in the context of this microversion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rejectMicroversionSkew (optional) - If set to true, the call will refuse to make the addition if the current
microversion for the document does not match the source Microversion. Otherwise, a best-effort attempt is made to
re-interpret the feature addition in the context of a newer document microversion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The call returns a structure with the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;feature - The input feature, echoed back with id value assignments in place&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;featureState - The state of the feature&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serializationVersion - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sourceMicroversion - The microversion of the document in which the returned feature is defined&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;microversionSkew - If rejectMicroversionSkew was not set to true on input and the document microversion had changed
since the input sourceMicroversion, this is set to true to indicate that a re-interpretation was made.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libraryVersion - An integer indicating the version number for FeatureScript in the Part Studio&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The feature is added immediately before the rollback bar. Any geometry ids specified in the feature must be valid at
that point in the feature tree. For example, if applying a fillet to an edge, that edge must exist in the feature tree.
Filleting the edge will normally make it invalid at future states of the feature tree, since the fillet feature
removes the edge.&lt;/p&gt;
&lt;h3 id=&#34;update-feature&#34;&gt;Update Feature&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;POST /api/partstudios/DWE/features/featureid/:fid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An existing feature can be modified by calling the update feature API. This API accepts the same input body format and
returns the same output format as the Add Feature API. However, instead of adding a new feature prior to the rollback
bar location, it replaces an existing feature in the location of the existing feature.&lt;/p&gt;
&lt;h3 id=&#34;update-features&#34;&gt;Update Features&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;POST /api/partstudios/DWE/features/updates
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Multiple existing features can be modified by calling the update features API. This API accepts a list of features and to update, which must already exist in the part studio. This call does not fully re-define the features but instead, updates only the parameters supplied in the top-level feature structure, and optionally will update feature suppression attributes.&lt;/p&gt;
&lt;p&gt;Applications that need to update parameters for multiple features can typically achieve faster model rebuild time by updating multiple features in a single call. It also has the benefit that it allows features to be suppressed or unsuppressed without specifying parameters. This is particularly useful in the unsuppress case because parameters containing query values are not populated when reading from the feature list.&lt;/p&gt;
&lt;h3 id=&#34;delete-feature&#34;&gt;Delete Feature&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;DELETE /api/partstudios/DWE/features/featureid/:fid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An existing feature can be removed from the feature list by calling the delete feature API. The API accepts only URL
path parameters and return only the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;serializationVersion - As described earlier&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sourceMicroversion - As described earlier&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;move-rollback-bar&#34;&gt;Move Rollback Bar&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;POST /api/partstudios/DWE/features/rollback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The rollback bar can be moved using this API. This is useful if a feature needs to be added at a location other than
the current rollback bar location. As input, it accepts the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rollbackIndex - The index at which the rollback index should be placed. Features with entry index (0-based) higher
than or equal to this value are rolled back. The value must be in the range 0 to the number of entries in the feature
list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serializationVersion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sourceMicroversion&lt;/p&gt;
&lt;p&gt;The result returned by the API includes the fields&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rollbackIndex - The rollback index in the updated state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serializationVersion - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sourceMicroversion - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;microversionSkew - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;evaluate-featurescript&#34;&gt;Evaluate FeatureScript&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;POST api/partstudios/DWMVE/featurescript
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This API allows the caller to execute a FeatureScript function to query information about the existing feature tree
that is not exposed through the other methods described here. As input, it accepts the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;script - The definition of a FeatureScript function that takes a Context argument and a map argument&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;queries - A list of key, value pairs, where the key is a FeatureScript identifier that will appear as a key in the
map supplied to the script function and the valid is a list of geometry Id strings, where the list is converted to
&amp;ldquo;query&amp;rdquo; form form use within the script function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the example below to better understand this usage.&lt;/p&gt;
&lt;h2 id=&#34;configuration-api-methods&#34;&gt;Configuration API Methods&lt;/h2&gt;
&lt;p&gt;Part Studios may be unconfigured or configured. A configured part studio has a list of configuration parameters that
define the knobs that allow adjustment of the part studio part content. Configuration parameters are referred to as
&amp;ldquo;inputs&amp;rdquo; in the UI and may be one of Enum (or List), Boolean, Quantity or String. Each parameter includes a default
value setting that is used if the parameter is not otherwise set.&lt;/p&gt;
&lt;p&gt;Configured part studios also have a &amp;ldquo;current&amp;rdquo; configuration. This is a list of configuration parameter settings for
the current representation of the part studio. Alternate configurations of the part studio may be used concurrently,
but the current configuration defines the parts seen by the user within in the part studio.&lt;/p&gt;
&lt;h3 id=&#34;get-configuration&#34;&gt;Get Configuration&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;GET /api/partstudios/DWMVE/configuration - get part studio configuration
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method reads the current configuration information for a Part Studio.
The return structure contains the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;configurationParameters - A list of the parameters that allow configuration of the part studio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;currentConfiguration - A list of configuration parameter settings for the current representation of the part studio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serializationVersion - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sourceMicroversion - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;microversionSkew - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libraryVersion - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;update-configuration&#34;&gt;Update Configuration&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;POST /api/partstudios/DWE/configuration - update part studio configuration
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method modifies the current configuration information for a Part Studio. When changing configuration parameters
it is important that parameterId values be maintained consistently across changes so that features that reference the
parameter do not get broken.
The API accepts as input a JSON structure containing the fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;configurationParameters - A list of the parameters that allow configuration of the part studio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;currentConfiguration - A list of configuration parameter settings for the current representation of the part studio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sourceMicroversion (optional) - The microversion of the document that is assumed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rejectMicroversionSkew (optional) - If set to true, the call will refuse to make the addition if the current
microversion for the document does not match the source Microversion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The call returns a structure with the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;configurationParameters - A list of the parameters that allow configuration of the part studio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;currentConfiguration - A list of configuration parameter settings for the current representation of the part studio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serializationVersion - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sourceMicroversion - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;microversionSkew - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libraryVersion - As described previously&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api-usage-details&#34;&gt;API Usage Details&lt;/h2&gt;
&lt;p&gt;The feature access and modification API in Onshape presents the internal form of feature definitions rather than
providing a translation layer between external form and internal form. We suggest that you familiarize yourself with
the formats involved by calling the Get Feature List API on existing part studios in order to understand the encoding
of features.&lt;/p&gt;
&lt;p&gt;Some important things to know about the JSON encoding are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Default values are omitted in the encoded output. For string fields the default value is &amp;ldquo;&amp;quot;, for boolean fields it
is false, and for numeric fields it is 0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It uses a special tagging system in order to manage polymorphic data structures. Specifically, objects generally
are encoded by enclosing them within another object that declares the type information for the enclosed object.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an example of the type tagging mechanism, the GET features api might return a structure that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;features&amp;quot;: [
    {
      &amp;quot;type&amp;quot;: 134,
      &amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
      &amp;quot;message&amp;quot;: {
        &amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
        &amp;quot;featureId&amp;quot;: &amp;quot;FLqo5rpNof3IXgh_0&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;Cube 1&amp;quot;,
        &amp;quot;parameters&amp;quot;: [
          {
            &amp;quot;type&amp;quot;: 147,
            &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
            &amp;quot;message&amp;quot;: {
              &amp;quot;expression&amp;quot;: &amp;quot;1.0*in&amp;quot;,
              &amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;,
              &amp;quot;nodeId&amp;quot;: &amp;quot;TyUNOSxJ/f9z5t1T&amp;quot;
            }
          }
        ],
        &amp;quot;nodeId&amp;quot;: &amp;quot;Mr60Xw6RGWdr0MfYV&amp;quot;
      }
    }
  ],
  &amp;quot;imports&amp;quot;: [
    {
      &amp;quot;type&amp;quot;: 136,
      &amp;quot;typeName&amp;quot;: &amp;quot;BTMImport&amp;quot;,
      &amp;quot;message&amp;quot;: {
        &amp;quot;path&amp;quot;: &amp;quot;onshape/std/geometry.fs&amp;quot;,
        &amp;quot;version&amp;quot;: &amp;quot;268.0&amp;quot;,
        &amp;quot;nodeId&amp;quot;: &amp;quot;M2/0RrOwK0Q+hWr9z&amp;quot;
      }
    }
  ],
  &amp;quot;featureStates&amp;quot;: [
    {
      &amp;quot;key&amp;quot;: &amp;quot;FLqo5rpNof3IXgh_0&amp;quot;,
      &amp;quot;value&amp;quot;: {
        &amp;quot;type&amp;quot;: 1688,
        &amp;quot;typeName&amp;quot;: &amp;quot;BTFeatureState&amp;quot;,
        &amp;quot;message&amp;quot;: {
         &amp;quot;featureStatus&amp;quot;: &amp;quot;OK&amp;quot;
        }
      }
    }
  ],
  &amp;quot;isComplete&amp;quot;: true,
  &amp;quot;rollbackIndex&amp;quot;: 1,
  &amp;quot;serializationVersion&amp;quot;: &amp;quot;1.1.6&amp;quot;,
  &amp;quot;sourceMicroversion&amp;quot;: &amp;quot;b5b4834bd0674b4489b2b2b7&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that in this case, the features array contains a single feature. The &amp;ldquo;type&amp;rdquo; and &amp;ldquo;typeName&amp;rdquo; fields describe the
type that is encoded within the &amp;ldquo;message&amp;rdquo; field. The &amp;ldquo;type&amp;rdquo; field provides definitive type information and is the type
number assigned to the structure. This type number is a permanent assignment. The &amp;ldquo;typeName&amp;rdquo; field is a convenience
field that is generated on output and ignored on input. It is intended to allow developers to associate meaningful
names with the type numbers.&lt;/p&gt;
&lt;h3 id=&#34;general-features&#34;&gt;General Features&lt;/h3&gt;
&lt;p&gt;In the example above, we see that the single feature is of type 134, which is the general feature type. A general
feature is an instantiation of the feature template that is describe by its corresponding feature spec. The BTMFeature
structure includes the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;featureType - Specifies the name of the feature spec that this instantiates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;featureId - The internal identifier of the feature instance within this part studio. It is internally generated when
a feature is added.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nodeId - An internal identifier for the feature node. This is also internally generated when the feature is added.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;name - The user visible name of the feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;namespace - An indicator of where the feature definition can be found. Features in the FeatureScript standard library
have a namespace value of &amp;quot;&amp;rdquo; whereas custom features identify the featurestudio that contains the definition. See
the Custom Features section below for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parameters - A list of parameter values for instantiation of the feature spec. Parameters are present for all
defined parameters, even if not used in a specific instantiation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All parameters have the following fields in common:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;parameterId - The name of the parameter spec that this applies to&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nodeId - An internal identifier for the parameter node&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parameters are typically one of the following types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BTMParameterQuantity (type 147) - specifies the value for a parameter defined in the feature spec as a
BTParameterSpecQuantity. It has the field:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;expression - An expression defining the value for the parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of its usage is in the depth parameter in the extrude feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTMParameterQueryList (type 148) - specifies the value for a parameter defined in the feature spec as a
BTParameterSpecQuery. It has the field:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;queries - a list of query objects. The query objects could be either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SBTMIndividualQuery objects (type 138) with the field:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;geometryIds - A list of geometry id values indentifying geometry that the feature applies to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SBTMIndividualSketchRegionQuery objects (type 140) with the field:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;featureId - The featureId of a sketch, with the query identifying all regions of the sketch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of its usage is in the entities parameter in the extrude feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTMParameterBoolean (type 144) - specifies the value for a parameter defined in the feature spec as a
BTParameterSpecBoolean. It has the field:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;value - The boolean value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of its usage is in the oppositeDirection parameter in the extrude feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTMParameterEnum (type 145) - specifies the value for a parameter defined in the feature spec as a
BTParameterSpecEnum. It has the fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;enumName - The name of the enum type that value is a member of&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;value - The name of the enum member&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of its usage is in the bodyType parameter in the extrude feature.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other parameter types exist for special cases and are not described here.&lt;/p&gt;
&lt;h3 id=&#34;sketches&#34;&gt;Sketches&lt;/h3&gt;
&lt;p&gt;Although most features are of type BTMFeature, there is also a BTMSketch type, which defines a sketch. The structure
of a sketch feature extends the BTMFeature and is relatively complex. It is suggested that the developer use a manually
edited sketch as a template for any sketches that they want to create programmatically. However, we will give a
high-level overview of the content for the sketch.&lt;/p&gt;
&lt;p&gt;Sketches have top-level fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;entities - the sketch geometry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;constraints - the geometric relationship constraints and dimensions for the sketch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parameters - the sketch parameters. The only parameter is the parameter that identifies the sketch plane&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;featureType - set to &amp;ldquo;newSketch&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;featureId - the feature id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;name - the sketch name&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The entities describe curves in terms of unbounded curves plus parameterized ranges. The geometry is always specified
in meters, regardless of the user’s choice of units. This geometry provides an initial guess for the sketch. The actual
solve state may differ, depending on whether the input constraints are satisfied.&lt;/p&gt;
&lt;p&gt;The constraints describe the requirements for sketch solution. These typically include constraints such as COINCIDENT,
HORIZONTAL, VERTICAL, PARALLEL, PERPENDICULAR, TANGENT that control geometric positioning and constraints such as
DISTANCE, RADIUS, DIAMETER, ANGLE that provide dimensional constraints. The constraints typically have one or two
objects that are constrained. These are referenced as localFirst for the first constrained entity, which is within
the sketch, and either localSecond or externalSection, depending on whether the second constrained entity is local
to the sketch. When entities are local to the sketch they are identitified by entity ids (long unique names) and when
external they are identified by a BTMIndiviualQuery.&lt;/p&gt;
&lt;h2 id=&#34;feature-specs&#34;&gt;Feature Specs&lt;/h2&gt;
&lt;p&gt;The feature spec for a feature provides a description of the inputs that it accepts. As an example, the feature spec
for a cube is shown below. It defines a single parameter named &amp;ldquo;sideLength&amp;rdquo;. The parameter spec includes a list of
ranges that specify valid ranges for the parameter value. Each range is specific to a particular unit and has a
defaultValue for that unit. Some parameters described by the feature spec may be optional. These normally have a
visibilityCondition that describes a logical test as to whether the parameter should be exposed for editing, based on
other parameter values. This provides a fairly reliable way to determine whether the parameter is required for a
particular feature instance, but it is safe to include default values for a feature even if it has a
visibilityCondition that indicates it is not visible.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;type&amp;quot;: 129,
  &amp;quot;typeName&amp;quot;: &amp;quot;BTFeatureSpec&amp;quot;,
  &amp;quot;message&amp;quot;: {
    &amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
    &amp;quot;featureTypeName&amp;quot;: &amp;quot;Cube&amp;quot;,
    &amp;quot;parameters&amp;quot;: [
      {
        &amp;quot;type&amp;quot;: 173,
        &amp;quot;typeName&amp;quot;: &amp;quot;BTParameterSpecQuantity&amp;quot;,
        &amp;quot;message&amp;quot;: {
          &amp;quot;quantityType&amp;quot;: &amp;quot;LENGTH&amp;quot;,
          &amp;quot;ranges&amp;quot;: [
            {
              &amp;quot;type&amp;quot;: 181,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;units&amp;quot;: &amp;quot;meter&amp;quot;,
                &amp;quot;minValue&amp;quot;: 0.00001,
                &amp;quot;maxValue&amp;quot;: 500,
                &amp;quot;defaultValue&amp;quot;: 0.025,
                &amp;quot;location&amp;quot;: {
                  &amp;quot;type&amp;quot;: 226,
                  &amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
                  &amp;quot;message&amp;quot;: {
                    &amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
                    &amp;quot;parseNodeId&amp;quot;: &amp;quot;PX2DsNKne8oO7ilPS&amp;quot;,
                    &amp;quot;languageVersion&amp;quot;: 268,
                    &amp;quot;nodeId&amp;quot;: &amp;quot;t8iQqgzAr/bCB2AZ&amp;quot;
                  }
                }
              }
            },
            {
              &amp;quot;type&amp;quot;: 181,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;units&amp;quot;: &amp;quot;centimeter&amp;quot;,
                &amp;quot;minValue&amp;quot;: 0.001,
                &amp;quot;maxValue&amp;quot;: 50000,
                &amp;quot;defaultValue&amp;quot;: 2.5,
                &amp;quot;location&amp;quot;: {
                  &amp;quot;type&amp;quot;: 226,
                  &amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
                  &amp;quot;message&amp;quot;: {
                    &amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
                    &amp;quot;parseNodeId&amp;quot;: &amp;quot;PKXPCya7aeoNITDFW&amp;quot;,
                    &amp;quot;languageVersion&amp;quot;: 268,
                    &amp;quot;nodeId&amp;quot;: &amp;quot;69sE3wOlv3FLiJxn&amp;quot;
                  }
                }
              }
            },
            {
              &amp;quot;type&amp;quot;: 181,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;units&amp;quot;: &amp;quot;millimeter&amp;quot;,
                &amp;quot;minValue&amp;quot;: 0.01,
                &amp;quot;maxValue&amp;quot;: 500000,
                &amp;quot;defaultValue&amp;quot;: 25,
                &amp;quot;location&amp;quot;: {
                  &amp;quot;type&amp;quot;: 226,
                  &amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
                  &amp;quot;message&amp;quot;: {
                    &amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
                    &amp;quot;parseNodeId&amp;quot;: &amp;quot;P8uyYds3YIBBpzlVN&amp;quot;,
                    &amp;quot;languageVersion&amp;quot;: 268,
                    &amp;quot;nodeId&amp;quot;: &amp;quot;8huKnMQb9mH9B+ef&amp;quot;
                  }
                }
              }
            },
            {
              &amp;quot;type&amp;quot;: 181,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;units&amp;quot;: &amp;quot;inch&amp;quot;,
                &amp;quot;minValue&amp;quot;: 0.0003937007874015748,
                &amp;quot;maxValue&amp;quot;: 19685.03937007874,
                &amp;quot;defaultValue&amp;quot;: 1,
                &amp;quot;location&amp;quot;: {
                  &amp;quot;type&amp;quot;: 226,
                  &amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
                  &amp;quot;message&amp;quot;: {
                    &amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
                    &amp;quot;parseNodeId&amp;quot;: &amp;quot;P4MfX8crrr+qc9vFS&amp;quot;,
                    &amp;quot;languageVersion&amp;quot;: 268,
                    &amp;quot;nodeId&amp;quot;: &amp;quot;BMU3SmZpR83uoKkd&amp;quot;
                  }
                }
              }
            },
            {
              &amp;quot;type&amp;quot;: 181,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;units&amp;quot;: &amp;quot;foot&amp;quot;,
                &amp;quot;minValue&amp;quot;: 0.00003280839895013123,
                &amp;quot;maxValue&amp;quot;: 1640.4199475065616,
                &amp;quot;defaultValue&amp;quot;: 0.1,
                &amp;quot;location&amp;quot;: {
                  &amp;quot;type&amp;quot;: 226,
                  &amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
                  &amp;quot;message&amp;quot;: {
                    &amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
                    &amp;quot;parseNodeId&amp;quot;: &amp;quot;P60BmwPj7LnRT0CTh&amp;quot;,
                    &amp;quot;languageVersion&amp;quot;: 268,
                    &amp;quot;nodeId&amp;quot;: &amp;quot;ywVSbQADr8dRv9+s&amp;quot;
                  }
                }
              }
            },
            {
              &amp;quot;type&amp;quot;: 181,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTQuantityRange&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;units&amp;quot;: &amp;quot;yard&amp;quot;,
                &amp;quot;minValue&amp;quot;: 0.000010936132983377077,
                &amp;quot;maxValue&amp;quot;: 546.8066491688538,
                &amp;quot;defaultValue&amp;quot;: 0.025,
                &amp;quot;location&amp;quot;: {
                  &amp;quot;type&amp;quot;: 226,
                  &amp;quot;typeName&amp;quot;: &amp;quot;BTLocationInfo&amp;quot;,
                  &amp;quot;message&amp;quot;: {
                    &amp;quot;document&amp;quot;: &amp;quot;onshape/std/primitives.fs&amp;quot;,
                    &amp;quot;parseNodeId&amp;quot;: &amp;quot;PsE6sGD66MJVH2xQh&amp;quot;,
                    &amp;quot;languageVersion&amp;quot;: 268,
                    &amp;quot;nodeId&amp;quot;: &amp;quot;zAy0tYs5aC0clPLL&amp;quot;
                  }
                }
              }
            }
          ],
          &amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;,
          &amp;quot;parameterName&amp;quot;: &amp;quot;Side length&amp;quot;,
          &amp;quot;defaultValue&amp;quot;: {
            &amp;quot;type&amp;quot;: 147,
            &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
            &amp;quot;message&amp;quot;: {
              &amp;quot;units&amp;quot;: &amp;quot;meter&amp;quot;,
              &amp;quot;value&amp;quot;: 0.025,
              &amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;,
              &amp;quot;nodeId&amp;quot;: &amp;quot;MC6QUqafapZdxtrDy&amp;quot;
            }
          }
        }
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Visibility conditions come in 3 variants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BTParameterVisibilityAlwaysHidden - Special-case parameters that are not directly shown to the user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTParameterVisibilityLogical - Allows a logical condition to express when a parameter is visible. Allows nested
AND/OR/NOT expressions. The leaves of the expression tree are BTParameterVisibilityOnEqual&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTParameterVisibilityOnEqual - A simple test that a parameter has been assigned a specific value.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A ParameterSpec can be one of numerous types. The most commonly used types are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BTParameterSpecQuery - indicates that a query parameter should be supplied. The parameter spec has an allowable
number of selections and query filter that describes the allowable types that can be selected. See below for
additional information about query filters. An example usage is identifying the entities to chamfer in a &amp;ldquo;Chamfer&amp;rdquo;
feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTParameterSpecString - indicates that a string value should be supplied. For example, this is used for the name of
a variable in a &amp;ldquo;Variable&amp;rdquo; feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTParameterSpecQuantity - indicates that a number value should be supplied. In allows a quantityType, which describes
the type of number (length, angle, mass, count, etc.) and range limits on the value. An example usage is the depth
parameter in an &amp;ldquo;Extrude&amp;rdquo; feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTParameterSpecEnum - indicates that an enumerated value should should be provided. An example usage is the
operationType parameter in an &amp;ldquo;Extrude&amp;rdquo; feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTParameterSpecBoolean - indicates that a boolean true/false value should be specified. An example usage is the
offset parameter in the &amp;ldquo;Boolean&amp;rdquo; feature&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some less commonly used parameter spec types are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BTParameterSpecDerived - indicates that an import of a part from another Part Studio should be specified.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTParameterSpecLookupTablePath - provides a list of string values that can be chosen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTParameterSpecForeignId - indicates that a &amp;ldquo;foreign id&amp;rdquo; value should be supplied. Foreign ids are currently not
generally accessible through the API, but identify a file that is made available throughout the system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parameter Spec query filters:&lt;/p&gt;
&lt;p&gt;Query Filters are even more numerous than parameter spec types.&lt;/p&gt;
&lt;p&gt;Basic selections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BTBodyTypeFilter - a specific body type (solid, sheet, wire, acorn, mate_connector)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTClosedCurveFilter - a curve that is either closed or not closed, depending on the isClosed value. (NO)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTConstructionObjectFilter - an object that either is or is not identified as &amp;ldquo;construction&amp;rdquo;, depending on the
isConstruction value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTEdgeTopologyFilter - an edge that either is or is not an internal edge, depending on the isInternalEdge value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTEntityTypeFilter - selects a specific type of entity based on the entityType value (vertex, edge, face, body,
degenerate_edge).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTFeatureTypeFilter - selects a specific type of feature base on the featureType value. (NO)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTGeometryFilter - select specific geometry types based on the geometryType value (line, circle, arg, plane,
cylinder,cone sphere torus, spline, ellipse).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTImageFilter - an entity that either is or is not an image, based on the isImage value. (no)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTMateConnectorFilter - a mate connector (NO)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTMateFilter - a mate object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTPlaneOrientationFilter - excludes planes that are aligned with another plane, based on the normal value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTSketchObjectFilter - an object that either is or is not a sketch object, or is a sketch object created by the
user, depending on the objectType value (not_sketch_object, any_sketch_object, user_entity).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTTextObjectFilter - an object that either is or is not a text object, depending on the isText value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BTTextStrokeFilter - an object that either is or is not a text stroke, depending on the isStroke value.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logical operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SBTAndFilter - combines query filters with &amp;ldquo;AND&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SBTOrFilter - combines query filters with &amp;ldquo;OR&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SBTNotFilter - negates query filters&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;feature-script-evaluation&#34;&gt;Feature Script Evaluation&lt;/h2&gt;
&lt;p&gt;For certain tasks when creating and updating features, there may be information needed that is embedded within the
existing model. You can often access it by running a Feature Script function. Feature Script is a language that is
used to define the behavior of features.&lt;/p&gt;
&lt;p&gt;As an example of its usage, consider the case of using a face of an existing part to define new geometry. A plane is
defined in FeatureScript as an origin, x-direction vector and normal vector. These can be queried from FeatureScript
by using the evPlane function, but it wants a &amp;ldquo;query&amp;rdquo; that identifies the face. Here is an example of how you might do
this with a call to the Evaluate FeatureScript API call. Suppose you know that “JCC” is the geometry Id of a particular
face. The following body can be passed to the evaluate function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;script&amp;quot; : &amp;quot;function (context is Context, queries is map) {
              return evPlane(context, {face:queries.id});
              }&amp;quot;,
  &amp;quot;queries&amp;quot; : [ { &amp;quot;key&amp;quot; : &amp;quot;id&amp;quot;, &amp;quot;value&amp;quot; : [ &amp;quot;JCC&amp;quot; ] } ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming that we have done everything right, the output of this might look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;result&amp;quot;: {
    &amp;quot;type&amp;quot;: 2062,
    &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueMap&amp;quot;,
    &amp;quot;message&amp;quot;: {
      &amp;quot;value&amp;quot;: [
        {
          &amp;quot;type&amp;quot;: 2077,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueMapEntry&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;key&amp;quot;: {
              &amp;quot;type&amp;quot;: 1422,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueString&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;value&amp;quot;: &amp;quot;normal&amp;quot;
              }
            },
            &amp;quot;value&amp;quot;: {
              &amp;quot;type&amp;quot;: 1499,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueArray&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;value&amp;quot;: [
                  {
                    &amp;quot;type&amp;quot;: 772,
                    &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
                    &amp;quot;message&amp;quot;: {
                      &amp;quot;value&amp;quot;: -1
                    }
                  },
                  {
                    &amp;quot;type&amp;quot;: 772,
                    &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
                    &amp;quot;message&amp;quot;: {}
                  },
                  {
                    &amp;quot;type&amp;quot;: 772,
                    &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
                    &amp;quot;message&amp;quot;: {}
                  }
                ],
                &amp;quot;typeTag&amp;quot;: &amp;quot;Vector&amp;quot;
              }
            }
          }
        },
        {
          &amp;quot;type&amp;quot;: 2077,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueMapEntry&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;key&amp;quot;: {
              &amp;quot;type&amp;quot;: 1422,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueString&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;value&amp;quot;: &amp;quot;origin&amp;quot;
              }
            },
            &amp;quot;value&amp;quot;: {
              &amp;quot;type&amp;quot;: 1499,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueArray&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;value&amp;quot;: [
                  {
                    &amp;quot;type&amp;quot;: 1817,
                    &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueWithUnits&amp;quot;,
                    &amp;quot;message&amp;quot;: {
                      &amp;quot;unitToPower&amp;quot;: [
                        {
                          &amp;quot;key&amp;quot;: &amp;quot;METER&amp;quot;,
                          &amp;quot;value&amp;quot;: 1
                        }
                      ],
                      &amp;quot;typeTag&amp;quot;: &amp;quot;ValueWithUnits&amp;quot;
                    }
                  },
                  {
                    &amp;quot;type&amp;quot;: 1817,
                    &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueWithUnits&amp;quot;,
                    &amp;quot;message&amp;quot;: {
                      &amp;quot;value&amp;quot;: 0.012700000000000001,
                      &amp;quot;unitToPower&amp;quot;: [
                        {
                          &amp;quot;key&amp;quot;: &amp;quot;METER&amp;quot;,
                          &amp;quot;value&amp;quot;: 1
                        }
                      ],
                      &amp;quot;typeTag&amp;quot;: &amp;quot;ValueWithUnits&amp;quot;
                    }
                  },
                  {
                    &amp;quot;type&amp;quot;: 1817,
                    &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueWithUnits&amp;quot;,
                    &amp;quot;message&amp;quot;: {
                      &amp;quot;value&amp;quot;: 0.012700000000000001,
                      &amp;quot;unitToPower&amp;quot;: [
                        {
                          &amp;quot;key&amp;quot;: &amp;quot;METER&amp;quot;,
                          &amp;quot;value&amp;quot;: 1
                        }
                      ],
                      &amp;quot;typeTag&amp;quot;: &amp;quot;ValueWithUnits&amp;quot;
                    }
                  }
                ],
                &amp;quot;typeTag&amp;quot;: &amp;quot;Vector&amp;quot;
              }
            }
          }
        },
        {
          &amp;quot;type&amp;quot;: 2077,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueMapEntry&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;key&amp;quot;: {
              &amp;quot;type&amp;quot;: 1422,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueString&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;value&amp;quot;: &amp;quot;x&amp;quot;
              }
            },
            &amp;quot;value&amp;quot;: {
              &amp;quot;type&amp;quot;: 1499,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueArray&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;value&amp;quot;: [
                  {
                    &amp;quot;type&amp;quot;: 772,
                    &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
                    &amp;quot;message&amp;quot;: {}
                  },
                  {
                    &amp;quot;type&amp;quot;: 772,
                    &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
                    &amp;quot;message&amp;quot;: {
                      &amp;quot;value&amp;quot;: -1
                    }
                  },
                  {
                    &amp;quot;type&amp;quot;: 772,
                    &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueNumber&amp;quot;,
                    &amp;quot;message&amp;quot;: {}
                  }
                ],
                &amp;quot;typeTag&amp;quot;: &amp;quot;Vector&amp;quot;
              }
            }
          }
        }
      ],
      &amp;quot;typeTag&amp;quot;: &amp;quot;Plane&amp;quot;
    }
  },
  &amp;quot;serializationVersion&amp;quot;: &amp;quot;1.1.6&amp;quot;,
  &amp;quot;sourceMicroversion&amp;quot;: &amp;quot;27db48fb62bf6ac3b3ddaeaa&amp;quot;,
  &amp;quot;libraryVersion&amp;quot;: 296
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see from the output that the FeatureScript object representation uses the same typing rules that is used for
other output. In addition, FeatureScript objects may have a typeTag field associated with them, which indicates that
type-specific behavior should be applied. For instance, we see cases where a BTFSValueArray has a typeTag of &amp;ldquo;Vector&amp;rdquo;,
which allows the array to be accepted where a Vector is declared to be required.&lt;/p&gt;
&lt;p&gt;In order to help describe the interpretation of the structure above, here is a possible JSON representation of the
result from the output shown above, but with weaker typing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;normal&amp;quot; : [ -1, 0, 0 ],
  &amp;quot;origin&amp;quot; : { &amp;quot;value&amp;quot; : [ 0,
                           0.012700000000000001,
                           0.012700000000000001 ],
               &amp;quot;units&amp;quot; : &amp;quot;meter&amp;quot; },
  &amp;quot;x&amp;quot; : [ 0, -1, 0 ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;custom-features&#34;&gt;Custom Features&lt;/h2&gt;
&lt;p&gt;Custom features can be used in the feature apis with a little additional work. The key to using custom features is
that you must set a namespace field in the feature to tell Onshape where to look for the feature defintion.
The namespace field identifies a specific version of a feature studio. There are two standard forms for the namespace
field to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Intra-workspace - In this case, the namespace field has the form
&amp;ldquo;e&lt;elementId&gt;::m&lt;microversionId&gt;&amp;rdquo;
where elementId is the elementId of the FeatureStudio that defines the feature and microversionId is the element
microversionId of the FeatureStudio. It is important to note that the element microversionId is different from the
document microversionId that is more typically encountered in API usage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;External - When the definition to be used lives in a different document or in a specific version of the current
document it is referenced using the form
&amp;ldquo;d&lt;documentId&gt;::v&lt;versionId&gt;::e&lt;elementId&gt;::m&lt;microversionId&gt;&amp;rdquo;
This is the same form as for the intra-workspace case but with a documentId and versionId additionally specified.
The documentId is the id of the document containing the FeatureStudio and the versionId is the version of the
document to be used.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In both of the forms listed, it is necessary to determine the FeatureStudio element microversionId. One way to do this
is to call the GET /api/documents/DWMV/elements API, which reports the element microversion for each of the elements.
There is also a GET /api/featurestudios/DWMV/featurespecs API that provides a featurespec for each of the features
defined in the FeatureStudio. These featurespecs also have a namespace field that reports the namespace of the
FeatureStudio in the intra-workspace form.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;Below are several examples of how the API can be used in order to help you get started. The examples are quite trivial,
but should provide a basic demonstration of how to use these API methods. You should be able to execute the calls
against a part studio of yours and see results immediately. The calls could be executed using your preferred software
environment but interactive use in a REST-aware tool is likely the easiest way to try the examples.&lt;/p&gt;
&lt;h3 id=&#34;example-1&#34;&gt;Example 1&lt;/h3&gt;
&lt;p&gt;In our first example we will create a cube using the cube feature. The feature accepts only a single parameter, which
is the length of a side, and creates a cube with a corner at the origin and aligned with the three default planes. In
running the example, be sure to replace DWE with the the d/:did/w/:wid/e/:eid that is appropriate for the part studio
that you are operating against.&lt;/p&gt;
&lt;p&gt;POST /api/partstudios/DWE/features&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;feature&amp;quot; : {
    &amp;quot;type&amp;quot;: 134,
    &amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
      &amp;quot;message&amp;quot;: {
        &amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;Cube 1&amp;quot;,
        &amp;quot;parameters&amp;quot;: [
          {
             &amp;quot;type&amp;quot;: 147,
             &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
             &amp;quot;message&amp;quot;: {
               &amp;quot;expression&amp;quot;: &amp;quot;1*in&amp;quot;,
               &amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;
             }
           }
        ]
      }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This returns output similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;feature&amp;quot;: {
        &amp;quot;type&amp;quot;: 134,
        &amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
        &amp;quot;message&amp;quot;: {
            &amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
            &amp;quot;featureId&amp;quot;: &amp;quot;FuJu9c8PvO5oyTgaV&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;Cube 1&amp;quot;,
            &amp;quot;parameters&amp;quot;: [
                {
                    &amp;quot;type&amp;quot;: 147,
                    &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
                    &amp;quot;message&amp;quot;: {
                        &amp;quot;expression&amp;quot;: &amp;quot;1*in&amp;quot;,
                        &amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;,
                        &amp;quot;nodeId&amp;quot;: &amp;quot;M+iZRdlIZjnuz8DSS&amp;quot;
                    }
                }
            ],
            &amp;quot;nodeId&amp;quot;: &amp;quot;MUdiYYWlCa3arVy8q&amp;quot;
        }
    },
    &amp;quot;featureState&amp;quot;: {
        &amp;quot;type&amp;quot;: 1688,
        &amp;quot;typeName&amp;quot;: &amp;quot;BTFeatureState&amp;quot;,
        &amp;quot;message&amp;quot;: {
            &amp;quot;featureStatus&amp;quot;: &amp;quot;OK&amp;quot;
        }
    },
    &amp;quot;serializationVersion&amp;quot;: &amp;quot;1.1.6&amp;quot;,
    &amp;quot;sourceMicroversion&amp;quot;: &amp;quot;2d31ccc170551a83995b89c8&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output returns us the feature definition that we provided as input with nodeIds and a featureId, plus information
telling us that that the feature executed correctly and information about the serialization version and microversion of
the document that resulted from our feature addition.&lt;/p&gt;
&lt;h3 id=&#34;example-2&#34;&gt;Example 2&lt;/h3&gt;
&lt;p&gt;In our second example we will create a cube where the sideLength parameter is defined by a variable and will then
update the variable to have a new value.&lt;/p&gt;
&lt;p&gt;Step 1) Create a variable - we create a feature of type assignVariable, which defines a variable and assigns it a
value. Here, the variables name is &amp;ldquo;size&amp;rdquo; and is displayed in the feature list as &amp;ldquo;Cube size&amp;rdquo;, and it is assigned to
have the value &amp;ldquo;1*in&amp;rdquo; with a variableType of ANY. Once again, be sure to replace DWE with the the d/:did/w/:wid/e/:eid
that is appropriate for the part studio that you are operating against.&lt;/p&gt;
&lt;p&gt;A variable can be created with variableType set to &amp;ldquo;ANY&amp;rdquo;, &amp;ldquo;LENGTH&amp;rdquo;, &amp;ldquo;ANGLE&amp;rdquo;, or &amp;ldquo;NUMBER&amp;rdquo;. This supplies a constraint
on the supplied value and each type requires setting the appropriate corresponding parameter, which would be anyValue,
lengthValue, angleValue or numberValue, respectively in addition to setting the value parameter. For the intended
purpose of using it as a length value it might be more appropriate to use &amp;ldquo;LENGTH&amp;rdquo; as the type, which would require
setting the lengthValue and value parameters to a length value. We have chosen to demonstrate the use of the &amp;ldquo;ANY&amp;rdquo;
type here because it can be used in a wider range of applications than a &amp;ldquo;LENGTH&amp;rdquo; variable, but does not provide the
value type checking that is provided by &amp;ldquo;LENGTH&amp;rdquo;, &amp;ldquo;ANGLE&amp;rdquo; or &amp;ldquo;NUMBER&amp;rdquo; types.&lt;/p&gt;
&lt;p&gt;POST /api/partstudios/DWE/features&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;feature&amp;quot; : {
    &amp;quot;type&amp;quot;: 134,
    &amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
    &amp;quot;message&amp;quot;: {
        &amp;quot;featureType&amp;quot;: &amp;quot;assignVariable&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;Cube size&amp;quot;,
        &amp;quot;parameters&amp;quot;: [
            {
                &amp;quot;type&amp;quot;: 145,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
                &amp;quot;message&amp;quot;: {
                    &amp;quot;enumName&amp;quot;: &amp;quot;VariableType&amp;quot;,
                    &amp;quot;value&amp;quot;: &amp;quot;ANY&amp;quot;,
                    &amp;quot;parameterId&amp;quot;: &amp;quot;variableType&amp;quot;
                }
            },
            {
                &amp;quot;type&amp;quot;: 149,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterString&amp;quot;,
                &amp;quot;message&amp;quot;: {
                    &amp;quot;value&amp;quot;: &amp;quot;size&amp;quot;,
                    &amp;quot;parameterId&amp;quot;: &amp;quot;name&amp;quot;
                }
            },
            {
                &amp;quot;type&amp;quot;: 147,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
                &amp;quot;message&amp;quot;: {
                    &amp;quot;expression&amp;quot;: &amp;quot;1*in&amp;quot;,
                    &amp;quot;parameterId&amp;quot;: &amp;quot;anyValue&amp;quot;
                }
            }
        ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The returned structure will include a featureId value for the variable. Make note of this value and we will use it
in step 3 below.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create the cube feature, referencing the variable created&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST /api/partstudios/DWE/features&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;feature&amp;quot; : {
    &amp;quot;type&amp;quot;: 134,
    &amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
      &amp;quot;message&amp;quot;: {
        &amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;Cube 1&amp;quot;,
        &amp;quot;parameters&amp;quot;: [
          {
            &amp;quot;type&amp;quot;: 147,
            &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
            &amp;quot;message&amp;quot;: {
              &amp;quot;expression&amp;quot;: &amp;quot;#size&amp;quot;,
              &amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;
            }
          }
        ]
      }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Update the variable to have a new value. We assume here that the featureId value returned in step 1 is
&amp;ldquo;FuJu9c8PvO5oyTgaV&amp;rdquo; and we will change the cube size from 1 inch to 10 centimeters.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST /api/partstudios/DWE/features/featureid/FuJu9c8PvO5oyTgaV&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;feature&amp;quot; : {
    &amp;quot;type&amp;quot;: 134,
    &amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
    &amp;quot;message&amp;quot;: {
        &amp;quot;featureType&amp;quot;: &amp;quot;assignVariable&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;Cube size&amp;quot;,
        &amp;quot;parameters&amp;quot;: [
            {
                &amp;quot;type&amp;quot;: 145,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
                &amp;quot;message&amp;quot;: {
                    &amp;quot;enumName&amp;quot;: &amp;quot;VariableType&amp;quot;,
                    &amp;quot;value&amp;quot;: &amp;quot;ANY&amp;quot;,
                    &amp;quot;parameterId&amp;quot;: &amp;quot;variableType&amp;quot;
                }
            },
            {
                &amp;quot;type&amp;quot;: 149,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterString&amp;quot;,
                &amp;quot;message&amp;quot;: {
                    &amp;quot;value&amp;quot;: &amp;quot;size&amp;quot;,
                    &amp;quot;parameterId&amp;quot;: &amp;quot;name&amp;quot;
                }
            },
            {
                &amp;quot;type&amp;quot;: 147,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
                &amp;quot;message&amp;quot;: {
                    &amp;quot;expression&amp;quot;: &amp;quot;10*cm&amp;quot;,
                    &amp;quot;parameterId&amp;quot;: &amp;quot;anyValue&amp;quot;
                }
            }
        ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take a look at the part studio and you will see the cube at its new size. You can edit the Cube size variable and
change the value again.&lt;/p&gt;
&lt;h3 id=&#34;example-3&#34;&gt;Example 3&lt;/h3&gt;
&lt;p&gt;In this example, we create a Sketch and extrude it. This demonstrates relationships betweeen features. First, the
sketch must be created on a plane, and for convenience, we will use the pre-defined front plane. Then, the extrude
needs to describe what is to be extruded, and for convenience, we use the BTMIndividualSketchRegionQuery.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Determine the geometryId for the front plane.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST /api/features/DWE/featurescript&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;script&amp;quot; :
    &amp;quot;function(context is Context, queries)
      {
        return transientQueriesToStrings(evaluateQuery(context, qCreatedBy(makeId(\&amp;quot;Front\&amp;quot;), EntityType.FACE)));
      }&amp;quot;,
  &amp;quot;queries&amp;quot; : []
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will likely return something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;result&amp;quot;: {
    &amp;quot;type&amp;quot;: 1499,
    &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueArray&amp;quot;,
    &amp;quot;message&amp;quot;: {
      &amp;quot;value&amp;quot;: [
        {
          &amp;quot;type&amp;quot;: 1422,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTFSValueString&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;value&amp;quot;: &amp;quot;JCC&amp;quot;
          }
        }
      ]
    }
  },
  &amp;quot;serializationVersion&amp;quot;: &amp;quot;1.1.6&amp;quot;,
  &amp;quot;sourceMicroversion&amp;quot;: &amp;quot;a53cabe7d36e30ee100b1d2a&amp;quot;,
  &amp;quot;libraryVersion&amp;quot;: 298
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells us that the geometryId for the face created by the &amp;ldquo;Front&amp;rdquo; feature is &amp;ldquo;JCC&amp;rdquo;.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Determine the geometryId for the Origin&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST /api/features/DWE/featurescript&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;script&amp;quot; :
    &amp;quot;function(context is Context, queries)
      {
        return transientQueriesToStrings(evaluateQuery(context, qCreatedBy(makeId(\&amp;quot;Origin\&amp;quot;), EntityType.VERTEX)));
      }&amp;quot;,
  &amp;quot;queries&amp;quot; : []
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will report the geometryId for the origin (probably with the value &amp;ldquo;IB&amp;rdquo;) which we will use in the sketch.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Create the sketch. This will be just a circle on the front plane with its center at the origin and diameter of
1 inch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST /api/partstudios/DWE/features&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;feature&amp;quot; : {
    &amp;quot;type&amp;quot;: 151,
    &amp;quot;typeName&amp;quot;: &amp;quot;BTMSketch&amp;quot;,
    &amp;quot;message&amp;quot;: {
      &amp;quot;entities&amp;quot;: [
        {
          &amp;quot;type&amp;quot;: 4,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMSketchCurve&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;geometry&amp;quot;: {
              &amp;quot;type&amp;quot;: 115,
              &amp;quot;typeName&amp;quot;: &amp;quot;BTCurveGeometryCircle&amp;quot;,
              &amp;quot;message&amp;quot;: {
                &amp;quot;radius&amp;quot;: 0.025400000000000002,
                &amp;quot;xDir&amp;quot;: 1,
                &amp;quot;yDir&amp;quot;: 0
              }
            },
            &amp;quot;centerId&amp;quot;: &amp;quot;clAhDfZz-Dgmb-d0AJ-01Cv-JINJdWZLbVj1.center&amp;quot;,
            &amp;quot;entityId&amp;quot;: &amp;quot;clAhDfZz-Dgmb-d0AJ-01Cv-JINJdWZLbVj1&amp;quot;
          }
        }
      ],
      &amp;quot;constraints&amp;quot;: [
        {
          &amp;quot;type&amp;quot;: 2,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMSketchConstraint&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;constraintType&amp;quot;: &amp;quot;COINCIDENT&amp;quot;,
            &amp;quot;parameters&amp;quot;: [
              {
                &amp;quot;type&amp;quot;: 149,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterString&amp;quot;,
                &amp;quot;message&amp;quot;: {
                  &amp;quot;value&amp;quot;: &amp;quot;clAhDfZz-Dgmb-d0AJ-01Cv-JINJdWZLbVj1.center&amp;quot;,
                  &amp;quot;parameterId&amp;quot;: &amp;quot;localFirst&amp;quot;
                }
              },
              {
                &amp;quot;type&amp;quot;: 148,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
                &amp;quot;message&amp;quot;: {
                  &amp;quot;queries&amp;quot;: [
                    {
                      &amp;quot;type&amp;quot;: 138,
                      &amp;quot;typeName&amp;quot;: &amp;quot;BTMIndividualQuery&amp;quot;,
                      &amp;quot;message&amp;quot;: {
                        &amp;quot;geometryIds&amp;quot;: [
                          &amp;quot;IB&amp;quot;
                        ]
                      }
                    }
                  ],
                  &amp;quot;parameterId&amp;quot;: &amp;quot;externalSecond&amp;quot;
                }
              }
            ],
            &amp;quot;entityId&amp;quot;: &amp;quot;clAhDfZz-Dgmb-d0AJ-01Cv-JINJdWZLbVj1.centerSnap0&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 2,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMSketchConstraint&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;constraintType&amp;quot;: &amp;quot;DIAMETER&amp;quot;,
            &amp;quot;parameters&amp;quot;: [
              {
                &amp;quot;type&amp;quot;: 149,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterString&amp;quot;,
                &amp;quot;message&amp;quot;: {
                  &amp;quot;value&amp;quot;: &amp;quot;clAhDfZz-Dgmb-d0AJ-01Cv-JINJdWZLbVj1&amp;quot;,
                  &amp;quot;parameterId&amp;quot;: &amp;quot;localFirst&amp;quot;
                }
              },
              {
                &amp;quot;type&amp;quot;: 147,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
                &amp;quot;message&amp;quot;: {
                  &amp;quot;expression&amp;quot;: &amp;quot;1*in&amp;quot;,
                  &amp;quot;parameterId&amp;quot;: &amp;quot;length&amp;quot;
                }
              },
              {
                &amp;quot;type&amp;quot;: 147,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
                &amp;quot;message&amp;quot;: {
                  &amp;quot;expression&amp;quot;: &amp;quot;0.637419526959446*rad&amp;quot;,
                  &amp;quot;parameterId&amp;quot;: &amp;quot;labelAngle&amp;quot;
                }
              },
              {
                &amp;quot;type&amp;quot;: 147,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
                &amp;quot;message&amp;quot;: {
                  &amp;quot;expression&amp;quot;: &amp;quot;1.76201395706607&amp;quot;,
                  &amp;quot;parameterId&amp;quot;: &amp;quot;labelRatio&amp;quot;
                }
              }
            ],
            &amp;quot;entityId&amp;quot;: &amp;quot;22b5a2c0-d3ea-4376-969d-8b81944035b2&amp;quot;
          }
        }
      ],
      &amp;quot;featureType&amp;quot;: &amp;quot;newSketch&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;Sketch 1&amp;quot;,
      &amp;quot;parameters&amp;quot;: [
        {
          &amp;quot;type&amp;quot;: 148,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;queries&amp;quot;: [
              {
                &amp;quot;type&amp;quot;: 138,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMIndividualQuery&amp;quot;,
                &amp;quot;message&amp;quot;: {
                  &amp;quot;geometryIds&amp;quot;: [
                    &amp;quot;JCC&amp;quot;
                  ]
                }
              }
            ],
            &amp;quot;parameterId&amp;quot;: &amp;quot;sketchPlane&amp;quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Create the extrude. Here we assume that the previous call returned the sketch with a feature id of
&amp;ldquo;Fj1THqyY7u36ktGSr&amp;rdquo;. The extrude uses the BTMIndividualSketchRegionQuery, identifying the sketch feature in order to
indicate what is to be extruded. The depth of extrude is 1 inch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST /api/partstudios/DWE/features&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;feature&amp;quot; : {
    &amp;quot;type&amp;quot;: 134,
    &amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
    &amp;quot;message&amp;quot;: {
      &amp;quot;featureType&amp;quot;: &amp;quot;extrude&amp;quot;,
      &amp;quot;name&amp;quot;: &amp;quot;Extrude 1&amp;quot;,
      &amp;quot;parameters&amp;quot;: [
        {
          &amp;quot;type&amp;quot;: 145,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;enumName&amp;quot;: &amp;quot;ToolBodyType&amp;quot;,
            &amp;quot;value&amp;quot;: &amp;quot;SOLID&amp;quot;,
            &amp;quot;parameterId&amp;quot;: &amp;quot;bodyType&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 145,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;enumName&amp;quot;: &amp;quot;NewBodyOperationType&amp;quot;,
            &amp;quot;value&amp;quot;: &amp;quot;NEW&amp;quot;,
            &amp;quot;parameterId&amp;quot;: &amp;quot;operationType&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 148,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;queries&amp;quot;: [
              {
                &amp;quot;type&amp;quot;: 140,
                &amp;quot;typeName&amp;quot;: &amp;quot;BTMIndividualSketchRegionQuery&amp;quot;,
                &amp;quot;message&amp;quot;: {
                  &amp;quot;featureId&amp;quot;: &amp;quot;Fj1THqyY7u36ktGSr&amp;quot;
                }
              }
            ],
            &amp;quot;parameterId&amp;quot;: &amp;quot;entities&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 145,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;enumName&amp;quot;: &amp;quot;BoundingType&amp;quot;,
            &amp;quot;value&amp;quot;: &amp;quot;BLIND&amp;quot;,
            &amp;quot;parameterId&amp;quot;: &amp;quot;endBound&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 147,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;expression&amp;quot;: &amp;quot;1*in&amp;quot;,
            &amp;quot;parameterId&amp;quot;: &amp;quot;depth&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 148,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;surfaceEntities&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 144,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;oppositeDirection&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 148,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;endBoundEntityFace&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 148,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;endBoundEntityBody&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 144,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;hasDraft&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 147,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;expression&amp;quot;: &amp;quot;3.0*deg&amp;quot;,
            &amp;quot;parameterId&amp;quot;: &amp;quot;draftAngle&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 144,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;draftPullDirection&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 144,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;hasSecondDirection&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 145,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;enumName&amp;quot;: &amp;quot;SecondDirectionBoundingType&amp;quot;,
            &amp;quot;value&amp;quot;: &amp;quot;BLIND&amp;quot;,
            &amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionBound&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 144,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;value&amp;quot;: true,
            &amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionOppositeDirection&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 148,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionBoundEntityFace&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 148,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionBoundEntityBody&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 147,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;expression&amp;quot;: &amp;quot;1.0*in&amp;quot;,
            &amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionDepth&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 144,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;hasSecondDirectionDraft&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 147,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;expression&amp;quot;: &amp;quot;3.0*deg&amp;quot;,
            &amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionDraftAngle&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 144,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;secondDirectionDraftPullDirection&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 144,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterBoolean&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;defaultScope&amp;quot;
          }
        },
        {
          &amp;quot;type&amp;quot;: 148,
          &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQueryList&amp;quot;,
          &amp;quot;message&amp;quot;: {
            &amp;quot;parameterId&amp;quot;: &amp;quot;booleanScope&amp;quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see here that there are a lot of parameters that have no values set in them. This is the way features are created
by the Onshape web client, buty the unneeded ones could be left out. All of the parameters after &amp;ldquo;depth&amp;rdquo; could be
omitted without changing the result. However, leaving out a required parameter will normally result in the result
reporting a featureStatus of &amp;ldquo;ERROR&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;example-4&#34;&gt;Example 4&lt;/h3&gt;
&lt;p&gt;This example shows an example of configuring a Part Studio with a single Enum (List) input, and a cube feature
is created that has its size vary based on the configuration of the Part studio.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a configuration for the part studio. This example assumes that you are starting with an unconfigured Part
Studio. The Enum input is named &amp;ldquo;Size&amp;rdquo;, which 2 options available, &amp;ldquo;Small&amp;rdquo; and &amp;ldquo;Large&amp;rdquo;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST /api/partstudios/DWE/configuration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;configurationParameters&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: 105,
            &amp;quot;typeName&amp;quot;: &amp;quot;BTMConfigurationParameterEnum&amp;quot;,
            &amp;quot;message&amp;quot;: {
                &amp;quot;enumName&amp;quot;: &amp;quot;Size_conf&amp;quot;,
                &amp;quot;options&amp;quot;: [
                    {
                        &amp;quot;type&amp;quot;: 592,
                        &amp;quot;typeName&amp;quot;: &amp;quot;BTMEnumOption&amp;quot;,
                        &amp;quot;message&amp;quot;: {
                            &amp;quot;option&amp;quot;: &amp;quot;Small&amp;quot;,
                            &amp;quot;optionName&amp;quot;: &amp;quot;Small&amp;quot;
                        }
                    },
                    {
                        &amp;quot;type&amp;quot;: 592,
                        &amp;quot;typeName&amp;quot;: &amp;quot;BTMEnumOption&amp;quot;,
                        &amp;quot;message&amp;quot;: {
                            &amp;quot;option&amp;quot;: &amp;quot;Large&amp;quot;,
                            &amp;quot;optionName&amp;quot;: &amp;quot;Large&amp;quot;
                        }
                    }
                ],
                &amp;quot;namespace&amp;quot;: &amp;quot;&amp;quot;,
                &amp;quot;defaultValue&amp;quot;: &amp;quot;Small&amp;quot;,
                &amp;quot;parameterId&amp;quot;: &amp;quot;Size&amp;quot;,
                &amp;quot;parameterName&amp;quot;: &amp;quot;Size&amp;quot;,
                &amp;quot;hasUserCode&amp;quot;: false,
                &amp;quot;nodeId&amp;quot;: &amp;quot;MgfIjLtd/DvuaT/P/&amp;quot;
            }
        }
    ],
    &amp;quot;currentConfiguration&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: 145,
            &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterEnum&amp;quot;,
            &amp;quot;message&amp;quot;: {
                &amp;quot;enumName&amp;quot;: &amp;quot;Size_conf&amp;quot;,
                &amp;quot;value&amp;quot;: &amp;quot;Large&amp;quot;,
                &amp;quot;namespace&amp;quot;: &amp;quot;&amp;quot;,
                &amp;quot;parameterId&amp;quot;: &amp;quot;Size&amp;quot;
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create a cube feature in the Part Studio. When the Size configuration input is set to &amp;ldquo;Small&amp;rdquo;, the cube will
have a sideLength value of &amp;ldquo;1 in&amp;rdquo; and when the Size input is set to &amp;ldquo;Large&amp;rdquo; it will have a sideLength value of &amp;ldquo;2 in&amp;rdquo;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST /api/partstudios/DWE/features&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;feature&amp;quot;: {
        &amp;quot;type&amp;quot;: 134,
        &amp;quot;typeName&amp;quot;: &amp;quot;BTMFeature&amp;quot;,
        &amp;quot;message&amp;quot;: {
            &amp;quot;featureType&amp;quot;: &amp;quot;cube&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;Cube 1&amp;quot;,
            &amp;quot;parameters&amp;quot;: [
                {
                    &amp;quot;type&amp;quot;: 2222,
                    &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterConfigured&amp;quot;,
                    &amp;quot;message&amp;quot;: {
                        &amp;quot;configurationParameterId&amp;quot;: &amp;quot;Size&amp;quot;,
                        &amp;quot;values&amp;quot;: [
                            {
                                &amp;quot;type&amp;quot;: 1923,
                                &amp;quot;typeName&amp;quot;: &amp;quot;BTMConfiguredValueByEnum&amp;quot;,
                                &amp;quot;message&amp;quot;: {
                                    &amp;quot;namespace&amp;quot;: &amp;quot;&amp;quot;,
                                    &amp;quot;enumName&amp;quot;: &amp;quot;Size_conf&amp;quot;,
                                    &amp;quot;enumValue&amp;quot;: &amp;quot;Default&amp;quot;,
                                    &amp;quot;value&amp;quot;: {
                                        &amp;quot;type&amp;quot;: 147,
                                        &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
                                        &amp;quot;message&amp;quot;: {
                                            &amp;quot;expression&amp;quot;: &amp;quot;1 in&amp;quot;
                                        }
                                    }
                                }
                            },
                            {
                                &amp;quot;type&amp;quot;: 1923,
                                &amp;quot;typeName&amp;quot;: &amp;quot;BTMConfiguredValueByEnum&amp;quot;,
                                &amp;quot;message&amp;quot;: {
                                    &amp;quot;namespace&amp;quot;: &amp;quot;&amp;quot;,
                                    &amp;quot;enumName&amp;quot;: &amp;quot;Size_conf&amp;quot;,
                                    &amp;quot;enumValue&amp;quot;: &amp;quot;Large&amp;quot;,
                                    &amp;quot;value&amp;quot;: {
                                        &amp;quot;type&amp;quot;: 147,
                                        &amp;quot;typeName&amp;quot;: &amp;quot;BTMParameterQuantity&amp;quot;,
                                        &amp;quot;message&amp;quot;: {
                                            &amp;quot;expression&amp;quot;: &amp;quot;2 in&amp;quot;
                                        }
                                    }
                                }
                            }
                        ],
                        &amp;quot;parameterId&amp;quot;: &amp;quot;sideLength&amp;quot;
                    }
                }
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: OAuth</title>
      <link>http://example.org/docs/oauth/</link>
      <pubDate>Mon, 18 May 2020 20:39:14 -0400</pubDate>
      
      <guid>http://example.org/docs/oauth/</guid>
      <description>
        
        
        &lt;h1 id=&#34;using-oauth-20-with-onshape&#34;&gt;Using OAuth 2.0 with Onshape&lt;/h1&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;OAuth 2.0 (&amp;ldquo;OAuth&amp;rdquo;) is an authorization framework allowing a user (also referred to as the resource owner) to approve client application access to the user&amp;rsquo;s resources at an OAuth-enabled server.&lt;/p&gt;
&lt;p&gt;When integrating with Onshape, OAuth tokens authorize third-party applications (such as a desktop application or a web service) for limited access to users&amp;rsquo; Onshape documents. Using OAuth terminology, Onshape acts as both the authorization and resource server, while the desktop or web-based application is the client. Resource owners have the option of granting or denying access to applications.&lt;/p&gt;
&lt;p&gt;RFC 6749 (&lt;a href=&#34;http://tools.ietf.org/html/rfc6749&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc6749&#34;&gt;http://tools.ietf.org/html/rfc6749&lt;/a&gt;&lt;/a&gt;) is the reference for the OAuth framework as a whole. Most of this document describes how to implement the OAuth exchanges described by the reference within the context of Onshape and client applications. RFC 6750 (&lt;a href=&#34;http://tools.ietf.org/html/rfc6750&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc6750&#34;&gt;http://tools.ietf.org/html/rfc6750&lt;/a&gt;&lt;/a&gt;) describes the exchange of OAuth access tokens between clients and OAuth servers.&lt;/p&gt;
&lt;p&gt;Once obtained an OAuth token will work for third-party APIs under &lt;code&gt;/api&lt;/code&gt; it&amp;rsquo;s not appropriate to attempt to use an OAuth token to fetch the URLs typically displayed in a web browsers location bar.&lt;/p&gt;
&lt;h2 id=&#34;application-registration&#34;&gt;Application Registration&lt;/h2&gt;
&lt;p&gt;OAuth relies on an orchestrated set of interactions between the web browser, Onshape&amp;rsquo;s web services and third-party client applications (which may be desktop or web server-based). The orchestration takes the form of a sequence of requests and subsequent browser redirections between pre-configured URL endpoints. In order to take part in the OAuth process an application must first be registered with Onshape.&lt;/p&gt;
&lt;p&gt;Currently partners register applications by contacting &lt;a href=&#34;mailto:api-support@onshape.com&#34;&gt;api-support@onshape.com&lt;/a&gt; to register OAuth application. The following items are necessary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Application name - acceptable names must include some identification of the partner. &amp;lsquo;Megacorp STL Previewer and Editor&amp;rsquo; is appropriate, but &amp;lsquo;STL Preview and Editor&amp;rsquo; is not. This value cannot be changed after the application is registered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application description - a short string displayed to the user when they&amp;rsquo;re asked to grant your application permission to access their data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Primary format - this string uniquely identifies your application and is a marker for the data it might store on Onshape servers. It should take the form of a Java style reverse domain name: &lt;code&gt;com.megacorp.stl-preview&lt;/code&gt;. This value cannot be changed after the application is registered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Base HREF - this URL is the &amp;lsquo;landing page&amp;rsquo; for your application.  This page should handle OAuth authentication (see &amp;ldquo;Obtaining a code&amp;rdquo;, below), and once your application&amp;rsquo;s server is authenticated on behalf of the user, the user should be redirected to wherever your application&amp;rsquo;s content is.  Applications are placed inside an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tag within an Onshape application tab, similar to how Onshape part studios and assemblies appear in their own tabs. When the user selects your application tab, the base HREF is fetched. Additional query parameters are appended to the base HREF that allows your application to identify the specific user document and workspace. This URL must use HTTPS; Onshape is served over HTTPS and browsers will refuse to load an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; whose source is not also an HTTPS url. Only one Base HREF value is supported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redirect URIs - Your application must specify at least one (but multiple values are acceptable) URI used in OAuth protocol exchanges. This URL must also use SSL (a URL that begins with &lt;code&gt;https&lt;/code&gt;), with two exceptions applicable for installed desktop applications. These two are exceptions allow redirect URIs of the form &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;&lt;/code&gt;, or the URN string &lt;code&gt;urn:ietf:wg:oauth:2.0:oob&lt;/code&gt;. The &amp;lsquo;localhost&amp;rsquo; and URN string are meant for installed desktop applications since they do not require a publicly reachable server to be part of the OAuth process.
Possible reasons for specifying more than one redirect URI is if you deploy &amp;ldquo;test&amp;rdquo; and &amp;ldquo;production&amp;rdquo; versions of your application, and want to use a specific version of your application for different sets of users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application Scope (Permissions) - the application should also indicate the type of access it requires to the users data. The current list of scopes are:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Read - Application has read access to your documents&lt;/li&gt;
&lt;li&gt;Comment - Application has read and comment access to your documents&lt;/li&gt;
&lt;li&gt;Write - Application has modify and comment access to your documents&lt;/li&gt;
&lt;li&gt;Reshare - Application has modify and share access to your documents&lt;/li&gt;
&lt;li&gt;Full - Application has full access to your documents&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list of scopes may be increased or adjusted in the future, in particular access to personal information such as a users email address will be placed under a new scope that will need to be explicitly requested.&lt;/p&gt;
&lt;p&gt;After the application has been registered Onshape will send you corresponding OAuth Client ID and OAuth Client Secret strings. While the Client ID is considered public - it is how your specific application is uniquely identified in OAuth protocol exchanges - the Client Secret &lt;em&gt;must&lt;/em&gt; be stored securely. For example, it should NOT be checked in to source code control systems. Protect the Client Secret as you would any password data.&lt;/p&gt;
&lt;h2 id=&#34;obtaining-an-oauth-access-token&#34;&gt;Obtaining an OAuth Access Token&lt;/h2&gt;
&lt;p&gt;An OAuth access token is the credential a client application uses to access user resources at Onshape. Obtaining an OAuth access token is a two-part process: first obtaining a one-time use authorization code, and then exchanging the authorization code for them access token. The access token is used for all subsequent Onshape requests, though it too has a limited lifetime (which may be refreshed, as described below).&lt;/p&gt;
&lt;p&gt;In the example URLs used below to describe the OAuth exchanges, values enclosed in angle brackets (&amp;lsquo;&amp;lt;&amp;gt;&amp;rsquo;) are descriptive names used to indicate that application-specific values should be substituted in actual exchanges. All other URLs and URL fragments are literal strings.&lt;/p&gt;
&lt;h3 id=&#34;obtaining-a-code&#34;&gt;Obtaining a code&lt;/h3&gt;
&lt;p&gt;Your application must first must direct the user to &lt;code&gt;https://oauth.onshape.com/oauth/authorize?response_type=code&amp;amp;client_id=&amp;lt;your client id&amp;gt;&lt;/code&gt;. You may optionally add the &lt;code&gt;redirect_uri&lt;/code&gt;, &lt;code&gt;scope&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;company_id&lt;/code&gt; query parameters.&lt;/p&gt;
&lt;p&gt;If your application was registered with more than one redirect URI, then the specific URI to use is indicated by the &lt;code&gt;redirect_uri&lt;/code&gt; query string. You can only use a redirect_uri value that has been previously registered for this application. URIs must be a exactly match registered values, including the port number (if not using the default HTTPS port). Typically this action is performed by using a HTTP 302 response code with a &lt;code&gt;Location&lt;/code&gt; HTTP response header when the user arrives at the starting page of your application, for example in response to a GET of the Base HREF specified in the application registration. The Location HTTP response header should contain the URL with the correct query parameters as outlined above.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;scope&lt;/code&gt; parameter is omitted the token retrieved at the end of this process will be valid for all scopes your application has registered. You can restrict the token to a subset of the registered scopes by using the &lt;code&gt;scope&lt;/code&gt; parameter. Refer to section of RFC 6749 for the exact syntax to specify scopes within a query string. Again, this is optional; by default the OAuth exchange will use the scopes registered for your application.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;state&lt;/code&gt; parameter is a string value supplied by the partner server and returned back to the partner server later when the browser is redirected to the supplied redirect URI. It can be useful to encode such information as the document and workspace ID from the URL that initiates the OAuth process into the state parameter.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;company_id&lt;/code&gt; parameter identifies the specific Onshape company of the user requesting the token. OAuth tokens are unique to the combination of user and company. If the user is a member of more than one company and the &lt;code&gt;company_id&lt;/code&gt; parameter is not supplied the user will automatically be prompted to select from a list of eligible companies. Integrated applications are supplied with a company identifier alongside other initial startup parameters for the document the app is installed against when they&amp;rsquo;re first loaded.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; this should be a GET operation and should supply all the values as URL encoded query parameters. In particular the OAuth client id typically has at least one trailing &lt;code&gt;=&lt;/code&gt; which must be URL encoded (replaced with &lt;code&gt;%3D&lt;/code&gt; in the query parameter) in order to be handled correctly.&lt;/p&gt;
&lt;p&gt;When the browser fetches the redirected &lt;code&gt;https://oauth.onshape.com/oauth/authorize&lt;/code&gt; URL the user may be prompted to login (if the used is not currently logged in to Onshape) and is presented with a page describing your application and the scopes that it is requesting. The user can choose to Grant or Deny the request - after this choice is made the browser is redirected to the location specified by the redirect_uri if present in the request, or the default location entered during application registration.&lt;/p&gt;
&lt;p&gt;The redirection will cause the browser to GET &lt;code&gt;https://&amp;lt;redirect_uri&amp;gt;?code=&amp;lt;code&amp;gt;&amp;amp;state=&amp;lt;state&amp;gt;&lt;/code&gt; (if no state value was supplied initially it will be omitted in this GET). If an error occurs the browser is redirected to &lt;code&gt;https://&amp;lt;redirect_uri&amp;gt;?error=&amp;lt;error_code&amp;gt;&amp;amp;state=&amp;lt;state&amp;gt;&lt;/code&gt; A list of possible error codes is given at section 4.1.2.1 of RFC 6749. If the user denies your application access then the &lt;code&gt;error_code&lt;/code&gt; will be &lt;code&gt;access_denied&lt;/code&gt; though other values may also be encountered.&lt;/p&gt;
&lt;p&gt;At this point your web server application should extract the &lt;code&gt;code&lt;/code&gt; query string parameter value and use it in the subsequent phase to obtain an access token. This authorization code is a one-time use token, and is valid for only a short duration. If the code is not exchanged for an access token within 60 seconds after it is issued, it expires.&lt;/p&gt;
&lt;h3 id=&#34;exchanging-the-code-for-a-token&#34;&gt;Exchanging the code for a token&lt;/h3&gt;
&lt;p&gt;Using the authorization code from the above exchange, your application can now obtain the OAuth access token. The application makes a POST HTTP request to &lt;code&gt;https://oauth.onshape.com/oauth/token&lt;/code&gt;, with the following data provided as a URL-encoded form body with Content-Type &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grant_type=authorization_code&amp;amp;code=&amp;lt;code&amp;gt;&amp;amp;client_id=&amp;lt;client id&amp;gt;&amp;amp;client_secret=&amp;lt;client_secret&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Additionally if a redirect URI was supplied as an additional parameter in the initial GET of &lt;code&gt;/oauth/authorize&lt;/code&gt; it must also be supplied here.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; Each parameter must be URL encoded - as before the client ID and client secret both have trailing &lt;code&gt;=&lt;/code&gt; which must be replaced with &lt;code&gt;%3D&lt;/code&gt;. Do &lt;em&gt;not&lt;/em&gt; encode the entire body of the POST request - the &lt;code&gt;=&lt;/code&gt; separating parameter name and value must be left intact. This is a POST operation with the body of the POST message containing the data to complete the OAuth request for an access token. It is &lt;em&gt;not&lt;/em&gt; a GET operation with the additional data supplied as query parameters.&lt;/p&gt;
&lt;p&gt;In response to a valid POST request the server returns a JSON encoded structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;access_token&amp;quot;:&amp;quot;&amp;lt;access token&amp;gt;&amp;quot;,
  &amp;quot;token_type&amp;quot;:&amp;quot;Bearer&amp;quot;,
  &amp;quot;expires_in&amp;quot;:3600,
  &amp;quot;refresh_token&amp;quot;:&amp;quot;&amp;lt;refresh token&amp;gt;&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This token structure can be stored by your server as data unique to the user who initiated the request or you can make it part of the server side session storage for this users session with your server.&lt;/p&gt;
&lt;h3 id=&#34;using-the-access-token&#34;&gt;Using the access token&lt;/h3&gt;
&lt;p&gt;The &amp;lsquo;access_token&amp;rsquo; must be supplied on all subsequent Onshape API requests as a header value: &lt;code&gt;Authorization: Bearer &amp;lt;access_token&amp;gt;&lt;/code&gt; The access token uniquely identifies the combination of your application, the Onshape user and the set of permissions granted for the access token.&lt;/p&gt;
&lt;p&gt;The access token has a limited lifetime of 60 minutes, after which it will no longer work and attempts to use it will result in an error response for an Onshape API request. The application must use the refresh token returned by the original authorization code exchange to generate new access tokens&lt;/p&gt;
&lt;h3 id=&#34;refreshing-the-access-token&#34;&gt;Refreshing the access token&lt;/h3&gt;
&lt;p&gt;When the access token expires it must be refreshed by making another POST request to &lt;code&gt;https://oauth.onshape.com/oauth/token&lt;/code&gt; with the following URL encoded form body (again, with Content-Type &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grant_type=refresh_token&amp;amp;refresh_token=&amp;lt;refresh_token&amp;gt;&amp;amp;client_id=&amp;lt;client_id&amp;gt;&amp;amp;client_secret=&amp;lt;client_secret&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As with the authorization code data, the parameters in the form body must be URL encoded. The response to this POST request will be a JSON encoded structure as before with a new &lt;code&gt;access_token&lt;/code&gt; value that can be used for the next 60 minutes.&lt;/p&gt;
&lt;p&gt;Refresh tokens are valid for the lifetime of the user&amp;rsquo;s grant. If a user who has previously granted access to your application decides to revoke the grant, the refresh token is invalidated. If the user decides to re-grant application access, a new refresh token is generated and returned along with the access token.&lt;/p&gt;
&lt;h2 id=&#34;notes-for-developers-of-installed-desktop-applications&#34;&gt;Notes for developers of installed desktop applications&lt;/h2&gt;
&lt;p&gt;OAuth is designed for interactions between two servers utilizing a browser. However it can also be used by an installed desktop (or mobile) application. The application must perform a similar role to that of a third party server - it must exchange the code for an access token structure.&lt;/p&gt;
&lt;p&gt;In order to enable this to be as automatic as possible Onshape allows two special forms of redirect URI to be registered: &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;&lt;/code&gt; and &lt;code&gt;urn:ietf:wg:oauth:2.0:oob&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first causes the browser to attempt to load a page from the host upon which it is running. The code parameter etc will be supplied exactly the same as outlined above. If the application can listen on the registered port and behave as a simple web server for the redirect URI it can retrieve the code in the same way as a deployed web server would.&lt;/p&gt;
&lt;p&gt;The second will cause the browser to display a simple page containing the code after a request has been granted instead of going to a new URI. The page contains simple instructions to copy and paste the code into an application field. The browser will also update the title of the window to contain the code. An application could also look for browsers with window titles containing the string &lt;code&gt;Success code=&amp;lt;code&amp;gt;&lt;/code&gt; and automatically grab the code from the browser window title. If an error occurs (the grant is denied for example) then the browser window title will contain &lt;code&gt;Error description=&amp;lt;error string&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;notes-for-debugging&#34;&gt;Notes for debugging&lt;/h2&gt;
&lt;p&gt;Debugging OAuth can be a little tricky. Here are some things to bear in mind:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure you are correctly URL encoding the values supplied to the oauth/authorize and oauth/token endpoints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a GET /oauth/authorize but a POST oauth/token and make sure that the GET uses query parameters but that the POST uses a URL encoded form body.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you supply a redirect_uri to /oauth/authorize you must also supply it as an additional parameter in the POST to /oauth/token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a tool such as Burp (&lt;a href=&#34;https://portswigger.net/burp&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://portswigger.net/burp&#34;&gt;https://portswigger.net/burp&lt;/a&gt;&lt;/a&gt;) or Charles (&lt;a href=&#34;http://charlesproxy.com&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://charlesproxy.com&#34;&gt;http://charlesproxy.com&lt;/a&gt;&lt;/a&gt;) to deliberately &amp;lsquo;man-in-the-middle&amp;rsquo; the connection requests between your server and Onshape, and verify that you are performing the correct REST operations (GET vs. POST) and correctly URL encoding the parameter values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Structured Storage</title>
      <link>http://example.org/docs/structuredstorage/</link>
      <pubDate>Mon, 18 May 2020 20:40:16 -0400</pubDate>
      
      <guid>http://example.org/docs/structuredstorage/</guid>
      <description>
        
        
        &lt;h1 id=&#34;application-element-api&#34;&gt;Application Element API&lt;/h1&gt;
&lt;p&gt;Application elements provide element storage that is controlled by applications.  These elements allow a set of named sub-elements.&lt;/p&gt;
&lt;p&gt;The application can make changes to sub-elements independently or in arbitrary groupings.  Changes may be wholesale replacements, or may be deltas.  When performing a delta update, the application may post a full version as well, which allows the api to return a smaller number of deltas for subsequent queries.&lt;/p&gt;
&lt;p&gt;An application may need to perform multiple versionable actions in the course of performing a user-level action, and we want to allow the individual actions to be collected into a single action from the perspective of document history.  We do this by providing support for creation of a private transaction and support for atomically committing the transaction to the document workspace as a single user-visible action.&lt;/p&gt;
&lt;p&gt;Onshape does not assume any knowledge about the semantics of application deltas.  All merging of deltas into a consolidated form is done by the application.  Applications should typically send checkpoint state for a sub-element if many delta changes have been made since the last checkpoint.&lt;/p&gt;
&lt;p&gt;Document content and changes are logically an array of bytes, but since they are transmitted through JSON, then are expected to be presented a Base-64 encoding of the array into string form.&lt;/p&gt;
&lt;p&gt;We use some terminology in this document that is new.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;changeId&lt;/strong&gt; - an opaque identifier for the state of an application element.  Each change to the application element results in a new changeId&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;transaction&lt;/strong&gt; - a private workspace within a document workspace for composing modifications to an application element.  These changes are not visible to the user until committed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;transaction commit&lt;/strong&gt; - an operation that moves the changes performed within a transaction to the application element workspace as a single user-visible action.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Concurrent access by multiple users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the element is being concurrently accessed by multiple sessions, updates may encounter conflicts during update. If the application has a mechanism that ensures that all accesses to the element are mediated by a single process, as is done with our part studio and assemblies,  this can be addressed directly by the application.  However, if the application is not able to mediate access in this way, updates by one session may invalidate state held by another session.  We address this by notifying updaters when an update cannot be directly applied because their state is out of date and allowing them to refresh their state before re-applying the change.  We expect to also provide a webhook api for notifying applications when a concurrent update has invalidated their state.&lt;/p&gt;
&lt;p&gt;This policy of requiring the application have current state when posting updates could be overly conservative in some cases.  Detecting conflict at the sub-element level might provide for better concurrent access performance, but there probably are cases where this fails, so it probably would need some level of application control.&lt;/p&gt;
&lt;h2 id=&#34;summary-list-of-apis-described&#34;&gt;Summary list of APIs described&lt;/h2&gt;
&lt;p&gt;Creates a new application element:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST /api/appelements/d/:did/w/:wid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Query for the set of document sub-element ids:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET /api/appelements/d/:did/[wvm]/:wvmid/content/ids&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create a private transaction for changes to the element:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST /api/appelements/d/:did/w/:wid/e/:eid/transactions&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Commit private transaction changes for the element to the workspace:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST /api/appelements/d/:did/w/:wid/e/:eid/transactions/:tid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add or update element content:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST /api/appelements/d/:did/w/:wid/e/:eid/content&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;query element content:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET /api/appelements/d/:did/[wvm]/:wvmid/e/:eid/content&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;delete element content&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DELETE /api/appelements/d/:did/w/:wid/e/:eid/content/subelements/:sid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;query element change history&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET /api/appelements/d/:did/[wvm]/:wvmid/e/:eid/content/history&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;api-description&#34;&gt;API description&lt;/h2&gt;
&lt;h3 id=&#34;operation--create&#34;&gt;Operation:  create&lt;/h3&gt;
&lt;p&gt;Creates a new application element.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: See &lt;a href=&#34;#onshape-creation-conventions&#34;&gt;Onshape creation conventions&lt;/a&gt; below for information about the initial base content of application elements created by Onshape clients.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;POST /api/appelements/d/:did/w/:wid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;url params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:did - the id of the document in which the new element will be created&lt;/li&gt;
&lt;li&gt;:wid - the workspace in which the new element will be created&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;query params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;none&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JSON body:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;formatId&amp;quot; : &amp;quot;some-format-id&amp;quot;,
   &amp;quot;subelements&amp;quot; : [ { &amp;quot;subelementId&amp;quot; : &amp;quot;some-id-string&amp;quot;,
                &amp;quot;baseContent&amp;quot; : &amp;quot;some-base64-string&amp;quot; },
              ...
          ],
   &amp;quot;name&amp;quot; : &amp;quot;some-name&amp;quot;
   &amp;quot;description&amp;quot; : &amp;quot;some-description&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JSON params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;formatId - a value which identifies the format of the element data. It is used to allow Onshape to know what application should process the element when it is opened.  The value supplied here normally is assigned to a partner by Onshape, but may be self-assigned for limited-use development testing.  A partner may have more than one assigned formatId if their applications supports more than one type of application element.&lt;/li&gt;
&lt;li&gt;Any formatId assigned by Onshape will consist of alphanumeric characters only.  Partners are welcome to create test elements as long as they contain at least one non-alphanumeric character.  Onshape suggests creating test Ids of the form &amp;ldquo;company-app&amp;rdquo; using the dash character.  Onshape reserves onshape-* for internal use.&lt;/li&gt;
&lt;li&gt;subelements - provides initial content for zero or more sub-elements.
&lt;ul&gt;
&lt;li&gt;subelementId - an id string assigned by the application to identify a sub-element&lt;/li&gt;
&lt;li&gt;baseContent - the initial value for the sub-element, expressed as a base64-encoded string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;name - the name to be assigned to the element&lt;/li&gt;
&lt;li&gt;description - a description to be associated with the initial element change state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;errorCode&amp;quot; : some-integer,
   &amp;quot;errorDescription&amp;quot; : &amp;quot;some-string&amp;quot;,
   &amp;quot;elementId&amp;quot; : &amp;quot;some-element-id&amp;quot;,
   &amp;quot;changeId&amp;quot; : &amp;quot;some-change-id&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;errorCode - has the value 0 if successful or an HTTP error status code is reported otherwise&lt;/li&gt;
&lt;li&gt;errorDescription - a short description string  describing the errorCode&lt;/li&gt;
&lt;li&gt;elementId - the id of the created element&lt;/li&gt;
&lt;li&gt;changeId - the initial changeId of the created element&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operation--getids&#34;&gt;Operation:  getIds&lt;/h3&gt;
&lt;p&gt;Query for the set of document sub-element ids&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET /api/appelements/d/:did/[wvm]/:wvmid/content/ids&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;url params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:did - the document containing the element&lt;/li&gt;
&lt;li&gt;:wvmid - the workspace/version/microversion for query evaluation, corresponding to the choice of w, v, m&lt;/li&gt;
&lt;li&gt;:eid - the application element&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;query params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transactionId - an optional transaction of the element in which sub-element ids are retrieved.  If not specified, the workspace is used.&lt;/li&gt;
&lt;li&gt;changeId - the changeId of the element change state from which sub-element ids are retrieved.  If not specified, the current change state of the workspace or selected transaction is used&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;errorCode&amp;quot; : some-integer,
   &amp;quot;errorDescription&amp;quot; : &amp;quot;some-string&amp;quot;,
   &amp;quot;subelementIds&amp;quot; : [ &amp;quot;id1&amp;quot;, &amp;quot;id2&amp;quot;, ... &amp;quot;idn&amp;quot; ],
   &amp;quot;changeId&amp;quot; : &amp;quot;some-change-id&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;errorCode - has the value 0 if the operation was successful or an HTTP error status code is reported otherwise&lt;/li&gt;
&lt;li&gt;errorDescription - a short description string  describing the errorCode&lt;/li&gt;
&lt;li&gt;subelementIds - an array of sub-element ids that have been defined&lt;/li&gt;
&lt;li&gt;changeId - the change id of the element where the ids were evaluated.  We return changeId here primarily for the case where a workspace is used.  When a changeId is specified on input, the output will match the input.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operation-starttransaction&#34;&gt;Operation: startTransaction&lt;/h3&gt;
&lt;p&gt;Create a transaction for changes to the element&lt;/p&gt;
&lt;p&gt;A transaction allows multiple edits to be applied and later collapsed onto the workspace as a single edit.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST /api/appelements/d/:did/w/:wid/e/:eid/transactions&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;url params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:did - the document containing the element&lt;/li&gt;
&lt;li&gt;:wid - the workspace in which the creation takes place&lt;/li&gt;
&lt;li&gt;:eid - the application element&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;query params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;none&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JSON body:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;parentChangeId&amp;quot; : &amp;quot;optional-change-id&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JSON params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parentChangeId - identifies the change state of the element upon which this changes is based.  If at the time the call is made, this is not the current changeId for the workspace, the caller is informed that they are not using the most recent version of the element.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;errorCode&amp;quot; : some-integer,
   &amp;quot;errorDescription&amp;quot; : &amp;quot;some-string&amp;quot;,
   &amp;quot;changeId&amp;quot; : &amp;quot;some-change-id&amp;quot;,
   &amp;quot;transactionId&amp;quot; : &amp;quot;some-transaction-id&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;errorCode - has the value 0 if successful or an HTTP error status code is reported otherwise&lt;/li&gt;
&lt;li&gt;errorDescription - a short description string  describing the errorCode&lt;/li&gt;
&lt;li&gt;changeId - the changeId off of which the branch was created.&lt;/li&gt;
&lt;li&gt;transactionId - the created transaction id&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operation-committransaction&#34;&gt;Operation: commitTransaction&lt;/h3&gt;
&lt;p&gt;Move private transaction changes for the element to the element workspace&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST /api/appelements/d/:did/w/:wid/e/:eid/transactions/:tid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;url params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:did - the document containing the element&lt;/li&gt;
&lt;li&gt;:eid - the application element&lt;/li&gt;
&lt;li&gt;:wid - the workspace in which the creation takes place&lt;/li&gt;
&lt;li&gt;:tid - the transaction being committed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;query params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;none&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JSON body:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;transactionId&amp;quot; : &amp;quot;some-transaction-id&amp;quot;,
    &amp;quot;description&amp;quot; : &amp;quot;some-description&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JSON params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transactionId - the transaction to merge&lt;/li&gt;
&lt;li&gt;description - a description string to be associated with the merged changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;errorCode&amp;quot; : some-integer,
   &amp;quot;errorDescription&amp;quot; : &amp;quot;some-string&amp;quot;,
   &amp;quot;changeId&amp;quot; : &amp;quot;some-change-id&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;errorCode - has the value 0 if successful or an HTTP error status code is reported otherwise&lt;/li&gt;
&lt;li&gt;errorDescription - a short description string  describing the errorCode&lt;/li&gt;
&lt;li&gt;changeId - the changeId resulting from the merge, if success is true, or the current changeId of the workspace otherwise&lt;/li&gt;
&lt;li&gt;parentChangeId - the changeId that is the parent of the merged changes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operation-update&#34;&gt;Operation: update&lt;/h3&gt;
&lt;p&gt;Add or update element content&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST /api/appelements/d/:did/w/:wid/e/:eid/content&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;url params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:did - the document containing the element&lt;/li&gt;
&lt;li&gt;:wid - the workspace in which the creation takes place&lt;/li&gt;
&lt;li&gt;:eid - the application element&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;query params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;none&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JSON body:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;changes&amp;quot; : [ { &amp;quot;subelementId&amp;quot; : &amp;quot;some-id&amp;quot;,
                   &amp;quot;baseContent&amp;quot; : &amp;quot;some-base64-string&amp;quot; },
                 { &amp;quot;subelementId&amp;quot; : &amp;quot;some-id&amp;quot;,
                   &amp;quot;delta&amp;quot; : &amp;quot;some-base64-string&amp;quot; },
          ],
   &amp;quot;transactionId&amp;quot; : &amp;quot;optional-transaction-id&amp;quot;,
   &amp;quot;parentChangeId&amp;quot; : &amp;quot;optional-change-id&amp;quot;,
   &amp;quot;description&amp;quot; : &amp;quot;some-description&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JSON params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;changes - contains a list of changes/updates for a set of ids.  For each id, the entry specifies the content and/or changes to the content for the change, with base content and deltas expressed as a base64-encoded string.  If an entry has only baseContent, the entry represents the creation or wholesale replacement of content for the sub-element.  If an entry has only delta, it is a pure delta, and the sub-element must already exist.  If an entry has delta + baseContent, the baseContent is interpreted as a checkpoint for the sub-element content representing the state after application of the delta, as an optimization.&lt;/li&gt;
&lt;li&gt;transactionId - if specified, this is the transaction to be used used for the change rather than the current workspace for the element.&lt;/li&gt;
&lt;li&gt;parentChangeId - identifies the changeId of the element upon which this changes is based.  If at the time the call is made, this is not the current changeId for the selected transaction or workspace, the caller is informed that they are not using the most recent version of the element.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The operation moves the changes from the transaction to the document workspace.&lt;/p&gt;
&lt;p&gt;returns&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;errorCode&amp;quot; : some-integer,
   &amp;quot;errorDescription&amp;quot; : &amp;quot;some-string&amp;quot;,
   &amp;quot;changeId&amp;quot; : &amp;quot;some-change-id&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;errorCode - has the value 0 if successful or an HTTP error status code is reported otherwise&lt;/li&gt;
&lt;li&gt;errorDescription - a short description string  describing the errorCode&lt;/li&gt;
&lt;li&gt;changeId - the new changeId, if success is true, or the current changeId if success is false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operation-getcontent&#34;&gt;Operation: getContent&lt;/h3&gt;
&lt;p&gt;query element content&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET /api/appelements/d/:did/[wvm]/:wvmid/e/:eid/content&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;url params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:did - the document containing the element&lt;/li&gt;
&lt;li&gt;:wvmid - the workspace/version/microversion in which the query takes place, corresponding to the choice of w, v or m&lt;/li&gt;
&lt;li&gt;:eid - the application element&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;query params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transactionId - (optional) specifies the transaction within the workspace for retrieval.  If not specified, the element’s workspace is used&lt;/li&gt;
&lt;li&gt;changeId - (optional) specifies the changeId for the element state from which the content is to be retrieved.  If not specified, the current changeId of the selected transaction or workspace is used&lt;/li&gt;
&lt;li&gt;baseChangeId - (optional) if specified, indicates that the content to be returned should be limited to the changes relative to the base changeId.  This allows collaborating clients to incrementally synchronize their state with shared state.&lt;/li&gt;
&lt;li&gt;subelementId - (optional) restricts output to be for a single sub-element.  default is all sub-elements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;errorCode&amp;quot; : some-integer,
  &amp;quot;errorDescription&amp;quot; : &amp;quot;some-string&amp;quot;,
  &amp;quot;data&amp;quot; : [ { &amp;quot;subelementId&amp;quot; : &amp;quot;some id&amp;quot;,
                &amp;quot;baseContent&amp;quot; : &amp;quot;some-base64-string&amp;quot;,
		    &amp;quot;deltas&amp;quot; : [
                    { &amp;quot;delta&amp;quot; : &amp;quot;some-base64-string&amp;quot; },
                    { &amp;quot;delta&amp;quot; : &amp;quot;some-base64-string&amp;quot; } ] } ],
  &amp;quot;changeId&amp;quot; : &amp;quot;some-change-id&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;errorCode - has the value 0 if the operation succeeded or an HTTP error status code is reported otherwise&lt;/li&gt;
&lt;li&gt;errorDescription - a short description string  describing the errorCode&lt;/li&gt;
&lt;li&gt;data - an array of results, one per selected sub-element, containing
&lt;ul&gt;
&lt;li&gt;subelementId - the id of the sub-element associated with the entry&lt;/li&gt;
&lt;li&gt;baseContent - the latest complete snapshot of the sub-element, which is not necessarily from the latest change state.  If a baseChangeId is specified, the baseContent field may be absent, indicating that content already in use by the caller should be used as the base for applying any deltas.  The data is returned as a base64-encoded string. If a baseChangeId is specified and there has been an update that includes a basecontent value since the base change occurred, the returned data will include the latest base content and any deltas that occur after the base content.&lt;/li&gt;
&lt;li&gt;deltas - an array of sub-element delta entries, in order of oldest to newest.  If there are no deltas, an empty array is present.  Each entry contains:
&lt;ul&gt;
&lt;li&gt;delta - an incremental delta, as provided by the application, expressed as a base64-encoded string.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;changeId - the changeId of the latest change supplied in the output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operation-gethistory&#34;&gt;Operation: getHistory&lt;/h3&gt;
&lt;p&gt;query element change history&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET /api/appelements/d/:did/[wvm]/:wvmid/e/:eid/content/history&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;url params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:did - the document containing the element&lt;/li&gt;
&lt;li&gt;:wid - the workspace in which the creation takes place&lt;/li&gt;
&lt;li&gt;:eid - the application element&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;query params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;none&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;errorCode&amp;quot; : some-integer,
  &amp;quot;errorDescription&amp;quot; : &amp;quot;some-string&amp;quot;,
  &amp;quot;changes&amp;quot; : [ { &amp;quot;changeId&amp;quot; : &amp;quot;some-change-id&amp;quot;,
                  &amp;quot;createdAt&amp;quot; : &amp;quot;2014-09-08T13:59:37.272+0000&amp;quot;
                  &amp;quot;description&amp;quot; : &amp;quot;some-string&amp;quot; },
                …
                ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;errorCode - has the value 0 if the operation or an HTTP error status code is reported otherwise&lt;/li&gt;
&lt;li&gt;errorDescription - a short description string  describing the errorCode&lt;/li&gt;
&lt;li&gt;changes - an array of changes, in order of application from more recent to less recent. Each one contains:
&lt;ul&gt;
&lt;li&gt;changeId - the changeId for the change&lt;/li&gt;
&lt;li&gt;description - the description of the change&lt;/li&gt;
&lt;li&gt;createdAt - the date/time at which the change occurred&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operation-deletecontent&#34;&gt;Operation: deleteContent&lt;/h3&gt;
&lt;p&gt;delete element content&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DELETE /api/appelements/d/:did/w/:wid/e/:eid/content/subelements/:sid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;url params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:did - the document containing the element&lt;/li&gt;
&lt;li&gt;:wid - the workspace in which the creation takes place&lt;/li&gt;
&lt;li&gt;:eid - the application element&lt;/li&gt;
&lt;li&gt;:sid - the subelement id - be sure to URL encode this value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;query params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transactionId - an optional transaction in which sub-elements are deleted.  If not specified, the workspace is used.&lt;/li&gt;
&lt;li&gt;subelementId - the id associated with the sub-element to be deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;errorCode&amp;quot; : some-integer,
    &amp;quot;errorDescription&amp;quot; : &amp;quot;some-string&amp;quot;,
    &amp;quot;changeId&amp;quot; : &amp;quot;some-change-id&amp;quot;
    &amp;quot;parentChangeId&amp;quot; : &amp;quot;some-change-id&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;errorCode - has the value 0 if successful or an HTTP error status code is reported otherwise&lt;/li&gt;
&lt;li&gt;errorDescription - a short description string  describing the errorCode&lt;/li&gt;
&lt;li&gt;changeId - the changeId of the entry that results in the entry deletion&lt;/li&gt;
&lt;li&gt;parentChangeId - the changeId of the  prior to the deleteContent operation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;error-codes&#34;&gt;Error Codes&lt;/h2&gt;
&lt;p&gt;The errorCode field returned by the API methods returns only a single value, 0, with a description of &amp;ldquo;OK&amp;rdquo;. Errors are signaled using HTTPstatus codes.&lt;/p&gt;
&lt;h2 id=&#34;onshape-creation-conventions&#34;&gt;Onshape creation conventions&lt;/h2&gt;
&lt;p&gt;When the Onshape client creates an application element, it will create an initial sub-element with subelementId &amp;ldquo;OnshapeCreationContext&amp;rdquo;.  This element contains baseContent that is a base64-encoded UTF-8 stringified representation of the JSON object described below.  This object serves to notify the associated application of the context in which the element was created.  The fields in this object may change over time as needs evolve.&lt;/p&gt;
&lt;p&gt;The context object is intended to provide the application sufficient information to initialize the application element. For applications that are associated with existing data, the &amp;ldquo;data&amp;rdquo; field is used to identify that data.&lt;/p&gt;
&lt;p&gt;As of this writing, the creation context object has the following structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
&amp;quot;time&amp;quot; : {some Date() object},
&amp;quot;userId&amp;quot; : &amp;quot;some-user-id&amp;quot;,
&amp;quot;documentId&amp;quot; : &amp;quot;creation-document-id&amp;quot;,
&amp;quot;workspaceId&amp;quot; : &amp;quot;creation-workspace-id&amp;quot;,
&amp;quot;elementId&amp;quot; : &amp;quot;creation-element-id&amp;quot;,
&amp;quot;data&amp;quot; : {
    &amp;quot;documentId&amp;quot; : &amp;quot;context-document-id&amp;quot;,
    &amp;quot;workspaceId&amp;quot; : &amp;quot;context-workspace-id&amp;quot;,
    &amp;quot;elementId&amp;quot; : &amp;quot;context-element-id&amp;quot;,
    &amp;quot;partQuery&amp;quot; : &amp;quot;context-part-query&amp;quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The object may contain the following fields.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;Field&lt;/td&gt;
    &lt;td&gt;Status&lt;/td&gt;
    &lt;td&gt;Description&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;time&lt;/td&gt;
    &lt;td&gt;required&lt;/td&gt;
    &lt;td&gt;The time this element was created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;userId&lt;/td&gt;
    &lt;td&gt;required&lt;/td&gt;
    &lt;td&gt;ID of the user who created this element&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;documentId&lt;/td&gt;
    &lt;td&gt;required&lt;/td&gt;
    &lt;td&gt;ID of the document in which this element was created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;workspaceId&lt;/td&gt;
    &lt;td&gt;required&lt;/td&gt;
    &lt;td&gt;ID of the workspace in which this element was created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;elementId&lt;/td&gt;
    &lt;td&gt;required&lt;/td&gt;
    &lt;td&gt;ID of the this element when created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;data&lt;/td&gt;
    &lt;td&gt;optional&lt;/td&gt;
    &lt;td&gt;Identifies the data context.   If not present, no initial data is associated with this element.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;data.documentId&lt;/td&gt;
    &lt;td&gt;required&lt;/td&gt;
    &lt;td&gt;ID of the document that provides the data context.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;data.workspaceId&lt;/td&gt;
    &lt;td&gt;required&lt;/td&gt;
    &lt;td&gt;ID of the workspace that provides the data context.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;data.elementId&lt;/td&gt;
    &lt;td&gt;optional&lt;/td&gt;
    &lt;td&gt;ID of the element that provides the data context.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;data.partQuery&lt;/td&gt;
    &lt;td&gt;optional&lt;/td&gt;
    &lt;td&gt;Identifies a part, currently only meaningful if the data.elementId is present and is a partstudio.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Tessellation Performance</title>
      <link>http://example.org/docs/tessellationperformance/</link>
      <pubDate>Mon, 18 May 2020 20:42:24 -0400</pubDate>
      
      <guid>http://example.org/docs/tessellationperformance/</guid>
      <description>
        
        
        &lt;h1 id=&#34;tessellation-performance-in-onshape&#34;&gt;Tessellation Performance in Onshape&lt;/h1&gt;
&lt;p&gt;Last updated 8-October-2015&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This note provides guidance in getting good performance from the Onshape tessellation API.&lt;/p&gt;
&lt;p&gt;We experimented with the &amp;ldquo;render fan&amp;rdquo; model, with the following results.&lt;/p&gt;
&lt;p&gt;For this model, all of the parts are referenced in a single part studio. This provides a very large opportunity for performance improvements.&lt;/p&gt;
&lt;p&gt;Our tests indicate that we are limited to about 25 REST calls per second. However, you can dramatically reduce the number of calls if you use the &amp;ldquo;partstudios&amp;rdquo; interface instead of the &amp;ldquo;parts&amp;rdquo; interface.&lt;/p&gt;
&lt;p&gt;Make a single call to retrieve the metadata for the part studio, returning an array that has color information and other metadata for each part:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/api/partstudios/.../metadata
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make a single call to retrieve the tessellation data for the part studio, returning an array with mesh data for each part:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/api/partstudios/.../tessellatedfaces
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We used explicit tolerance settings based on the defaults used by Onshape - you can increase/decrease to balance mesh size and performance.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# define render constants based on Onshape defaults
# double ANGULAR_TOLERANCE_FINE        = 0.087267;  // about 5 degree, a circle will have 72 segments
# double ANGULAR_TOLERANCE_MEDIUM      = 0.2618;  // about 15 degree, a circle will have 24 segments
# double ANGULAR_TOLERANCE_COARSE         = 0.5236;  // about 30 degree, a circle will have 12 segments
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For simplicity, we used constant values for the chord tolerance. Onshape calculates these based on the size of the model as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# double CHORD_TOLERANCE_RATIO_FINE    = 0.0025;   // 0.25% of model size radius
# double CHORD_TOLERANCE_RATIO_MEDIUM   = 0.01;    // 1% of model size radius
# double CHORD_TOLERANCE_RATIO_COARSE      = 0.05;    // 5% is the max
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For these experiments, we assumed the model had a radius of 1 meter, so the tolerances were set to the values described above.&lt;/p&gt;
&lt;p&gt;To get reproducible results, we pre-loaded the model. This took about 7 seconds; if the model is not already loaded, the first call to retrieve data would incur this cost:&lt;/p&gt;
&lt;p&gt;WARMUP THE SYSTEM&lt;/p&gt;
&lt;p&gt;Read mesh data for a single part to ensure the model is loaded onto a server in Onshape&lt;/p&gt;
&lt;p&gt;Time 7.8 seconds&lt;/p&gt;
&lt;p&gt;SINGLE CALL CASES:&lt;/p&gt;
&lt;p&gt;(Making a single call to retrieve the tessellation for an entire part studio)&lt;/p&gt;
&lt;p&gt;Getting full studio COARSE mesh&amp;hellip;&lt;/p&gt;
&lt;p&gt;Triangle count 240222&lt;/p&gt;
&lt;p&gt;Time 11.2&lt;/p&gt;
&lt;p&gt;Getting full studio MEDIUM mesh&amp;hellip;&lt;/p&gt;
&lt;p&gt;Triangle count 530234&lt;/p&gt;
&lt;p&gt;Time 14.9&lt;/p&gt;
&lt;p&gt;Getting full studio FINE mesh&amp;hellip;&lt;/p&gt;
&lt;p&gt;Triangle count 2214309&lt;/p&gt;
&lt;p&gt;Time 65.6&lt;/p&gt;
&lt;p&gt;MULTIPLE CALL CASES:&lt;/p&gt;
&lt;p&gt;(Make a separate call for each part in the part studio)&lt;/p&gt;
&lt;p&gt;Getting individual COARSE mesh&amp;hellip;&lt;/p&gt;
&lt;p&gt;Triangle count 240222&lt;/p&gt;
&lt;p&gt;Time 356.6&lt;/p&gt;
&lt;p&gt;Getting individual MEDIUM mesh&amp;hellip;&lt;/p&gt;
&lt;p&gt;Triangle count 530234&lt;/p&gt;
&lt;p&gt;Time 340.7&lt;/p&gt;
&lt;p&gt;Getting individual FINE mesh&amp;hellip;&lt;/p&gt;
&lt;p&gt;Triangle count 2214309&lt;/p&gt;
&lt;p&gt;Time 359.7&lt;/p&gt;
&lt;p&gt;Some things to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The time is dominated by the total number of calls in the multiple call cases, as the REST overhead is significant&lt;/li&gt;
&lt;li&gt;These timings are reproducible within about 10% in my tests&lt;/li&gt;
&lt;li&gt;We used the indexTable option to reduce the total data size.&lt;/li&gt;
&lt;li&gt;We used the header: Accept-Encoding: gzip to ensure that the data was compressed in transit.&lt;/li&gt;
&lt;li&gt;When making multiple calls, we were able to get about 10-15% improvement when I allowed up to 10 concurrent calls at at time&lt;/li&gt;
&lt;li&gt;If the model is an assembly, it is worthwhile to collect all parts from a partstudio in a single call for each partstudio used in the assembly&lt;/li&gt;
&lt;li&gt;Note that the FINE mesh has about 2.2M triangles total, COARSE and MEDIUM returned smaller data sets.&lt;/li&gt;
&lt;li&gt;Performance will of course vary depending on the speed of your internet connection. =&lt;/li&gt;
&lt;li&gt;The tests were written in Python 3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you follow these guidelines, you should be able to get very acceptable performance.&lt;/p&gt;
&lt;p&gt;The worst case would be an assembly that pulled in a single part from each of hundreds of different part studios, but this is not typical of Onshape usage. We would need to enhance our API to better support that case.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Testing Guidelines</title>
      <link>http://example.org/docs/testingguidelines/</link>
      <pubDate>Mon, 18 May 2020 20:42:57 -0400</pubDate>
      
      <guid>http://example.org/docs/testingguidelines/</guid>
      <description>
        
        
        &lt;h1 id=&#34;onshape-appstore-testing-guidelines&#34;&gt;Onshape Appstore Testing Guidelines&lt;/h1&gt;
&lt;p&gt;The purpose of this document is to help you get your application and App Store entry ready for QA testing.&lt;/p&gt;
&lt;p&gt;Application Release Workflow (ARW)&lt;/p&gt;
&lt;p&gt;Each application submitted to the Onshape App Store goes through a series of stage-gates.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ok to deploy to Production (Beta testing) (limited visibility)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ok to make Public&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application is Public&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The starting state is ‘Ok to deploy to limited visibility on Production’’. The end goal is ‘Application is Public on Production’. To advance to the next stage, your application must pass testing and your app store entry must pass review.&lt;/p&gt;
&lt;p&gt;Testing may be requested at any time.&lt;/p&gt;
&lt;p&gt;Testing is done on a first-come basis.&lt;/p&gt;
&lt;p&gt;When testing is complete (pass or fail), you go to the back of the queue.&lt;/p&gt;
&lt;p&gt;Testing protocol&lt;/p&gt;
&lt;p&gt;Testing of Partner Applications will be performed against the checklist in addendum A.&lt;/p&gt;
&lt;p&gt;Testing of Production App Store entries will be performed against the checklist in addendum B.&lt;/p&gt;
&lt;p&gt;The result of each test will be one of;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pass - no action needed and no notification will be issued&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An enhancement - these are suggestions that should you chose to implement them, we believe would make the application better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bug (low priority) - these are slight deviations from the criteria but have low end user impact and will not prevent the application being turned on for public access and there is no stipulated time-frame for their resolution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bug (medium priority) - these are material deviations from the criteria that are noticeable to the end-user and represent a minor problem requiring a work-around. A medium priority bug will not prevent the application from being turned on for public access, but should be fixed within 30 days.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bug (high priority) - this is a significant deviation from the criteria and will prevent the application from being turned on for public access but will not prevent the application from being promoted from the partner stack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bug (MUST FIX) - this category usually represents a significant deviation from protocol or security violation. A MUST FIX will prevent an application on Production being turned on for public access and MAY, if the application is already public, cause it to be temporarily suspended from the app store.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any test may be annotated with a ‘*’.&lt;/p&gt;
&lt;p&gt;This indicates that the test is a must-pass in order for the application or app store entry to be promoted. A failure of this test will generate a bug (MUST FIX).&lt;/p&gt;
&lt;h2 id=&#34;actions-that-you-can-initiate-from-jira&#34;&gt;Actions that you can initiate from JIRA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Request application testing - This puts your application in the testing queue. We will note when testing has started (‘in progress’) and when concluded, the ticket will be closed. The outcome will include notes and links to any issues generated (‘tickets’). This phase may include as many iterations as needed to get your application ready. If necessary, the Application Release Workflow (ARW) will be updated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request public (general) authorization. We will note when testing has started (‘in progress’) and this request will trigger a review of your app store entry and any outstanding bugs. Note there is no implied testing of your application, simply a review of outstanding issues (tickets) and of the app store entry. Success at this stage will advance the Application Release Workflow (ARW) and you will now be able to request public (general) release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request public (general) release. This request states that you have coordinated with the Partner Application Manager (Joe Dunne) and the Onshape marketing department and general agreement has been reached that now is the time - Congratulations!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;addendum-a---application-testing-criteria&#34;&gt;Addendum A - Application Testing Criteria&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Applied to all Applications&lt;/li&gt;
&lt;li&gt;Applies to Integrated Cloud Applications&lt;/li&gt;
&lt;li&gt;Applies to Connected Cloud Applications&lt;/li&gt;
&lt;li&gt;Applies to Connected Desktop Applications&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;x Denotes that this is a ‘must-pass’. A failure of this test results in a must-fix&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1)x The application must use the Onshape OAUTH mechanism&lt;/li&gt;
&lt;li&gt;(1)x The OAUTH must be against the correct stack&lt;/li&gt;
&lt;li&gt;(2)(3)x To be promoted to the Production stack, and hosted service must be on a monitored production server with worldwide 24/7 availability.&lt;/li&gt;
&lt;li&gt;(2)(3) The application should not generate any avoidable console (browser)  errors&lt;/li&gt;
&lt;li&gt;(1) The application should should provide one or more of the following options;
&lt;ul&gt;
&lt;li&gt;Login using the Onshape ID (account created silently on first use)&lt;/li&gt;
&lt;li&gt;Login with partner product account credentials&lt;/li&gt;
&lt;li&gt;Create a new partner account&lt;/li&gt;
&lt;li&gt;The user should not have to leave the registration workflow to complete a pre-requisite&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(1) The application must be capable of managing/displaying documents in excess of 20 - suggested strategies include;
&lt;ul&gt;
&lt;li&gt;Use of a ‘Next’ button to load the next 20&lt;/li&gt;
&lt;li&gt;Infinite scroll (loading the next 20 if/when the scrollbar reaches the bottom of the dialog&lt;/li&gt;
&lt;li&gt;The application must display ‘reasonable’ performance when reading documents, workspaces, elements and parts. Consider at-scale than an account may have thousands of documents, many with multiple workspaces and each with multiple elements. Strategies may include any combination of;&lt;/li&gt;
&lt;li&gt;Displaying the most-recently-opened first&lt;/li&gt;
&lt;li&gt;Displaying a counter of documents/workspaces/elements read&lt;/li&gt;
&lt;li&gt;Progressive loading&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(1) The application should correctly list valid documents when ‘per document app access’ is turned on.&lt;/li&gt;
&lt;li&gt;(1) The application should correctly handle selection of versions&lt;/li&gt;
&lt;li&gt;(1) The application should correctly handle selection of workspaces (branches)&lt;/li&gt;
&lt;li&gt;(1) The application should correctly handle/display elements that;
&lt;ul&gt;
&lt;li&gt;Are part studios that contain nothing&lt;/li&gt;
&lt;li&gt;Are assemblies that contain nothing&lt;/li&gt;
&lt;li&gt;Are part studios that contain only surfaces&lt;/li&gt;
&lt;li&gt;Are part studios that contain only ‘wire’ data (eg helices)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(1) The application should appropriately handle revocation of a grant&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;addendum-b---app-store-testing-criteria&#34;&gt;Addendum B - App Store Testing Criteria&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Applied to all Applications&lt;/li&gt;
&lt;li&gt;Applies to Integrated Cloud Applications&lt;/li&gt;
&lt;li&gt;Applies to Connected Cloud Applications&lt;/li&gt;
&lt;li&gt;Applies to Connected Desktop Applications&lt;/li&gt;
&lt;li&gt;Required for deployment to production&lt;/li&gt;
&lt;li&gt;Only where the application is using Onshape billing&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;x Denotes that this is a ‘must-pass’. A failure of this test results in a must-fix&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) The application should have a descriptive name&lt;/li&gt;
&lt;li&gt;(1) The application summary should be accurate&lt;/li&gt;
&lt;li&gt;(1)x The redirect URLS should be valid&lt;/li&gt;
&lt;li&gt;(2)x The iframe URL should be valid&lt;/li&gt;
&lt;li&gt;(1) The Grant (permissions) request should be no more than is needed&lt;/li&gt;
&lt;li&gt;(1) The Application Type should be correctly set&lt;/li&gt;
&lt;li&gt;(1) Team Visibility should be set&lt;/li&gt;
&lt;li&gt;(1) The Category should be appropriate&lt;/li&gt;
&lt;li&gt;(1) The application description should be accurate&lt;/li&gt;
&lt;li&gt;(1) The Sign-In URL should be valid&lt;/li&gt;
&lt;li&gt;(1) The pricing summary should be accurate. For instance, it cannot say ‘Free’ if this is a trial - it should say ‘Free for 30 days and then $30/month&lt;/li&gt;
&lt;li&gt;(1) Any pay-plans should have an accurate description&lt;/li&gt;
&lt;li&gt;(1) The support URL should point to a resource for help - this can be;
&lt;ul&gt;
&lt;li&gt;A support ticketing system (eg Zendesk)&lt;/li&gt;
&lt;li&gt;A page giving a telephone number&lt;/li&gt;
&lt;li&gt;A page giving an email address&lt;/li&gt;
&lt;li&gt;A forum&lt;/li&gt;
&lt;li&gt;It cannot be to an FAQ page (unless that page also contains one of the other options)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(1)The EULA link should point to an English Language EULA&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Model Translation</title>
      <link>http://example.org/docs/translation/</link>
      <pubDate>Mon, 18 May 2020 20:43:20 -0400</pubDate>
      
      <guid>http://example.org/docs/translation/</guid>
      <description>
        
        
        &lt;h1 id=&#34;onshape-model-translation-apis&#34;&gt;Onshape model translation APIs&lt;/h1&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This document describes the APIs provided by Onshape for model translation. This document makes reference to specific APIs using the naming convention &lt;em&gt;Group Name - Api Name&lt;/em&gt;, where the &lt;group name&gt; identifies an API group and &lt;api name&gt; identifies a specific API defined in the group. See the API Explorer for details on the APIs.&lt;/p&gt;
&lt;p&gt;Onshape provides several APIs to support model format translation. These fall into 3 basic categories&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#simple-conversions&#34;&gt;Simple conversions&lt;/a&gt; - these support translation of Onshape content into STL and Parasolid format.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#general-translations&#34;&gt;General translation&lt;/a&gt; - these support translation from a variety of formats into a variety of other formats.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#import-translation&#34;&gt;Import translation&lt;/a&gt; - these translation operations are performed by default when a translatable file is uploaded to a blob element&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;simple-conversions&#34;&gt;Simple conversions&lt;/h2&gt;
&lt;p&gt;Simple conversions are limited to generating Parasolid and STL output. Most of the interfaces defined here operate by requesting an HTTP redirect to a different URL where the request will be fulfilled. Applications must be sure that they are explicitly handling the redirect and attaching authentication headers to the follow-up request or it will fail.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;STL-specific&lt;/p&gt;
&lt;p&gt;Onshape Part Studio tabs and individual parts can be translated to STL format using the dedicated APIs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Part Studios - Export Part Studio to STL&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Parts - Export Part to STL&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These interfaces require a Part Studio element Id and all use redirect behavior.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parasolid-specific&lt;/p&gt;
&lt;p&gt;Onshape Part Studio tabs and individual parts can be translated to Parasolid format using the dedicated APIs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Part Studios - Export Part Studio to STL&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Parts - Export Part to STL&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These interfaces also require a Part Studio element Id and all use redirect behavior.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-purpose&lt;/p&gt;
&lt;p&gt;In addition to the format-specific APIs defined for Parts and Part Studios, there are two similar multi-purpose APIs that can convert multiple source types to both STL and Parasolid.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Documents - Export Element&lt;/em&gt; (POST)&lt;/p&gt;
&lt;p&gt;This form requires the caller to perform an HTTP POST operation followed by an HTTP GET to a URL returned by the POST operation. There is no HTTP redirect performed; the application must explicitly follow the returned link.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Documents - Export Element&lt;/em&gt; (GET)&lt;/p&gt;
&lt;p&gt;This form takes all configuration information in the form of query parameters and uses the redirect mechanism.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These APIs allow conversion of Assemblies as well as Parts and Part Studios into Either STL or Parasolid.
The primary reason for the existence of the POST form of the API in addition to the GET form of the API is to overcome limits in URL and HTTP header length that can be exceeded when using long lists of part Id values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;general-translations&#34;&gt;General translations&lt;/h2&gt;
&lt;p&gt;The simple conversions listed above perform the format conversion synchronously, returning the output immediately after some processing delay. Other format conversions are more complex and time-consuming, and in many cases, cannot be completed quickly enough to prevent connection errors. The solution we use instead is a model where the application performs a 3-step process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP POST operation to create a translation request&lt;/li&gt;
&lt;li&gt;Poll for operation completion or wait for webhook notification of completion&lt;/li&gt;
&lt;li&gt;HTTP GET operation to retrieve the translation result.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;translation-formats&#34;&gt;Translation Formats&lt;/h3&gt;
&lt;p&gt;The general translation APIs do not support STL, but do support a wide range of industry formats.&lt;/p&gt;
&lt;h4 id=&#34;output-formats&#34;&gt;Output Formats&lt;/h4&gt;
&lt;p&gt;Supported output formats currently include PARASOLID, STEP, ACIS, IGES, SOLIDWORKS, ONSHAPE.&lt;/p&gt;
&lt;h4 id=&#34;source-formats&#34;&gt;Source Formats&lt;/h4&gt;
&lt;p&gt;We allow a larger range of input formats that output formats. In addition to the formats listed above for input format,
you can also convert from Part Studio, Assembly, PROE, NX, CATIA and INVENTOR.&lt;/p&gt;
&lt;h3 id=&#34;apis&#34;&gt;APIs&lt;/h3&gt;
&lt;p&gt;We provide APIS to allow programatically determining supported formats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Translations - Get Translation Formats&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This API presents the full list of supported translation formats&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Part Studios - Get Translation Formats&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Returns a list of the formats to which a particular Part Studio tab can be converted. Note that empty Part Studio
tabs cannot be converted to other formats.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Assemblies - Get Translation Formats&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Returns a list of the formats to which a particular Assembly tab can be converted. Note that empty Assembly
tabs cannot be converted to other formats.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the source format for a translation is currently always automatically detected by Onshape. Part Studios and Assemblies are known to be ONSHAPE format. File uploads have their type determined by the filename suffix. For example, a file named part7.step is assumed to be in STEP format.&lt;/p&gt;
&lt;h3 id=&#34;translation-initiation&#34;&gt;Translation initiation&lt;/h3&gt;
&lt;p&gt;Translation is initiated by performing an HTTP POST operation to one of the &amp;ldquo;Create Translation&amp;rdquo; APIs.&lt;/p&gt;
&lt;p&gt;These APIs have some common options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;formatName&lt;/p&gt;
&lt;p&gt;This is the name of the format to which the source will be translated. This formatName must be one of the supported
names (names are case-sensitive). Note that translation to ONSHAPE format requires storeInDocument=true.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;storeInDocument&lt;/p&gt;
&lt;p&gt;Allows the caller to decide whether the output should be part of the document (as a Part Studio, Assembly or Blob
tab) or whether the output should be external to the document.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;APIs which use an upload or blob element common options when translating to ONSHAPE:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;flattenAssemblies&lt;/p&gt;
&lt;p&gt;If the source file contains an assembly and flattenAssemblies is set to true, the assembly structure is removed and
a single part studio is created.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yAxisIsUp&lt;/p&gt;
&lt;p&gt;Allows the application to tell Onshape translation whether the Y axis or Z Axis is the &amp;ldquo;Up&amp;rdquo; direction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;apis-1&#34;&gt;APIs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Translations - Create translation from upload&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This API allows an application to provide an input source file that will be converted to another format without
requiring that the uploaded file be stored as a blob tab in the document. The API requires a document to be provided
to define ownership context, but the uploaded file is not stored in the document.&lt;/p&gt;
&lt;p&gt;The file is uploaded as multipart form data. Each of the API parameters is a separate field in the multipart upload.
The two required fields are &amp;ldquo;file&amp;rdquo; and &amp;ldquo;formatName&amp;rdquo;. The file part must contain the upload and should normally have
a filename attribute set. The filename attribute can be omitted if the form data also has an encodedFilename field
that contains the filename in URL-encoded form.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Blob Elements - Create Translation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A blob element containing a translatable file can be translated using this API. The blob element can be the result
of a previous upload or it can be the output of a previous translation operation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Part Studios - Create Translation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Initiate translation for a Part Studio element&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Assemblies - Create Translation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Initiate translation for an Assembly element&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The response from these APIs includes the fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;id&lt;/p&gt;
&lt;p&gt;An identifier for the created translation operation. It can be used for later retrieval of translation results&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;href&lt;/p&gt;
&lt;p&gt;A URL for the &lt;em&gt;Translations - Get Translation Status&lt;/em&gt; API for this specific translation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;requestState
Identifies the state of the translation request. The request will be done when the state changes from ACTIVE to
DONE or FAILED. If FAILED, the translation was not successfully completed. If DONE, it completed successfully.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;waiting-for-translation-completion&#34;&gt;Waiting for translation completion&lt;/h3&gt;
&lt;p&gt;The simplest way to determine when the translation is complete is to poll. You do this in one of two ways (which are really the same thing):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call the href returned in the translation response, which returns an updated state object&lt;/li&gt;
&lt;li&gt;Call the &lt;em&gt;Translation - Get Translation Status&lt;/em&gt; API, using the id returned in the translation response&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the requestState changes to some value other than ACTIVE you will be ready to retrieve results.&lt;/p&gt;
&lt;p&gt;An alternate way to wait for translation completion is to register a webhook and wait for a notification to be delivered. This is discussed &lt;a href=&#34;#webhook-translation-completion-notification&#34;&gt;later&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;retrieving-results&#34;&gt;Retrieving results&lt;/h3&gt;
&lt;p&gt;Once a translation requestState becomes DONE, results are available to be used. How they are accessed depends on the specifics of the translation. A completed request has several additional fields that may be populated. If your original request specified storeInDocument=false then the results are stored as external data, in which case the resultExternalDataIds status field provides identifiers to be used for retrieval (see External Data, below). If the request specified storeInDocument=true then the resultElementIds field will be populated (see Element Data, below).&lt;/p&gt;
&lt;h4 id=&#34;external-data&#34;&gt;External Data&lt;/h4&gt;
&lt;p&gt;External data is data that is associated with, but external to the document used as translation context. This data is not versioned as is done with in-document data. A translation request to a format other than ONSHAPE currently always produces a single data file (from resultExternalDataIds).&lt;/p&gt;
&lt;p&gt;To retrieve an external data file, use the API
Documents - Download External Data&lt;/p&gt;
&lt;h4 id=&#34;element-data&#34;&gt;Element Data&lt;/h4&gt;
&lt;p&gt;When storeInDocument=true is specified, the results are stored as new elements in the document. The new elements are reported in the resultElementIds field in the translation status response. If the selected format is ONSHAPE, these elements will be Assemblies/Part Studios, and there may be multiple created elements. If the selected format is something other than ONSHAPE, there will be a single blob element result.&lt;/p&gt;
&lt;p&gt;A blob element result can be extracted using the &lt;em&gt;Blob Elements - Download File From Blob Element&lt;/em&gt; API.&lt;/p&gt;
&lt;h2 id=&#34;import-translation&#34;&gt;Import Translation&lt;/h2&gt;
&lt;p&gt;When uploading a file to a blob element, either as a new element or an update to an existing element, if the file
is a recognized format for import, it will, by default, be converted into ONSHAPE format. This behavior can be
overridden by the application, if desired.&lt;/p&gt;
&lt;h2 id=&#34;webhook-translation-completion-notification&#34;&gt;Webhook Translation Completion notification&lt;/h2&gt;
&lt;p&gt;If an application runs in a server with a network address that is reachable across the internet, the application may choose to use webhooks to find out about translation completion. For reliable operation, a webhook should be registered for the translation document prior to initiating translation. If registered after translation initiation, the notification might be lost. See the help document on Webhook Notifications for more details.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Webhook Notifications</title>
      <link>http://example.org/docs/webhook/</link>
      <pubDate>Mon, 18 May 2020 20:44:05 -0400</pubDate>
      
      <guid>http://example.org/docs/webhook/</guid>
      <description>
        
        
        &lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Webhook notifications allow an application to register to receive notifications of certain events that occur within the
Onshape environment. To receive a notification, an application must expose an endpoint that Onshape can call.&lt;/p&gt;
&lt;h2 id=&#34;example-code&#34;&gt;Example Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/onshape-public/onshape-clients/blob/master/python/test/test_webhooks.py#L126&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;events&#34;&gt;Events&lt;/h2&gt;
&lt;p&gt;Each type of event that an application may receive notifications for has a unique identifier known as the event type.
Event types are grouped into Event Groups. Each group shares specification requirements, as described below.&lt;/p&gt;
&lt;h3 id=&#34;event-groups&#34;&gt;Event Groups&lt;/h3&gt;
&lt;p&gt;Event types are categorized into several different groups based on the dominant user resource of the event. The group
that a given event is part of defines the required parameters needed in the registration process to identify the
resource or group of resources to watch. For instance, if registering for an event in the &lt;code&gt;document&lt;/code&gt; event group,
the application must identify either a specific document&amp;rsquo;s id or a specific company&amp;rsquo;s id. If registered for a company,
the event will be registered for all present and future documents owned by the company.&lt;/p&gt;
&lt;h4 id=&#34;application-group&#34;&gt;Application Group&lt;/h4&gt;
&lt;p&gt;Monitor changes to applications.&lt;/p&gt;
&lt;h5 id=&#34;registration-requirements&#34;&gt;Registration Requirements&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clientId&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;supported-event-types&#34;&gt;Supported Event Types&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onshape.user.lifecycle.updateappsettings&lt;/code&gt; - occurs when user application settings are modified&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;document-group&#34;&gt;Document Group&lt;/h4&gt;
&lt;p&gt;Monitor various aspects of document changes.&lt;/p&gt;
&lt;h5 id=&#34;registration-requirements-1&#34;&gt;Registration Requirements&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;documentId&lt;/code&gt; OR &lt;code&gt;companyId&lt;/code&gt; must be specified in the registration body.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: only &lt;code&gt;documentId&lt;/code&gt; is valid for the &lt;code&gt;onshape.document.lifecycle.statechange&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;supported-event-types-1&#34;&gt;Supported Event Types&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onshape.model.lifecycle.changed&lt;/code&gt; - occurs when a change to a model has been made&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onshape.model.translation.complete&lt;/code&gt; - occurs when a translation request is completed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onshape.model.lifecycle.metadata&lt;/code&gt; - occurs when part or element metadata is modified&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onshape.model.lifecycle.createversion&lt;/code&gt; - occurs when a new version of a document is created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onshape.model.lifecycle.createworkspace&lt;/code&gt; - occurs when a new workspace is created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onshape.model.lifecycle.createelement&lt;/code&gt; - occurs when a new element is created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onshape.model.lifecycle.deleteelement&lt;/code&gt; - occurs when an element is deleted&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onshape.document.lifecycle.statechange&lt;/code&gt; - occurs when an document changes state&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onshape.model.lifecycle.changed.externalreferences&lt;/code&gt; - occurs when an external reference changes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onshape.document.lifecycle.created&lt;/code&gt; - occurs when a document is created&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onshape.revision.created&lt;/code&gt; - occurs when a revision is created&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;workflow-group&#34;&gt;Workflow Group&lt;/h4&gt;
&lt;p&gt;Monitor release management actions.&lt;/p&gt;
&lt;h5 id=&#34;registration-requirements-2&#34;&gt;Registration Requirements&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;companyId&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;supported-event-types-2&#34;&gt;Supported Event Types&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onshape.workflow.transition&lt;/code&gt; - occurs when a revision or release package transitions through workflow states.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lifecycle-group&#34;&gt;Lifecycle Group&lt;/h4&gt;
&lt;p&gt;Monitor webhook changes.&lt;/p&gt;
&lt;h5 id=&#34;registration-requirements-3&#34;&gt;Registration Requirements&lt;/h5&gt;
&lt;p&gt;No requirements. This event type responds to any and all webhooks registered by the same application.&lt;/p&gt;
&lt;h5 id=&#34;supported-event-types-3&#34;&gt;Supported Event Types&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webhook.ping&lt;/code&gt; - occurs either in response to a request by an application to call a registered webhook, or as a post-registration validation initiated by Onshape&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webhook.register&lt;/code&gt; - occurs in response to a notification registration API call&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webhook.unregister&lt;/code&gt; - occurs in response to a notification deregistation API call&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;webhook-registration&#34;&gt;Webhook Registration&lt;/h2&gt;
&lt;p&gt;An application registers for event notification by making a REST call to the Onshape web service, providing a URL to
notify, and the required parameters for the event types to be registered, as mentioned in &lt;a href=&#34;#event-groups&#34;&gt;Event Groups&lt;/a&gt;.
If the registration request is well-formed, the registration API call returns information about the registration,
including a unique ID string.  This ID string identifies the webhook registration.  No de-duplication of notification
registrations is performed by the API.  Each registration call will yield a new registration ID, even if the parameters
are identical to those passed in a prior call. Shortly after an application calls the notification registration API,
Onshape will make make an asynchronous trial notification call to the URL generated from the URL template with an event
type of webhook.register in order to test whether the application notification server is accessible.  If the trial
notification delivery fails to return an HTTP 200 status code, the notification registration is cancelled. The trial
notification is usually delivered after the notification registration has been received by the application. However,
variations in network delays may result in the trial notification occurring before response is received and processed by
the application, so the notification handler should be ready to process notifications before the registration call is
made.&lt;/p&gt;
&lt;h2 id=&#34;notifications&#34;&gt;Notifications&lt;/h2&gt;
&lt;p&gt;Notifications are delivered to an application as an HTTP POST with a JSON body.  The body includes information about the
identity of the registration request plus information specific to the event and notification message. An application may
register for notifications to a URL that uses either HTTP or HTTPS.  If HTTPS is specified by the URL template, the
notification server must supply a certificate that is signed by a certificate authority (CA) recognized by Onshape.&lt;br&gt;
Self-signed certificates as well as certificates signed by unrecognized CAs will be rejected, causing notification
delivery to fail.&lt;/p&gt;
&lt;h2 id=&#34;notification-deregistration&#34;&gt;Notification Deregistration&lt;/h2&gt;
&lt;p&gt;When an application no longer needs to be notified of changes specified by a particular notification registration, it should normally de-register the notification request.  De-registration is performed by making an HTTP that specifies the hook to deregister.  Onshape will attempt to call the deregistered hook with an event type of webhook.unregister as validation for the application that the de-registration is complete.  If the application does not de-register the webhook, Onshape will continue delivering notifications until either the the application returns an error in response to a notification for the webhook, or fails to respond at all for an extended period of time.&lt;/p&gt;
&lt;h2 id=&#34;notification-api-example-messages&#34;&gt;Notification API example messages&lt;/h2&gt;
&lt;p&gt;registration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;timestamp&amp;quot;: &amp;quot;2014-12-16T23:45:10.611-0500&amp;quot;,
  &amp;quot;event&amp;quot;: &amp;quot;webhook.register&amp;quot;,
  &amp;quot;workspaceId&amp;quot;: &amp;quot;000000000000000000000000&amp;quot;,
  &amp;quot;elementId&amp;quot;: &amp;quot;000000000000000000000000&amp;quot;,
  &amp;quot;webhookId&amp;quot;: &amp;quot;544e91f7fb88ed44f5de1508&amp;quot;,
  &amp;quot;messageId&amp;quot;: &amp;quot;34795d2e5f5f44eeb61fb7b1&amp;quot;,
  &amp;quot;data&amp;quot;: &amp;quot;Some data&amp;quot;,
  &amp;quot;documentId&amp;quot;: &amp;quot;000000000000000000000000&amp;quot;,
  &amp;quot;versionId&amp;quot;:  &amp;quot;000000000000000000000000&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ping&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;timestamp&amp;quot;: &amp;quot;2014-12-16T23:46:24.368-0500&amp;quot;,
  &amp;quot;event&amp;quot;: &amp;quot;webhook.ping&amp;quot;,
  &amp;quot;workspaceId&amp;quot;: &amp;quot;000000000000000000000000&amp;quot;,
  &amp;quot;elementId&amp;quot;: &amp;quot;000000000000000000000000&amp;quot;,
  &amp;quot;webhookId&amp;quot;: &amp;quot;544e91f7fb88ed44f5de1508&amp;quot;,
  &amp;quot;messageId&amp;quot;: &amp;quot;6808d9a622644330b6cd95f5&amp;quot;,
  &amp;quot;data&amp;quot;: &amp;quot;Some data&amp;quot;,
  &amp;quot;documentId&amp;quot;: &amp;quot;000000000000000000000000&amp;quot;,
  &amp;quot;versionId&amp;quot;:  &amp;quot;000000000000000000000000&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;model change&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;timestamp&amp;quot;: &amp;quot;2014-12-16T23:46:29.284-0500&amp;quot;,
  &amp;quot;event&amp;quot;: &amp;quot;onshape.model.lifecycle.changed&amp;quot;,
  &amp;quot;workspaceId&amp;quot;: &amp;quot;f925722bee1c43fc80fb5bb2&amp;quot;,
  &amp;quot;elementId&amp;quot;: &amp;quot;0f931a1ceba842299192823f&amp;quot;,
  &amp;quot;webhookId&amp;quot;: &amp;quot;544e91f7fb88ed44f5de1508&amp;quot;,
  &amp;quot;messageId&amp;quot;: &amp;quot;60f54ac1cbc04179a6642d9a&amp;quot;,
  &amp;quot;data&amp;quot;: &amp;quot;Some data&amp;quot;,
  &amp;quot;documentId&amp;quot;: &amp;quot;0f9c4392e5934f30b48ab645&amp;quot;,
  &amp;quot;versionId&amp;quot;:  &amp;quot;000000000000000000000000&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;document state change&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;timestamp&amp;quot;: &amp;quot;2014-12-16T23:46:29.284-0500&amp;quot;,
  &amp;quot;event&amp;quot;: &amp;quot;onshape.document.lifecycle.statechange&amp;quot;,
  &amp;quot;workspaceId&amp;quot;: &amp;quot;000000000000000000000000&amp;quot;,
  &amp;quot;elementId&amp;quot;: &amp;quot;000000000000000000000000&amp;quot;,
  &amp;quot;webhookId&amp;quot;: &amp;quot;544e91f7fb88ed44f5de1508&amp;quot;,
  &amp;quot;messageId&amp;quot;: &amp;quot;60f54ac1cbc04179a6642d9a&amp;quot;,
  &amp;quot;data&amp;quot;: &amp;quot;Some data&amp;quot;,
  &amp;quot;documentId&amp;quot;: &amp;quot;0f9c4392e5934f30b48ab645&amp;quot;,
  &amp;quot;versionId&amp;quot;:  &amp;quot;000000000000000000000000&amp;quot;,
  &amp;quot;documentState&amp;quot;: &amp;quot;TRASH&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Possible values of documentState are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;ACTIVE&amp;rdquo; - document is in a normal, usable state&lt;/li&gt;
&lt;li&gt;&amp;ldquo;TRASH&amp;rdquo; - document has been moved to the trash (User can move out of trash to ACTIVE state)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;DELETED&amp;rdquo; - document has been deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;user application settings change&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;timestamp&amp;quot;: &amp;quot;2014-12-16T23:46:29.284-0500&amp;quot;,
  &amp;quot;event&amp;quot;: &amp;quot;onshape.user.lifecycle.updateappsettings&amp;quot;,
  &amp;quot;workspaceId&amp;quot;: &amp;quot;f925722bee1c43fc80fb5bb2&amp;quot;,
  &amp;quot;elementId&amp;quot;: &amp;quot;0f931a1ceba842299192823f&amp;quot;,
  &amp;quot;webhookId&amp;quot;: &amp;quot;544e91f7fb88ed44f5de1508&amp;quot;,
  &amp;quot;messageId&amp;quot;: &amp;quot;60f54ac1cbc04179a6642d9a&amp;quot;,
  &amp;quot;data&amp;quot;: &amp;quot;Some data&amp;quot;,
  &amp;quot;userId&amp;quot;: &amp;quot;567953d60a1a5fbb95940333&amp;quot;,
  &amp;quot;clientId&amp;quot;:&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXZY234567ABCDEFG=&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;translation completion&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;timestamp&amp;quot;: &amp;quot;2014-12-16T23:46:29.284-0500&amp;quot;,
  &amp;quot;event&amp;quot;: &amp;quot;onshape.model.translation.complete&amp;quot;,
  &amp;quot;workspaceId&amp;quot;: &amp;quot;f925722bee1c43fc80fb5bb2&amp;quot;,
  &amp;quot;elementId&amp;quot;: &amp;quot;0f931a1ceba842299192823f&amp;quot;,
  &amp;quot;webhookId&amp;quot;: &amp;quot;544e91f7fb88ed44f5de1508&amp;quot;,
  &amp;quot;messageId&amp;quot;: &amp;quot;60f54ac1cbc04179a6642d9a&amp;quot;,
  &amp;quot;data&amp;quot;: &amp;quot;Some data&amp;quot;,
  &amp;quot;documentId&amp;quot;: &amp;quot;0f9c4392e5934f30b48ab645&amp;quot;,
  &amp;quot;userId&amp;quot;: &amp;quot;567953d60a1a5fbb95940333&amp;quot;,
  &amp;quot;translationRequestId&amp;quot;: &amp;quot;4f5de10f9c4392e5934f30b4&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
  </channel>
</rss>
