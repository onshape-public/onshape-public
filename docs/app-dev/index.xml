<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>App Development on</title><link>https://onshape-public.github.io/docs/app-dev/</link><description>Recent content in App Development on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 18 May 2020 20:44:05 -0400</lastBuildDate><atom:link href="https://onshape-public.github.io/docs/app-dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Extensions</title><link>https://onshape-public.github.io/docs/app-dev/extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/app-dev/extensions/</guid><description>This page provides information for some of the more common options for embedding a third-party application into the Onshape interface. Onshape provides many options for embedding commands in various menus, fly-out panels, and elements. In this example, you will embed a custom web page inside a documentâ€™s right side fly-out panel. This interface will receive information from Onshape and push information from the panel back to Onshape, providing a complete, bi-directional integration scenario.</description></item><item><title>Client Messaging</title><link>https://onshape-public.github.io/docs/app-dev/clientmessaging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/app-dev/clientmessaging/</guid><description>Application extensions and the Onshape JavaScript web client need to communicate directly, calling across the iframe containing the application extension using post message.
Onshape Client Messaging examples can be split into those that are initiated from the application extension and those that are initiated from the Onshape client.
Messages from the Extension These Client Messaging examples can be initiated from the application extension:
Click/close flyouts events: Notify the Onshape client that the user has clicked in the application extension, which should cause Onshape flyouts (versions, history, uploads, etc.</description></item><item><title>Structured Storage</title><link>https://onshape-public.github.io/docs/app-dev/structuredstorage/</link><pubDate>Mon, 18 May 2020 20:40:16 -0400</pubDate><guid>https://onshape-public.github.io/docs/app-dev/structuredstorage/</guid><description>Sub Elements Onshape provides application elements storage that is controlled by applications through the API. These elements allow a set of named sub-elements.
The application can make changes to sub-elements independently or in arbitrary groupings. Changes may be wholesale replacements, or may be deltas. When performing a delta update, the application may post a full version as well, which allows the api to return a smaller number of deltas for subsequent queries.</description></item><item><title>Webhooks</title><link>https://onshape-public.github.io/docs/app-dev/webhook/</link><pubDate>Mon, 18 May 2020 20:44:05 -0400</pubDate><guid>https://onshape-public.github.io/docs/app-dev/webhook/</guid><description>This page describes the Webhook APIs Onshape provides for working with notifications.
Notifications are delivered to an application as an HTTP POST with a JSON body, which includes information about the identity of the registration request and information specific to the event and notification message.
Webhooks are an alternative approach to polling; instead of your application continuously asking Onshape for new information, webhooks automatically send a notification from Onshape any time an event you are subscribed to occurs.</description></item></channel></rss>