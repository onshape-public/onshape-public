<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Onshape Developer Documentation – Reference</title><link>https://onshape-public.github.io/docs/7-reference/</link><description>Recent content in Reference on Onshape Developer Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 19 May 2023 10:30:00 -0400</lastBuildDate><atom:link href="https://onshape-public.github.io/docs/7-reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Onshape Architecture</title><link>https://onshape-public.github.io/docs/7-reference/architecture/</link><pubDate>Mon, 18 May 2020 20:42:57 -0400</pubDate><guid>https://onshape-public.github.io/docs/7-reference/architecture/</guid><description>
&lt;p>When you start a design in Onshape, you typically create a document. The document is the container that includes all the content related to a specific design. All data in an Onshape document is stored in Elements (represented as tabs in the user interface). See the &lt;a href="https://onshape-public.github.io/docs/introduction">Introduction&lt;/a> page for information on how documents, workspaces, and elements are assembled into a URL.&lt;/p>
&lt;p>Typically, Part Studios and Assemblies are two of the most common element types that a design requires. Throughout the design process, you may also find creating versions to be useful for product development management while working on the “Main” workspace. More details can be found here: &lt;a href="https://onshape-public.github.io/docs/5-advanced-api-development/associativity">Associativity&lt;/a>.&lt;/p>
&lt;h2 id="elements">Elements&lt;/h2>
&lt;p>All data in an Onshape document is stored in Elements (represented as tabs in the user interface). Onshape documents contain five kinds of elements:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Part Studio&lt;/strong>: Contains zero or more parts&lt;/li>
&lt;li>&lt;strong>Assembly&lt;/strong>: Contains zero or more parts or assemblies&lt;/li>
&lt;li>&lt;strong>Blob&lt;/strong> (Binary Large OBject): This can be data provided by a partner or by the end user. For example, the user can upload a PDF file, an image, or a text file. Partner applications can store arbitrary data, but we recommend using the structured storage available in an Application element for better integration.&lt;/li>
&lt;li>&lt;strong>Application&lt;/strong>: An element that presents an IFrame to the user. The user interface in the IFrame is managed by a server that can be provided by a third-party. Note that Onshape Drawings are a special case of an application element.&lt;/li>
&lt;li>&lt;strong>Feature Studio&lt;/strong>: This element contains the definition of Onshape Features, which are defined in FeatureScript.&lt;/li>
&lt;/ul>
&lt;h2 id="workspaces-versions-and-microversions">Workspaces, Versions, and Microversions&lt;/h2>
&lt;p>A document is stored in Onshape as a collection of changes.&lt;/p>
&lt;ul>
&lt;li>You can think of a &lt;strong>workspace&lt;/strong> as a branch of the document, similar to a branch in a source control system. Documents can be branched to create new workspaces.&lt;/li>
&lt;li>Each individual change to the document creates a new document &lt;strong>microversion&lt;/strong>. As the document is edited, changes are applied to the active workspace, creating new microversions.&lt;/li>
&lt;li>Periodically, the user may designate versions of the document. A &lt;strong>version&lt;/strong> is a named snapshot of the entire document at some point in time (that is, at some microversion).&lt;/li>
&lt;/ul>
&lt;p>You cannot change a version or microversion of a document; all changes are applied to a workspace (and create a new microversion). Thus, while in general the &lt;code>GET&lt;/code> methods of the API can read from a version, microversion, or workspace, the &lt;code>POST&lt;/code> methods generally require a workspace, and create a new microversion when data is written to the document. (An exception is that it is possible to set metadata within a version; this does not create a new microversion).&lt;/p>
&lt;p>The following IDs are used by many of the APIs. Each ID (except for Geometry IDs such as Part, Face and Edge) is a 24-character string that is used internally by Onshape to uniquely identify the resource. The Geometry IDs are variable-length strings used to resolve to a specific geometric entity within a model.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ID&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>User ID&lt;/strong>&lt;/td>
&lt;td>Identifies a single user.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Document ID&lt;/strong>&lt;/td>
&lt;td>The Document ID identifies a document. The logged-in user must be able to access the requested document for the API to succeed.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Workspace ID&lt;/strong>&lt;/td>
&lt;td>The Workspace ID identifies a workspace within the document. Workspaces are used to distinguish between different branches of the document.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Version ID&lt;/strong>&lt;/td>
&lt;td>The Version ID identifies a specific named version.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Microversion ID&lt;/strong>&lt;/td>
&lt;td>The Microversion ID identifies an internal revision of the document.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Element ID&lt;/strong>&lt;/td>
&lt;td>The Element ID identifies an element within the document.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Part ID &lt;/br> Face ID &lt;/br> Edge ID&lt;/strong>&lt;/td>
&lt;td>The Part ID identifies a part within a part studio. The Part ID should generally not be stored for long-term use, as it is only expected to be valid during the course of a session. Note that a Part ID may reference a part that no longer exists if the model is changed, so it is best to specify a Version or Microversion to pick the context for the Part ID. Note that even with the Version or Microversion, internal changes to the Onshape system may result in the Part ID changing. Therefore, Onshape provides mechanisms for maintaining persistent references. See the &lt;a href="https://onshape-public.github.io/docs/5-advanced-api-development/associativity">Associativity&lt;/a> page for more information. Face and Edge IDs are used in similar ways, and will be documented in further detail.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="linked-documents">Linked Documents&lt;/h2>
&lt;p>Although a document can contain a complex model tree involving many Part Studio and Assembly elements, it is often more efficient to split the content into multiple documents. Connections between the documents are always made from a document referring to a specific version of the target document. Once a version of a document is used as the target of a linked document, that document version will be preserved as long as any document references it, even if the containing document is deleted. Additionally, any user that has access to the referring document will have limited read access to the target document, regardless of what permissions are currently on the target document.&lt;/p>
&lt;h2 id="configurations">Configurations&lt;/h2>
&lt;p>Onshape Part Studios may be constructed to be configurable using Onshape Configurations. API calls that reference Part Studios (primarily within the Parts and Part Studios APIs) often accept a &lt;code>configuration&lt;/code> parameter that identifies what specific configuration of the Part Studios is being referenced. When not specified, the API implementation will typically use the configuration that is currently selected within the Part Studio, which means that an interactive ad-hoc API call will often behave as you expect, but might not behave consistently in an application, so be sure to specify the configuration parameter where applicable.&lt;/p>
&lt;h2 id="onshape-data-model">Onshape Data Model&lt;/h2>
&lt;p>Onshape data is stored in replicated databases in the cloud. The data model for accessing Parts and Assemblies through the REST API is described here. The model is influenced by the data model used by Git and similar source code repositories.&lt;/p>
&lt;p>Documents contain &lt;strong>elements&lt;/strong>. Elements are presented as tabs in the user interface. With some exceptions, all data in a document is stored within an element. The following table describes what data stored in each Element type:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Element Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Part Studio&lt;/strong>&lt;/td>
&lt;td>Each Part Studio contains exactly one Feature List. The feature list contains Features such as Sketches, Planes, Extrudes, etc. Each feature contains one or parameters. Whenever the feature list changes, the parametric history is evaluated, causing the model to be regenerated. This results in zero or more parts and surfaces to be created.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Assembly&lt;/strong>&lt;/td>
&lt;td>Each Assembly contains an Assembly Tree, which contains parts and/or other assemblies (sub-assemblies), along with mate information. Onshape provides an API call to retrieve the assembly tree definition.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Blob&lt;/strong>&lt;/td>
&lt;td>Each Blob element contains an uninterpreted binary object that has been uploaded to Onshape, typically from a file. Onshape depends on the browser client to display some blob data (PDF and image data), but does not interpret the data. A blob element can be updated with new data.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Application&lt;/strong>&lt;/td>
&lt;td>Each Application element contains zero or more sub-elements, providing a structured set of transactional data that is defined and managed by an application. A detailed description of the application storage data model is described elsewhere. Application data can be displayed in the Onshape tab in an iframe; the application is responsible for rendering the data in the iframe from their server.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Note that Onshape Drawing elements are Application elements tagged as managed by Onshape.&lt;/p>
&lt;p>Tessellated data is not stored persistently in Onshape; it is generated on demand for display by the Onshape clients, or in response to application REST API requests. This data may be cached for performance.&lt;/p>
&lt;p>The following table identifies Onshape concepts and the corresponding Git concepts. Note that this is not a direct mapping, and the implementation of the concepts is very different.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Onshape concept&lt;/th>
&lt;th>Git concept&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Document&lt;/td>
&lt;td>Repository&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Element&lt;/td>
&lt;td>File&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Workspace&lt;/td>
&lt;td>Branch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Version&lt;/td>
&lt;td>Tag&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Microversion&lt;/td>
&lt;td>Commit&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="document-data">Document Data&lt;/h3>
&lt;p>All elements, including Assemblies, Part Studios, Drawings, or even apps, are history based. Each change to an element or set of elements represents a unique record in the document’s history, known as a microversion. The document can be restored to that particular state any time in the future.&lt;/p>
&lt;h3 id="part-studio-data">Part Studio Data&lt;/h3>
&lt;p>The Part Studio element is defined by a list of features, some of which (e.g., a sketch), may have a complex internal structure composed of entities. Part Studio features and entities are referenced by unique persistent identifiers. Part Studio features and entities can appear, disappear, and reappear depending on the current microversion of the model.&lt;/p>
&lt;h3 id="assembly-data">Assembly Data&lt;/h3>
&lt;p>The Assembly element is defined as a list of assembly features and a tree of subassemblies/part instances. Occurrence ID is a unique persistent identifier of an occurrence of a part in the assembly structure.&lt;/p>
&lt;h3 id="external-application-data">External Application Data&lt;/h3>
&lt;p>An external application has complete control over how it manages/stores documents, however, to take advantage of the Onshape data model, there is a set of endpoints they should use to store state. These are collectively known as the AppElement API.&lt;/p>
&lt;h3 id="model-presentation-data">Model Presentation Data&lt;/h3>
&lt;p>A valid model definition usually corresponds to a real world manufacturable topology. The topology is represented internally as a set od Parts, Faces, Edges, and Vertices and a set of relations between them. It can be tessellated into a set of geometric primitives, which approximate the shape of the model. Tessellated data can be used for visual representation of the model or other processing related to the shape of the model.&lt;/p>
&lt;p>Model topology is represented as a set of Parts, Faces, Edges, and Vertices in the API. Each of these has a unique identifier in every state of the model. The identifier represents an encoded index in the model’s history journal and its value depends on the structure of the model’s history. The value is not guaranteed to be preserved across model changes, and will almost always change if the model changes in significant ways.&lt;/p>
&lt;p>The following changes in the topological representation can occur between two microversions of the model:&lt;/p>
&lt;ul>
&lt;li>New topological entities can appear&lt;/li>
&lt;li>Id of existing topology can change&lt;/li>
&lt;li>Topological entities can disappear&lt;/li>
&lt;li>Existing topological entities can be merged into a single entity&lt;/li>
&lt;li>Existing topological entity can be split into multiple entities&lt;/li>
&lt;/ul>
&lt;p>A pair of model microversion and Topology ID can be used to identify topological entities across the model changes. Topology ID defined in a specific microversion can be translated into a set of topology ids in the current microversion of the model. (The Topology ID is sometimes referred to as a Deterministic ID within Onshape, and is exposed in specific API calls as Part ID, Face ID, and so on). See the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio">PartStudio APIs&lt;/a> to see what topology IDs are exposed through the API.&lt;/p>
&lt;h2 id="application-interaction">Application Interaction&lt;/h2>
&lt;p>The primary APIs provided by Onshape are REST interfaces that are accessed over HTTPS. The client can be a web server or a desktop application (including command line tools such as curl). Onshape does not support use of the APIs directly from a browser client due to cross-domain scripting concerns.&lt;/p>
&lt;p>Partner applications typically interact with Onshape in three ways:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>File Exchange&lt;/strong>: Onshape provides extensive import and export translation capabilities to interact with applications that can read or write a variety of file formats.&lt;/li>
&lt;li>&lt;strong>Live Link Integration&lt;/strong>: Desktop or server applications can use REST calls to read information from the Onshape servers, and store information back. These applications can gain “cloud value” by using Onshape data management capabilities for sharing, versioning, and durability.&lt;/li>
&lt;li>&lt;strong>In-Tab Integration&lt;/strong>: Web server applications can create a tightly integrated experience within Onshape by using a combination of REST and client-side APIs to build a seamless interaction by interacting with users inside an Onshape tab.&lt;/li>
&lt;/ul>
&lt;p>The following diagram illustrates basic desktop integration and cloud integration architecture. The REST, WebHook and Client POST messages are documented in this and additional API documents.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/apioverviewimage00.png" alt="images">&lt;/p>
&lt;p>The Onshape Server Stack consists of a number of cooperating servers that provide the underlying support for the Onshape CAD experience. The Onshape servers are built with a variety of technologies, including Java and C++, database and message services, geometry and constraint management systems, and much more.&lt;/p>
&lt;p>Partner cloud applications can be written in any web framework. Onshape provides a set of samples in Github. Onshape is also planning to provide a library that simplifies desktop application development. The user interface code that runs in the Onshape browser client is written in Javascript.&lt;/p>
&lt;p>You may notice that this diagram does not illustrate the Onshape mobile clients for iOS and Android devices; the development of 3rd-party mobile applications for Onshape is beyond the scope of this page.&lt;/p></description></item><item><title>Docs: Testing Guidelines</title><link>https://onshape-public.github.io/docs/7-reference/testingguidelines/</link><pubDate>Mon, 18 May 2020 20:42:57 -0400</pubDate><guid>https://onshape-public.github.io/docs/7-reference/testingguidelines/</guid><description>
&lt;p>The purpose of this document is to help you get your application and App Store entry ready for QA testing.&lt;/p>
&lt;p>Application Release Workflow (ARW)&lt;/p>
&lt;p>Each application submitted to the Onshape App Store goes through a series of stage-gates.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Ok to deploy to Production (Beta testing) (limited visibility)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ok to make Public&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Application is Public&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The starting state is ‘Ok to deploy to limited visibility on Production’’. The end goal is ‘Application is Public on Production’. To advance to the next stage, your application must pass testing and your app store entry must pass review.&lt;/p>
&lt;p>Testing may be requested at any time.&lt;/p>
&lt;p>Testing is done on a first-come basis.&lt;/p>
&lt;p>When testing is complete (pass or fail), you go to the back of the queue.&lt;/p>
&lt;p>Testing protocol&lt;/p>
&lt;p>Testing of Partner Applications will be performed against the checklist in addendum A.&lt;/p>
&lt;p>Testing of Production App Store entries will be performed against the checklist in addendum B.&lt;/p>
&lt;p>The result of each test will be one of;&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Pass - no action needed and no notification will be issued&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An enhancement - these are suggestions that should you chose to implement them, we believe would make the application better.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A bug (low priority) - these are slight deviations from the criteria but have low end user impact and will not prevent the application being turned on for public access and there is no stipulated time-frame for their resolution&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A bug (medium priority) - these are material deviations from the criteria that are noticeable to the end-user and represent a minor problem requiring a work-around. A medium priority bug will not prevent the application from being turned on for public access, but should be fixed within 30 days.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A bug (high priority) - this is a significant deviation from the criteria and will prevent the application from being turned on for public access but will not prevent the application from being promoted from the partner stack.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A bug (MUST FIX) - this category usually represents a significant deviation from protocol or security violation. A MUST FIX will prevent an application on Production being turned on for public access and MAY, if the application is already public, cause it to be temporarily suspended from the app store.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Any test may be annotated with a ‘*’.&lt;/p>
&lt;p>This indicates that the test is a must-pass in order for the application or app store entry to be promoted. A failure of this test will generate a bug (MUST FIX).&lt;/p>
&lt;h2 id="actions-that-you-can-initiate-from-jira">Actions that you can initiate from JIRA&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Request application testing - This puts your application in the testing queue. We will note when testing has started (‘in progress’) and when concluded, the ticket will be closed. The outcome will include notes and links to any issues generated (‘tickets’). This phase may include as many iterations as needed to get your application ready. If necessary, the Application Release Workflow (ARW) will be updated.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Request public (general) authorization. We will note when testing has started (‘in progress’) and this request will trigger a review of your app store entry and any outstanding bugs. Note there is no implied testing of your application, simply a review of outstanding issues (tickets) and of the app store entry. Success at this stage will advance the Application Release Workflow (ARW) and you will now be able to request public (general) release.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Request public (general) release. This request states that you have coordinated with the Partner Application Manager (Joe Dunne) and the Onshape marketing department and general agreement has been reached that now is the time - Congratulations!&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="addendum-a---application-testing-criteria">Addendum A - Application Testing Criteria&lt;/h2>
&lt;ol>
&lt;li>Applied to all Applications&lt;/li>
&lt;li>Applies to Integrated Cloud Applications&lt;/li>
&lt;li>Applies to Connected Cloud Applications&lt;/li>
&lt;li>Applies to Connected Desktop Applications&lt;/li>
&lt;/ol>
&lt;p>x Denotes that this is a ‘must-pass’. A failure of this test results in a must-fix&lt;/p>
&lt;ul>
&lt;li>(1)x The application must use the Onshape OAUTH mechanism&lt;/li>
&lt;li>(1)x The OAUTH must be against the correct stack&lt;/li>
&lt;li>(2)(3)x To be promoted to the Production stack, and hosted service must be on a monitored production server with worldwide 24/7 availability.&lt;/li>
&lt;li>(2)(3) The application should not generate any avoidable console (browser) errors&lt;/li>
&lt;li>(1) The application should should provide one or more of the following options;
&lt;ul>
&lt;li>Login using the Onshape ID (account created silently on first use)&lt;/li>
&lt;li>Login with partner product account credentials&lt;/li>
&lt;li>Create a new partner account&lt;/li>
&lt;li>The user should not have to leave the registration workflow to complete a pre-requisite&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>(1) The application must be capable of managing/displaying documents in excess of 20 - suggested strategies include;
&lt;ul>
&lt;li>Use of a ‘Next’ button to load the next 20&lt;/li>
&lt;li>Infinite scroll (loading the next 20 if/when the scrollbar reaches the bottom of the dialog&lt;/li>
&lt;li>The application must display ‘reasonable’ performance when reading documents, workspaces, elements and parts. Consider at-scale than an account may have thousands of documents, many with multiple workspaces and each with multiple elements. Strategies may include any combination of;&lt;/li>
&lt;li>Displaying the most-recently-opened first&lt;/li>
&lt;li>Displaying a counter of documents/workspaces/elements read&lt;/li>
&lt;li>Progressive loading&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>(1) The application should correctly list valid documents when ‘per document app access’ is turned on.&lt;/li>
&lt;li>(1) The application should correctly handle selection of versions&lt;/li>
&lt;li>(1) The application should correctly handle selection of workspaces (branches)&lt;/li>
&lt;li>(1) The application should correctly handle/display elements that;
&lt;ul>
&lt;li>Are part studios that contain nothing&lt;/li>
&lt;li>Are assemblies that contain nothing&lt;/li>
&lt;li>Are part studios that contain only surfaces&lt;/li>
&lt;li>Are part studios that contain only ‘wire’ data (eg helices)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>(1) The application should appropriately handle revocation of a grant&lt;/li>
&lt;/ul>
&lt;h2 id="addendum-b---app-store-testing-criteria">Addendum B - App Store Testing Criteria&lt;/h2>
&lt;ol>
&lt;li>Applied to all Applications&lt;/li>
&lt;li>Applies to Integrated Cloud Applications&lt;/li>
&lt;li>Applies to Connected Cloud Applications&lt;/li>
&lt;li>Applies to Connected Desktop Applications&lt;/li>
&lt;li>Required for deployment to production&lt;/li>
&lt;li>Only where the application is using Onshape billing&lt;/li>
&lt;/ol>
&lt;p>x Denotes that this is a ‘must-pass’. A failure of this test results in a must-fix&lt;/p>
&lt;ul>
&lt;li>(1) The application should have a descriptive name&lt;/li>
&lt;li>(1) The application summary should be accurate&lt;/li>
&lt;li>(1)x The redirect URLS should be valid&lt;/li>
&lt;li>(2)x The iframe URL should be valid&lt;/li>
&lt;li>(1) The Grant (permissions) request should be no more than is needed&lt;/li>
&lt;li>(1) The Application Type should be correctly set&lt;/li>
&lt;li>(1) Team Visibility should be set&lt;/li>
&lt;li>(1) The Category should be appropriate&lt;/li>
&lt;li>(1) The application description should be accurate&lt;/li>
&lt;li>(1) The Sign-In URL should be valid&lt;/li>
&lt;li>(1) The pricing summary should be accurate. For instance, it cannot say ‘Free’ if this is a trial - it should say ‘Free for 30 days and then $30/month&lt;/li>
&lt;li>(1) Any pay-plans should have an accurate description&lt;/li>
&lt;li>(1) The support URL should point to a resource for help - this can be;
&lt;ul>
&lt;li>A support ticketing system (eg Zendesk)&lt;/li>
&lt;li>A page giving a telephone number&lt;/li>
&lt;li>A page giving an email address&lt;/li>
&lt;li>A forum&lt;/li>
&lt;li>It cannot be to an FAQ page (unless that page also contains one of the other options)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>(1)The EULA link should point to an English Language EULA&lt;/li>
&lt;/ul></description></item><item><title>Docs: Changelog</title><link>https://onshape-public.github.io/docs/7-reference/changelog/</link><pubDate>Fri, 19 May 2023 10:30:00 -0400</pubDate><guid>https://onshape-public.github.io/docs/7-reference/changelog/</guid><description>
&lt;h4 id="rel-1164---released-2023-05-19">&lt;code>rel-1.164&lt;/code> - released 2023-05-19&lt;/h4>
&lt;ul>
&lt;li>Support &lt;code>partId&lt;/code> array string for &lt;code>GET&lt;/code> : &lt;code>/api/partstudios/bodydetails&lt;/code> endpoint for the option of getting a subset of parts from a partstudio (empty = all parts)&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1163---released-2023-04-28">&lt;code>rel-1.163&lt;/code> - released 2023-04-28&lt;/h4>
&lt;ul>
&lt;li>Update documentation for the Documents endpoint (&lt;code>/api/documents&lt;/code>)&lt;/li>
&lt;li>Update Releasepackage endpoint &lt;code>GET&lt;/code> : &lt;code>/api/releasepackage&lt;/code> to include &lt;code>type&lt;/code> to understand action (ie. Approve vs Reject)&lt;/li>
&lt;li>Update API to V6 - Fix a bug in how updating the JSON tree of an app element in a transaction returns the diff&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1162---released-2023-04-12">&lt;code>rel-1.162&lt;/code> - released 2023-04-12&lt;/h4>
&lt;ul>
&lt;li>New Assembly modify endpoint &lt;code>POST&lt;/code> : &lt;code>/api/assemblies/d/{did}/w/{wid}/e/{eid}/modify&lt;/code> for bulk deletion and suppression of instances and features&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1161---released-2023-03-20">&lt;code>rel-1.161&lt;/code> - released 2023-03-20&lt;/h4>
&lt;ul>
&lt;li>New BOM templates endpoint (&lt;code>/api/tabletemplates&lt;/code>)&lt;/li>
&lt;li>Support POST &lt;code>/api/webhooks&lt;/code> parameter &lt;code>isTransient = true&lt;/code> to specify auto cleanup after a set number of days&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1160---released-2023-02-24">&lt;code>rel-1.160&lt;/code> - released 2023-02-24&lt;/h4>
&lt;ul>
&lt;li>Support configuratons for &lt;code>GET&lt;/code> : &lt;code>/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features&lt;/code>&lt;/li>
&lt;li>Remove deprecated &lt;code>GET&lt;/code> : &lt;code>/api/elements/:emid&lt;/code>&lt;/li>
&lt;li>Remove deprecated &lt;code>GET&lt;/code> and &lt;code>POST&lt;/code> : &lt;code>/api/elements/d/:did/[wvm]/:wvmid/e/:eid/metadata&lt;/code>&lt;/li>
&lt;li>Deprecated &lt;code>GET&lt;/code> and &lt;code>POST&lt;/code> : &lt;code>/api/parts/standardcontent/d/:did/v/:vid/e/:eid/[cu]/:cuid/partid/:pid/metadata&lt;/code>&lt;/li>
&lt;li>Deprecated &lt;code>GET&lt;/code> and &lt;code>POST&lt;/code> : &lt;code>/api/parts/d/:did/[wvm]/:wmvid/e/:eid/partid/:pid/metadata&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1158---released-2023-01-11">&lt;code>rel-1.158&lt;/code> - released 2023-01-11&lt;/h4>
&lt;ul>
&lt;li>New example values in Glassworks API documentation&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1155---released-2022-11-01">&lt;code>rel-1.155&lt;/code> - released 2022-11-01&lt;/h4>
&lt;ul>
&lt;li>Support Parasolid binary (x_b) exports&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1154---released-2022-10-10">&lt;code>rel-1.154&lt;/code> - released 2022-10-10&lt;/h4>
&lt;ul>
&lt;li>Add face color, hidden state and type of composite to body details endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1152---released-2022-08-30">&lt;code>rel-1.152&lt;/code> - released 2022-08-30&lt;/h4>
&lt;ul>
&lt;li>Support more parameters to filter the partstudio endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1147---released-2022-05-16">&lt;code>rel-1.147&lt;/code> - released 2022-05-16&lt;/h4>
&lt;ul>
&lt;li>Support global tree node endpoint for impacting recently opened filter&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1146---released-2022-04-25">&lt;code>rel-1.146&lt;/code> - released 2022-04-25&lt;/h4>
&lt;ul>
&lt;li>Support API versioning&lt;/li>
&lt;li>Return ‘nodeId’ when adding or updating an AppElement&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1145---released-2022-04-05">&lt;code>rel-1.145&lt;/code> - released 2022-04-05&lt;/h4>
&lt;ul>
&lt;li>Fixed issue where assembly feature errors were missing&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1140---released-2021-12-15">&lt;code>rel-1.140&lt;/code> - released 2021-12-15&lt;/h4>
&lt;ul>
&lt;li>Add mass properties for assemblies&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1139---released-2021-11-15">&lt;code>rel-1.139&lt;/code> - released 2021-11-15&lt;/h4>
&lt;ul>
&lt;li>Relax casing search in Glassworks (Swagger client)&lt;/li>
&lt;li>BOM and Metadata API endpoint responses now matched&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1138---released-2021-10-25">&lt;code>rel-1.138&lt;/code> - released 2021-10-25&lt;/h4>
&lt;ul>
&lt;li>Updated webhook documentation&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1135---released-2021-8-20">&lt;code>rel-1.135&lt;/code> - released 2021-8-20&lt;/h4>
&lt;ul>
&lt;li>Webhook events for Enterprise SSO configuration changes&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1134---released-2021-07-30">&lt;code>rel-1.134&lt;/code> - released 2021-07-30&lt;/h4>
&lt;ul>
&lt;li>Support comment events (add, update, delete) for the web-hook endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1131---released-2021-06-01">&lt;code>rel-1.131&lt;/code> - released 2021-06-01&lt;/h4>
&lt;ul>
&lt;li>Add synchronous glTF/gLB endpoint for assemblies&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1128---released-2021-03-29">&lt;code>rel-1.128&lt;/code> - released 2021-03-29&lt;/h4>
&lt;ul>
&lt;li>Support face color for export of glTF/gLB&lt;/li>
&lt;li>Add document API endpoint for comments&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1127---released-2021-03-08">&lt;code>rel-1.127&lt;/code> - released 2021-03-08&lt;/h4>
&lt;ul>
&lt;li>Add translation option dtkPeriodicFacesPolicy=3 for CATIA parts&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1126---released-2021-02-12">&lt;code>rel-1.126&lt;/code> - released 2021-02-12&lt;/h4>
&lt;ul>
&lt;li>Add GLTF and GLB accepts option to the tessellation APIs&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1125---released-2021-01-25">&lt;code>rel-1.125&lt;/code> - released 2021-01-25&lt;/h4>
&lt;ul>
&lt;li>Add ‘good/better/best’ quality query parameters to tessellation endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1122---released-2020-11-18">&lt;code>rel-1.122&lt;/code> - released 2020-11-18&lt;/h4>
&lt;ul>
&lt;li>Enforce OAuth endpoint rate limiting&lt;/li>
&lt;li>Add release package action/transition based webhooks&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1119---released-2020-09-15">&lt;code>rel-1.119&lt;/code> - released 2020-09-15&lt;/h4>
&lt;ul>
&lt;li>Add rollback bar to EvalFeatureScript endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1118---released-2020-08-25">&lt;code>rel-1.118&lt;/code> - released 2020-08-25&lt;/h4>
&lt;ul>
&lt;li>PartStudio GET support for sketch constraints in features endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1116---released-2020-07-15">&lt;code>rel-1.116&lt;/code> - released 2020-07-15&lt;/h4>
&lt;ul>
&lt;li>Specify starting elements to create document endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1114---released-2020-06-03">&lt;code>rel-1.114&lt;/code> - released 2020-06-03&lt;/h4>
&lt;ul>
&lt;li>Project endpoints&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1113---released-2020-05-11">&lt;code>rel-1.113&lt;/code> - released 2020-05-11&lt;/h4>
&lt;ul>
&lt;li>Output GLTF files for an element (tab)&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1111---released-2020-03-31">&lt;code>rel-1.111&lt;/code> - released 2020-03-31&lt;/h4>
&lt;ul>
&lt;li>Support ownership transfer for teams&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1110---released-2020-03-09">&lt;code>rel-1.110&lt;/code> - released 2020-03-09&lt;/h4>
&lt;ul>
&lt;li>Add support for exploded views&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1108---released-2020-01-29">&lt;code>rel-1.108&lt;/code> - released 2020-01-29&lt;/h4>
&lt;ul>
&lt;li>Drawings endpoints for create 4 view, get view geometry and view definition&lt;/li>
&lt;/ul>
&lt;h4 id="rel-1102---released-2019-09-11">&lt;code>rel-1.102&lt;/code> - released 2019-09-11&lt;/h4>
&lt;ul>
&lt;li>Added webhook events for release management&lt;/li>
&lt;li>Added webhook event for document version creation&lt;/li>
&lt;/ul>
&lt;h4 id="rel-199---released-2019-07-08">&lt;code>rel-1.99&lt;/code> - released 2019-07-08&lt;/h4>
&lt;ul>
&lt;li>Assembly BOM API support for items&lt;/li>
&lt;/ul>
&lt;h4 id="rel-196---released-2019-05-03">&lt;code>rel-1.96&lt;/code> - released 2019-05-03&lt;/h4>
&lt;ul>
&lt;li>Part Studio compare endpoint&lt;/li>
&lt;/ul>
&lt;h4 id="rel-193---released-2019-03-01">&lt;code>rel-1.93&lt;/code> - released 2019-03-01&lt;/h4>
&lt;ul>
&lt;li>Webhook subscriptions for a company&lt;/li>
&lt;/ul>
&lt;h4 id="rel-186---released-2018-09-28">&lt;code>rel-1.86&lt;/code> - released 2018-09-28&lt;/h4>
&lt;ul>
&lt;li>Export Drawings to DXF, DWG and PDF&lt;/li>
&lt;/ul></description></item></channel></rss>