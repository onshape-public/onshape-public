<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Onshape Developer Documentation – App Development</title><link>https://onshape-public.github.io/docs/6-app-development/</link><description>Recent content in App Development on Onshape Developer Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 18 May 2020 20:44:05 -0400</lastBuildDate><atom:link href="https://onshape-public.github.io/docs/6-app-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Why Onshape?</title><link>https://onshape-public.github.io/docs/6-app-development/whyonshape/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/6-app-development/whyonshape/</guid><description>
&lt;h2 id="why-onshape">Why Onshape?&lt;/h2>
&lt;p>As long as there have been applications managing organizational data
into a database, there has been a need to share that data between
different departments and therefore, usually, different systems. In a
typical design/manufacturing organization there could be at least four
or five mission critical databases that manage the data for different
departments and for different stages in the product’s lifecycle.&lt;/p>
&lt;p>Initially these systems provide the capabilities required by their
consumers, i.e., the departments that use these systems. For instance,
finance will use a finance system such as Quick books. Manufacturing
might use a manufacturing planning and execution system (MES).
Engineering, a Product Data management System (PDM) and so on for each
group in the organization.&lt;/p>
&lt;p>What this leads to is disparate silos of data and therefore knowledge.
The departments in an organization do not work in a vacuum – each is
dependent on information that is generated by other groups. For
instance, Manufacturing can’t produce correct assembly instructions
without input from engineering in the way of the designs and the bill of
materials. Finance can’t cost the product without understanding its
contents or understanding which parts are manufactured in-house or
purchased.&lt;/p>
&lt;p>Therefore, the need to integrate these systems becomes critical for the
organization to function optimally. Initially, connecting one system to
another can be a straightforward process. Obviously is usually involves
some services to get the systems to talk to each other, however it
shouldn’t be too painful as long as the requirements are clearly
defined.&lt;/p>
&lt;p>Anyone who has implemented integrations between PLM systems (Product
Lifecycle Management) or ERP (Enterprise Resource Planning) will tell
you of the nightmare scenarios that they encountered. Often this is the
result of poorly scoped and defined requirements, conflicting
requirements coming from multiple departments and the many integration
points required between systems. The result is that the organization is
not getting what it wanted or needs, the customer is paying for services
that do not provide the promised solution and usually the project is
long overdue. All this equals an unhappy customer and often the software
vendor’s solutions are blamed for the disaster.&lt;/p>
&lt;p>Over the years many technologies have appeared and some of them, just as
quickly disappeared to help with enabling integration without the need
to write thousands of lines of custom code that needs to be re-written
every time there’s a software upgrade. Lately there have been several
new technologies that provide “codeless” integration between SaaS
products – an example of this is Zapier (zapier.com). These solutions
are particularly good for generic use cases for data exchange between
systems but can be limited when it comes to custom modifications to the
data being sent that might be required by a specific customer. In
addition, they have the overhead of requiring a subscription to their
service. An additional concern that I have heard is regarding sending
corporate IP through another third party and data security.&lt;/p>
&lt;p>Therefore, we can understand that in most organizations integration
between systems is a necessary evil that must be tackled – either with
an Out-Of-The-Box solution or through some custom coding.&lt;/p>
&lt;p>Early on, Onshape understood that as an engineering system, it cannot
exist in a vacuum – it must be able to communicate with other systems.
For this reason, the REST API was developed.&lt;/p>
&lt;p>An API, or &lt;em>application
programming interface&lt;/em>, is a set of rules that define how applications
or devices can connect to and communicate with each other. A REST API is
an API that conforms to the design principles of the REST,
or &lt;em>representational state transfer &lt;em>architectural style. For this
reason, REST APIs are sometimes referred to RESTful APIs&lt;/em>.&lt;/em>&lt;/p>
&lt;h2 id="onshape-saas">Onshape SaaS&lt;/h2>
&lt;p>Onshape was built from the ground up as a true SaaS-based system; Onshape had no investment in legacy code and was able to develop an application that truly runs as a multi-tenant
SaaS solution from the first line of code. Many companies claim to run
cloud-based solutions, but since they have such a large investment
in their legacy code, that they can’t just discard and start again from
scratch. Instead, they tend to try and port that code to the web.&lt;/p>
&lt;p>More often than not, porting existing code to the web and calling it a
SaaS solution is no more than a marketing ploy; it isn’t a true SaaS
solution if it wasn’t written as one. These are generally known as cloud-hosted solutions. This means that a typical three-tier data management
solution (which could have previously been installed on a set of servers),
has now been modified to be hosted on the web.&lt;/p>
&lt;h3 id="traditional-three-tier-architecture">Traditional Three-Tier Architecture&lt;/h3>
&lt;p>Traditional PLM systems typically use a three-tier architecture, mainly
consisting of an application server, a database server, and a client (either a web client or a thick client installed on the client
hardware).&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage10.png"
style="width:4.91807in;height:3.27083in"
alt="The 3-tier architecture | Download Scientific Diagram" />&lt;/p>
&lt;p>&lt;em>Typical three-tier architecture&lt;/em>&lt;/p>
&lt;p>To connect to this architecture and integrate with it, APIs are usually exposed on
the application/Web server. Here, we can already see that if this
architecture is ported to the web, it would not be possible to make
customizations through the API, since you would be modifying the behavior of
the program for everyone connected to that application server.&lt;/p>
&lt;h3 id="single--vs-multiple-tenant-architectures">Single- vs Multiple-Tenant Architectures&lt;/h3>
&lt;p>The architecture discussed above is typical of most
PLM solutions on the market today. It is fine
when you want the solution installed on company servers and only
accessible to people within the company.&lt;/p>
&lt;p>When this type of solution is ported to the web, software
vendors typically must create a single-tenant application where an
application server and a database server are provisioned for each new
customer.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage11.png"
style="width:5.4311in;height:4.35417in"
alt="Enterprise SaaS Architecture - The Why | Frontegg" />&lt;/p>
&lt;p>&lt;em>Single-tenant architecture&lt;/em>&lt;/p>
&lt;p>In this case, the vendor must use expensive
hardware to host more customers, which is not a
sustainable model.&lt;/p>
&lt;p>Modern 21&lt;sup>st&lt;/sup> century software solutions use multi-tenant
solutions that can be hosted on services such as Amazon cloud, Azure, etc. There are many benefits to this architecture, including that servers can be provisioned and
decommissioned on the fly to provide ultimate performance whenever
required. Since servers cost money, decommissioning servers when they
are not required is a key benefit to a true SaaS solution.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage12.png" style="width:6.5in;height:4.65417in"
alt="Saas Solutions - Multi-tenant vs multi-instance architectures" />&lt;/p>
&lt;p>&lt;em>Multi-tenant
architecture&lt;/em>&lt;/p>
&lt;p>Since each application is separate in this architecture, we can enable customizations that can’t be implemented in a single-tenant architecture. For example, we can provide access to the REST
APIs that are required for Onshape integration. In the single-tenant
architecture, if you provide API access to the application server, one
customer will be modifying that application for all customers who are
registered on that tenant.&lt;/p>
&lt;h2 id="the-onshape-difference">The Onshape Difference&lt;/h2>
&lt;p>Onshape does not work like other legacy CAD systems. Onshape was built from scratch for the cloud and as a modern
CAD system, so many of the failings of legacy CAD
systems were excluded.&lt;/p>
&lt;p>There are many differences
and benefits to Onshape, which are well-documented in the Onshape Help
and training materials.&lt;/p>
&lt;p>The information in this section is specific to integrations, since Onshape does not behave like a traditional file-based
systems. When writing an integration for Onshape, it is
critical to understand the nuances in Onshape’s design practices and how
data is organized in Onshape.&lt;/p>
&lt;h3 id="data-driven--no-files">Data Driven – No Files&lt;/h3>
&lt;p>Most traditional PDM/PLM systems that are integrated with CAD systems
enable this integration on a per-file basis. This means that you have an
object in the PDM/PLM system that corresponds directly to a file in the
CAD system. In this way, the PDM/PLM system can manage access to the
files, build assemblies from the files, view the CAD data, and much more.&lt;/p>
&lt;p>Onshape does not work this way.&lt;/p>
&lt;p>Being data-driven means that Onshape has no files, just data, so an integration into Onshape is going to look
different from any integration to a CAD system that you might have done
previously.&lt;/p>
&lt;p>In traditional CAD, a single file represents a snapshot of what the
design looked like at a specific moment in time. Unless it’s changed, it will remain in that state forever. PDM
systems manage these files, and once a designer decides to make a
revision or a release, the file is locked, and a new file can be created
to represent any further updated versions or releases of the design.
PDM/PLM systems are very good at managing this data in an up-to-date
structure, but it does have the drawbacks. They generate many file
copies of a specific design, and once a file is taken out from the system (for instance, to share with a supplier), it is no longer managed and
tracked.&lt;/p>
&lt;p>Onshape uses data instead of files. The data is always up-to-date and
can be collaborated on in real-time without the need to send file copies
back and forth. This means that Onshape views versions and releases differently
than those traditional systems do. When integrating with Onshape, we must design for data rather than files.&lt;/p>
&lt;p>Files can be generated from
the Onshape data. For example, generating a PDF of a
drawing upon release or of a STEP file that can be used by other downstrea systems.&lt;/p>
&lt;p>A key benefit of a data-driven system is the ability to retrieve detailed, real-time
analytics. Onshape has comprehensive analytics; including who can view or edit a design, when and exactly what edits are made, which commands were used, and how long was spent modifying the design.&lt;/p>
&lt;h3 id="built-in-pdm">Built-In PDM&lt;/h3>
&lt;p>Up until now, CAD was one software program, and PDM/PLM was another
program that had to be integrated with the CAD. In many cases, both
programs could be sold by the same software vendor (even though there
are many PLM systems available that are sold by independent vendors who
have no CAD system). Regardless, a PDM/PLM system always had to be an added solution to the CAD system.&lt;/p>
&lt;p>No matter how deep the integration between a CAD system and a PLM
system, there is always the need to sync data between the two. This is usually a weak point in any solution that is prone to errors.&lt;/p>
&lt;p>Being data-driven, Onshape already has PDM built in as part of the CAD
system. This is unique in the industry: CAD and PDM as part
of the same solution with no additional piece of software required.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage14.png"
style="width:4.49202in;height:4.1652in"
alt="A picture containing graphical user interface Description automatically generated" />&lt;/p>
&lt;p>&lt;em>Onshape’s
revision and part number schema definition interface&lt;/em>&lt;/p>
&lt;p>For instance:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Since the data is always up-to-date, the correct state of any design
is always represented in real-time with no delay for syncing between
systems.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The data is never locked like with file-based systems; it
is always available and always changing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The data management aspects of CAD that were generally associated
with the PDM system are now fully integrated into every aspect of
the CAD system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>True real-time collaboration/co-design on both design and data is
enabled.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So, what does this mean when it comes to integrating Onshape with
another PLM system? First and foremost, we must understand that there
are many things that a PLM system does that Onshape’s PDM capabilities
can’t do. Integrating Onshape to a PLM system should augment the
powerful capabilities already available inside Onshape, not
necessarily replace them. Likewise, Onshape does not replace PLM-native capabilities. Instead, depending on the business case, we can use the best-in-class capabilities of each system to augment the
other.&lt;/p>
&lt;p>An example of augmenting capabilities of each system could be the
release process. Onshape has a specific way of managing the release of data that is
different from traditional PDM systems. This capability is inherently
suited to a data-driven approach and provides a lot of value to the
update of design data in Onshape. At the same time, PLM systems provide
enterprise release processes that may include many people and different
departments that extend beyond the engineering domain. Such PLM
processes can be highly customized and suited to the organizations
established business processes.&lt;/p>
&lt;p>In this scenario it makes no sense to not use the enterprise release
processes in the PLM system. However also not using Onshape’s release
capabilities could put data between Onshape and the PLM system out of
sync and prevent Onshape from updating data, such as watermarks and
title blocks on drawings, icons related the visualizing the state of
data, and more.&lt;/p>
&lt;p>In this case we want to use the best-in-class features of each software
solution without compromising on capability provided by each solution.
If we plan our integration correctly, this can be achieved by initiating
the release of the data in Onshape, transferring the release data to the
PLM system where the release process will be triggered and finally
automating the release in Onshape once the process has been completed in
the PLM system.&lt;/p>
&lt;p>This specific integrated
release scenario is detailed in this guide in the following sections. It
is a common requirement of larger enterprises that are making extensive
use of PLM systems and a scenario that is supported by Onshape’s REST
APIs.&lt;/p>
&lt;h3 id="multi-part-part-studios">Multi-Part Part Studios&lt;/h3>
&lt;p>In traditional CAD systems, there is the understanding that one file equals
one part. While design in context is available in most CAD systems and
multiple solid bodies can be created, it does not change the fact that
each part is self-contained in a separate file. For PLM systems, this
makes it easy to associate an object in the PDM/PLM database with a
specific CAD file.&lt;/p>
&lt;p>This is not the case in Onshape.&lt;/p>
&lt;p>In Onshape, parts are designed in what’s called a “Part Studio.” Within
a Part Studio, the designer is free to create as many parts as they want.
The general rule is that the parts should be related to each other in a
system, thereby making it easier to design one part from another, however
there is a lot of flexibility in how the designer wishes to work.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage15.png"
style="width:4.45764in;height:4.12141in"
alt="A picture containing text Description automatically generated" />&lt;/p>
&lt;p>&lt;em>An example of
a multi-part Part Studio in Onshape&lt;/em>&lt;/p>
&lt;p>The structure of the Onshape
document is discussed in detail in the &lt;a href="https://onshape-public.github.io/docs/7-reference/architecture">Onshape Architecture&lt;/a> page. The Part
Studio is included in an Onshape document.&lt;/p>
&lt;p>We can already begin to understand that the traditional CAD/PDM paradigm
of one file per object is not going to work with Onshape. If this
methodology were to be implemented, the designer would be forced by the
PDM/PLM system to only create one part per Part Studio. This would
therefore limit the designer’s freedom for creativity in Onshape and
seriously reduce the powerful functionality available for the designer
to use.&lt;/p>
&lt;p>Therefore, we need to re-think how we integrate with Onshape vs how we
integrate with traditional CAD systems. Fortunately, Onshape’s REST API
supports the multi-part Part Studio scenario. Instead of associating a
file with an object in the PDM/PLM database, we now use the REST API to
associate a Part with its corresponding object.&lt;/p>
&lt;h3 id="versions-and-releases">Versions and Releases&lt;/h3>
&lt;p>Traditional PDM/PLM systems provide design release support by locking a
CAD file for access. The access controls are defined in the database and
the definition of a Part/Assembly/Drawing as released is controlled by
the database. When a new revision of the part is required, a file copy
is made, and the database provides access to the new copy. Generally,
the old copy representing the previous release persists in the file
store and can be referenced by the database.&lt;/p>
&lt;p>This is not how Onshape works.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage16.png"
style="width:2.66865in;height:3.09375in" />Since there are no files in
Onshape – just data – there is no file locking and copy mechanisms
available. Instead Onshape looks at the data as a continuous timeline
that is always moving forward and always changing as the design evolves.
The data is never locked, it is always available.&lt;/p>
&lt;p>In place of file copies representing versions and releases of the
design, Onshape provides the ability to create versions as “bookmarks”
in the timeline. When creating a version, Onshape places a bookmark in
the timeline that represents the state of the design at that specific
moment in time. Releases work in a similar way, however they are defined
as official company approved processes and have special meaning whereas
versions are personal bookmarks that save the state of the design at a
specific moment in time. Still, as far as Onshape is concerned, they are
points in the timeline that represent a release or a version.&lt;/p>
&lt;p>In addition to creating versions and releases Onshape has the capability
to create branches. These could be defined as alternative timelines. A
designer might want to experiment with alternate design ideas without
modifying the existing design that other people might be working on. By
creating a branch from any point in the timeline, the designer is now
free to experiment with alternate ideas. If the ideas work, they can be
merged into the current timeline at any point.&lt;/p>
&lt;p>Obviously from an integration perspective we need to take into
consideration how Onshape works with versions and releases. As
mentioned, Onshape understands that a release represents a company
approved design and it therefore provides processes for the approval of
a release and the change of state of a design. Onshape also provides
APIs and triggers (events) that enable integration points throughout the
release process. It is through the triggers and the APIs that
integration of any third-party system that wishes to manage the release
process is enabled.&lt;/p>
&lt;p>This scenario and the
methodologies around the integration of release processes is discussed
in depth in the last section of this book.&lt;/p>
&lt;h3 id="workflows">Workflows&lt;/h3>
&lt;p>Release and obsoletion workflows are included with Onshape – these
processes can be customized to meet company standards. While this
section of the book doesn’t go into any depth on the topic of
customizing workflows, it is important to understand how Onshape’s
workflows work and provide integration points.&lt;/p>
&lt;p>For details on how to implement and customize Onshape’s workflows,
please review these online help topics:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://cad.onshape.com/help/Content/relmgmt_custom.htm?tocpath=Enterprise%7CGetting%20Started%20as%20an%20Enterprise%20Administrator%7C_____8">How to design release management processes&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cad.onshape.com/help/Content/custom_workflow.htm?tocpath=Enterprise%7CGetting%20Started%20as%20an%20Enterprise%20Administrator%7C_____7">How to create a customized release workflow&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Most PDM and PLM systems have the capabilities to model a company’s
business processes in a workflow. These can be highly automated
processes that move data and file references through a process of
reviews and approvals. Onshape also has this capability which is
currently used for release and obsoletion processes.&lt;/p>
&lt;p>However, in Onshape there are no files or file references that are moved
through the process. Onshape only has data. Therefore, it is the data
that is referenced at each stage of the process. Traditional PDM systems
might make file copies and lock files as they move through a release
process – for instance. If the process is rejected at any stage, those
files must be discarded, the previous version of the files unlocked and
all states updated – in short, rewind back to the state of the files and
the data when the workflow was initiated. This is a lot of complex
actions that need to occur when a process is rejected for any reason.&lt;/p>
&lt;p>Onshape doesn’t work this way.&lt;/p>
&lt;p>A release process can be started on data – such as assemblies, parts,
drawings, etc. The state of those referenced parts are updated to
“Pending” for instance. If the process is rejected at any stage, there
is no rewinding of files and data – the data just reverts to the
original “In Progress” state and the workflow is discarded. Since the
workflow didn’t complete – nothing related to the data has actually
changed. When you are used to traditional PDM systems, this feels like
an anti-climax and we often receive the question, “But where’s my
process? Where’s the data that was attached to the process?”. Well, the
answer is – nothing changed – until the process is completed, nothing
actually changes so the data is in the same state it was prior to the
initialization of the release process.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/integrationguideimage17.png"
style="width:3.39863in;height:2.61034in"
alt="A picture containing chart Description automatically generated" />&lt;/p>
&lt;p>&lt;em>A custom release process in Onshape&lt;/em>&lt;/p></description></item><item><title>Docs: Onshape App Store</title><link>https://onshape-public.github.io/docs/6-app-development/appstore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/6-app-development/appstore/</guid><description>
&lt;h2 id="onshape-appstore">Onshape Appstore&lt;/h2>
&lt;p>Onshape will make applications available through the Onshape Appstore. The Appstore will be actively promoted to users, making it easy for users to find, purchase and use third party applications. Click &lt;a href="https://appstore.onshape.com" target="_blank">&lt;a href="https://appstore.onshape.com">https://appstore.onshape.com&lt;/a>&lt;/a> to view the Onshape Appstore.&lt;/p>
&lt;h2 id="the-lifecycle-of-an-application">The Lifecycle of an Application&lt;/h2>
&lt;p>Onshape expects that typical applications will follow this timeline:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Phase&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Description&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Initial development&lt;/td>
&lt;td>Development will take place on Onshape&amp;rsquo;s Production stack - &lt;a href="https://cad.onshape.com">https://cad.onshape.com&lt;/a> your application is initially only visible to yourself and members of teams that you create an specify in the developer portal.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alpha testing&lt;/td>
&lt;td>When an application is ready for early named-user testing, Onshape may be able to provide user accounts for named test users, or you can add your own users to the Visibility team for your application.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Beta testing&lt;/td>
&lt;td>Once an application is ready for broader testing increase the number of users in the visiblity team. Additionally Onshape will work with you to complete the ready for release checklist.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Release&lt;/td>
&lt;td>Released applications will be promoted to public visibility on the Appstore (if appropriate) and become available for general use.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="how-your-program-interacts-with-onshape">How Your Program Interacts with Onshape&lt;/h2>
&lt;p>The primary APIs provided by Onshape are REST interfaces that are accessed over HTTPS. The client can be a web server or a desktop application (including command line tools such as curl). Onshape does not support use of the APIs directly from a browser client due to cross-domain scripting concerns.&lt;/p>
&lt;p>We anticipate that partner applications will interact with Onshape in three ways:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>File Exchange.&lt;/strong>
Onshape provides extensive import and export translation capabilities to interact with applications that can read or write a variety of file formats.&lt;/li>
&lt;li>&lt;strong>Live Link Integration.&lt;/strong>
Desktop or server applications can use REST calls to read information from the Onshape servers, and store information back. These applications can gain &amp;ldquo;cloud value&amp;rdquo; by using Onshape data management capabilities for sharing, versioning and durability.&lt;/li>
&lt;li>&lt;strong>In-Tab Integration.&lt;/strong>
Web server applications can create a tightly integrated experience within Onshape by using a combination of REST and client-side APIs to build a seamless interaction by interacting with users inside an Onshape tab.&lt;/li>
&lt;/ol>
&lt;p>The following diagram illustrates basic desktop integration and cloud integration architecture. The REST, WebHook and Client POST messages are documented in this and additional API documents.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/apioverviewimage00.png" alt="image">&lt;/p>
&lt;p>The Onshape Server Stack consists of a number of cooperating servers that provide the underlying support for the Onshape CAD experience. The Onshape servers are built with a variety of technologies, including Java and C++, database and message services, geometry and constraint management systems, and much more.&lt;/p>
&lt;p>Partner cloud applications can be written in any web framework. Onshape provides a set of samples in Github. Onshape is also planning to provide a library that simplifies desktop application development.&lt;/p>
&lt;p>The user interface code that runs in the Onshape browser client is written in Javascript.&lt;/p>
&lt;p>You may notice that this diagram does not illustrate the Onshape mobile clients for iOS and Android devices; the development of 3rd-party mobile applications for Onshape is beyond the scope of this document.&lt;/p>
&lt;h2 id="linked-documents">Linked Documents&lt;/h2>
&lt;p>Although a document can contain a complex model tree involving many Part Studio and Assembly elements, it is often more efficient to split the content into multiple documents. Connections between the documents are always made from a document referring to a specific version of the target document. Once a version of a document is used as the target of a linked document, that document version will be preserved as long as any document references it, event in the containing document is deleted. In addition, any user that has access to the referring document will have limited read access to the target document, regardless of what permission grants are currently on the target document.&lt;/p>
&lt;h2 id="configurations">Configurations&lt;/h2>
&lt;p>Onshape Part Studios may be contructed to be configurable using Onshape Configurations. API calls that
reference Part Studios (primarily within the Parts and Part Studios APIs) often accept a &amp;ldquo;configuration&amp;rdquo;
parameter that identifies what specific configuraton of the Part Studios is being referenced. When not
specified, the API implementation will typically use the configuration that is currently selected within
the Part Studio, which means that an interactive ad-hoc API call will often behave as you expect, but might
not behave consistently in an application, so be sure to specify the configuration parameter where
applicable.&lt;/p>
&lt;h2 id="ui-integration-for-applications">UI Integration for Applications&lt;/h2>
&lt;h3 id="development-and-testing">Development and testing&lt;/h3>
&lt;p>Developers can create applications using the Developer Portal at &lt;a href="https://dev-portal.onshape.com" target="_blank">&lt;a href="https://dev-portal.onshape.com">https://dev-portal.onshape.com&lt;/a>&lt;/a>.&lt;/p>
&lt;p>When your application is instantiated in a document, it will be called with a URL similar to the following:&lt;/p>
&lt;p>&lt;code>https://_your-server.your-domain.com_?documentId=1bf13f86674e42e88da3ba72&amp;amp;workspaceId=b0526d577bb844bea463aea7&amp;amp;elementId=36c2f534a07941e1a26b4928&amp;amp;server=https%3A%2F%2Fcad.onshape.com&amp;amp;userId=53da35fbe4b0412c60b5e3b7&amp;amp;access=edit&amp;amp;debug=true&lt;/code>&lt;/p>
&lt;p>The query parameters passed from Onshape to your application are:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Parameter&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Description&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>documentId&lt;/td>
&lt;td>Current document ID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>workspaceId&lt;/td>
&lt;td>Current workspace ID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>elementId&lt;/td>
&lt;td>Current (application) element ID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>server&lt;/td>
&lt;td>The address of the current Onshape server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>userId&lt;/td>
&lt;td>Current user ID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>access&lt;/td>
&lt;td>To be documented&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>debug&lt;/td>
&lt;td>To be documented&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>These query parameters provide the context you need to interact with the current document; you will need to authenticate to the Onshape server in order to use the REST APIs. The server parameter is informational, REST requests should always be sent to &lt;a href="https://cad.onshape.com">https://cad.onshape.com&lt;/a> for API requests and &lt;a href="https://oauth.onshape.com">https://oauth.onshape.com&lt;/a> for OAuth related operations.&lt;/p>
&lt;h3 id="end-user-integration">End user integration&lt;/h3>
&lt;p>When a user registers an application, there are several possible integration points to expose the application within the Onshape user experience. At this time, applications that provide a UI in an Onshape tab will be added to the menu attached to the plus button on the Onshape tab bar.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/apioverviewimage02.png" alt="image">&lt;/p>
&lt;p>Use the Developer Portal to create an application and an Appstore entry. We are still considering how to best offer additional integration options, possibly including context menus for appropriate entities, application-specific toolbar buttons and more.&lt;/p>
&lt;h3 id="applications-for-mobile-clients">Applications for Mobile Clients&lt;/h3>
&lt;p>Onshape expects to enable applications tabs in iOS and Android environments, but details, including touch event handling in mobile environments, have not been finalized.&lt;/p></description></item><item><title>Docs: Client Messaging</title><link>https://onshape-public.github.io/docs/6-app-development/clientmessaging/</link><pubDate>Mon, 18 May 2020 20:30:40 -0400</pubDate><guid>https://onshape-public.github.io/docs/6-app-development/clientmessaging/</guid><description>
&lt;h1 id="javascript-post-message-api">JavaScript Post Message API&lt;/h1>
&lt;hr>
&lt;p>Application extensions and the Onshape JavaScript web client need to communicate directly, calling across the iframe containing the application extension using post message.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/javascriptpostmessageimage00.png" alt="image alt text">&lt;/p>
&lt;h2 id="typical-use-cases">Typical Use Cases&lt;/h2>
&lt;p>Some example use cases that might include using Onshape Client Messaging can be split into those that are initiated from the Application Extension, and those that are initiated from the Onshape Client. While many examples are provided, not all of them can be implemented given the currently supported messages.&lt;/p>
&lt;h3 id="from-the-application-extension-to-the-onshape-client">From the Application Extension to the Onshape Client:&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Click/Close Flyouts Events&lt;/strong> - Notify the Onshape client that the user has clicked in the application extension, which should cause Onshape flyouts (versions, history, uploads, etc.) and dropdown menus (profile dropdown menu, document menu) to close. Without this, there may be cases the flyouts and menus remain open, over the application extension.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Shortcut Keyboard Events&lt;/strong> - Shortcut keys such as &amp;ldquo;?&amp;rdquo; that should open the Onshape help dialog could be handled by the application extension posting a message to the Onshape client to open the help dialog.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Keep Alive&lt;/strong> - Notify the Onshape client that the user is actively working in the application extension, which will cause the Onshape client to send a message to the server to keep the browser session alive. Without this, the Onshape browser session will timeout after some amount of time, asking the user to login again.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Standard Onshape Dialogs&lt;/strong> - Request from the application extension to the Onshape client to open one of the Onshape standard dialogs and send the user’s choices back to the application extension. For example, if the application extension needs the user to choose a part or assembly to be operated on, the application extension can post a message to the Onshape client requesting that dialog be opened and the selected part or assembly information sent back to the application extension.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>UI Customization&lt;/strong> - Request from the application extension to the Onshape client to customize the Onshape UI - to add commands to menus, add buttons to the toolbars, etc. When such commands or toolbar buttons are clicked, the Onshape client would post a message to the application extension with the available context. **Note - **this is limited to cases where the application extension is made active by the user, as application extensions are not automatically loaded when a document is opened. Most UI customizations should be done when you register the application with Onshape, as those would change the Onshape client automatically without needing to load the application extension first.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Content/Material Insertion&lt;/strong> - Request from the application extension to insert content into the Onshape document. Possible examples: to insert a part into a new or existing partstudio, to apply a material to a part, or to add a material to a material library.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="from-the-onshape-client-to-the-application-extension">From the Onshape Client to the Application Extension:&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>User Action Notification&lt;/strong> - The Onshape client could notify an application extension when various user actions happen. For example, the Onshape client might notify when the user has made the application extension active or inactive (when the user clicks on document tabs), as there is no way to know this currently otherwise except when initially loading an application extension. When an application extension is made inactive, it is moved off the edges of the browser, so it cannot be seen but is still active, preserving its state.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Printing&lt;/strong> - The Onshape client could notify an application extension when the user has chosen the Print command from the main Onshape document menu, enabling the application extension to do a print operation.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="posting-a-message-from-the-application-extension-to-the-onshape-client">Posting a message from the Application Extension to the Onshape Client&lt;/h2>
&lt;p>To ensure security, an application extension must:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>document, workspace and element ids&lt;/strong> - Parse for the document id, workspace id and element id that were passed as query parameters within the application extension’s iframe src URL. You will need to post these back in each post message.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>server&lt;/strong> - Parse for the server that was passed as a query parameter within the application extension’s iframe src URL. You will need to use this to validate messages received, as shown later in this document.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>do not redirect to another base URL&lt;/strong> - The browser will tell the Onshape client the origin base URL from which a post message is received. The Onshape client will ignore messages posted from an origin URL that doesn’t match the original iframe src URL. Hence application extensions should not redirect to another base URL after the iframe has been opened, as that will result in the Onshape ignoring its messages.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>post a message on startup&lt;/strong> - After an application extension has started up and finished loading, it should post a message to the Onshape client. This tells the Onshape client that the application extension is able to handle post messages. The Onshape client will not post a message to an application extension until it has first received a message from the application extension. This ensures the Onshape client won’t send messages to an application extension that isn’t listening for them and won’t send messages until the application extension is fully loaded. Any type of valid message sent to the Onshape client will trigger postings from the Onshape client (e.g. keepAlive).&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>This JavaScript code parses the iframe src query parameters uses them to post a message:&lt;/p>
&lt;pre tabindex="0">&lt;code> var documentId;
var workspaceId;
var elementId;
var server;
// Parse query parameters
var queryParameters = decodeURIComponent(window.location.search.substr(1));
var queryParametersArray = queryParameters.split(&amp;#39;&amp;amp;&amp;#39;);
for (var i = 0; i &amp;lt; queryParametersArray.length; i++) {
var parameterArray = queryParametersArray[i].split(&amp;#39;=&amp;#39;);
if (parameterArray.length === 2) {
switch (parameterArray[0]) {
case &amp;#39;documentId&amp;#39;:
documentId = parameterArray[1];
break;
case &amp;#39;workspaceId&amp;#39;:
workspaceId = parameterArray[1];
break;
case &amp;#39;elementId&amp;#39;:
elementId = parameterArray[1];
break;
case &amp;#39;server&amp;#39;:
server = parameterArray[1];
break;
}
}
}
// Listen for clicks and post a message to the Onshape client
document.getElementById(&amp;#39;&amp;lt;id of your topmost element&amp;gt;&amp;#39;).
addEventListener(&amp;#39;click&amp;#39;, function() {
var message = {documentId: documentId,
workspaceId: workspaceId,
elementId: elementId,
messageName: &amp;#39;closeFlyoutsAndMenus&amp;#39;};
window.parent.postMessage(message, &amp;#39;*&amp;#39;);
}, true);
&lt;/code>&lt;/pre>&lt;p>The message object posted to the Onshape client is of the form:&lt;/p>
&lt;pre tabindex="0">&lt;code>{
documentId: documentId,
workspaceId: workspaceId,
elementId: elementId,
messageName: &amp;#39;&amp;lt;message name&amp;gt;&amp;#39;,
… other properties as needed for other message types …};
}
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>&lt;em>&lt;strong>Notes:&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>The server query parameter is used when receiving post messages from Onshape. See later in this document.&lt;/li>
&lt;li>If the application extension uses a JavaScript library or framework such as BackboneJS or AngularJS, it can parse the query parameters and maintain state in other ways.&lt;/li>
&lt;li>Post messages submitted by application extensions to Onshape will be ignored if any of the following is true:
&lt;ul>
&lt;li>the document id, workspace id or element id are missing or not valid.&lt;/li>
&lt;li>the message name is missing or not recognized.&lt;/li>
&lt;li>the origin of the post message does not match the original iframe src URL.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="handling-messages-posted-from-the-onshape-client-to-the-application-extension">Handling Messages Posted from the Onshape Client to the Application Extension&lt;/h2>
&lt;p>The message data object posted to the application extension is of the form:&lt;/p>
&lt;pre tabindex="0">&lt;code>{
messageName: &amp;#39;&amp;lt;message name&amp;gt;&amp;#39;,
… other properties as needed for other message types …
}
&lt;/code>&lt;/pre>&lt;p>The message will always have a &lt;code>messageName&lt;/code> property.&lt;/p>
&lt;p>Here’s some JavaScript code showing how to listen for messages from the Onshape client:&lt;/p>
&lt;pre tabindex="0">&lt;code> // server is one of the iframe src query parameters - see above
var handlePostMessage = function(e) {
console.log(&amp;#34;Post message received in application extension.&amp;#34;);
console.log(&amp;#34;e.origin = &amp;#34; + e.origin);
// Verify the origin matches the server iframe src query parameter
if (server === e.origin) {
console.log(&amp;#34;Message safe and can be handled as it is from origin &amp;#39;&amp;#34;
+ e.origin +
&amp;#34;&amp;#39;, which matches server query parameter &amp;#39;&amp;#34;
+ server + &amp;#34;&amp;#39;.&amp;#34;);
if (e.data &amp;amp;&amp;amp; e.data.messageName) {
console.log(&amp;#34;Message name = &amp;#39;&amp;#34; + e.data.messageName + &amp;#34;&amp;#39;&amp;#34;);
} else {
console.log(&amp;#34;Message name not found. Ignoring message.&amp;#34;);
}
} else {
console.log(&amp;#34;Message NOT safe and should be ignored.&amp;#34;);
}
};
window.addEventListener(&amp;#39;message&amp;#39;, handlePostMessage, false);
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>It is &lt;em>extremely important&lt;/em> to the security of your application that you verify that the origin of all messages you receive is the same as the original server query parameter in the iframe src, as shown above:&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code> if (server === e.origin) {
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>In production operation especially, the message IS NOT SAFE if the message origin does not match the iframe src server query parameter.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Application Extensions Must Post First Message&lt;/strong>&lt;/p>
&lt;p>Onshape will not post messages until a newly started application extension has first posted a valid message to Onshape. This constraint is in effect anytime an application extension is (re)started and exists to avoid posting messages to application extensions that are not ready to handle them, are not fully loaded, etc.&lt;/p>
&lt;p>So after your application extension is fully loaded and ready to receive messages, post a message to Onshape. A keepAlive message is a great first message to send to Onshape. Once Onshape receives a valid message, Onshape will start posting messages to the application extension.&lt;/p>
&lt;p>If the application extension later sends an invalid message Onshape will stop sending messages until a valid message is posted to Onshape.&lt;/p>
&lt;h2 id="element-tab-application-extension-messages">&lt;strong>Element Tab&lt;/strong> Application Extension Messages:&lt;/h2>
&lt;p>Messages may be sent and recieved by element tab application extensions. The following table describes messages that may be sent; find those that may be recieved &lt;a href="#messages-that-may-be-received-by-element-tab-application-extensions">here&lt;/a>:&lt;/p>
&lt;h3 id="mesages-that-may-be-_sent_-by-element-tab-application-extensions">Mesages that may be &lt;em>Sent&lt;/em> by Element Tab Application Extensions&lt;/h3>
&lt;table>
&lt;tr>
&lt;td>messageName
(case sensitive)&lt;/td>
&lt;td>other message properties?&lt;/td>
&lt;td>comment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>applicationInit&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>notifyWhenSaveRequired: whether Onshape should send a notification to save pending changes during certain operations
(default is false)
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Send once on application startup.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>closeFlyoutsAndMenus&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send when a mouse click or other event happens in the application extension. Closes Onshape flyouts and dropdown menus.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>closeSelectItemDialog&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Closes the select item dialog.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>connectionLost&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Displays the standard Onshape connection lost message in a message bubble, forcing the user to either reload the document or return to the documents page.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>errorReload&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>message: your message
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Similar to the connectionLost message, but enables an application to specify the first part of the message, which will be used instead of "Onshape is not connected." The user must reload the document or return to the documents page.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>finishedSaving&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>messageId: the id sent in the corresponding 'saveChanges' message
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Response to a 'saveChanges' message sent from Onshape. Should be sent after application has cleaned up any pending edits.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>keepAlive&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send periodically while while the user is actively working to avoid the session from timing out.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>saveAVersion&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send when the user types “Shift-S” in the application extension, the keyboard shortcut for save a version.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>showKeyboardShortcutsHelp&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send when the user types “?” (Shift-? on most keyboards) in the application extension, the keyboard shortcut for the keyboard shortcuts help dialog.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>showMessageBubble&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>message: your message
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Send when you want to show a string in the blue message bubble at the top of the Onshape app.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>startLoadingSpinner&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>message: your message
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Send to start a large spinner in the middle of the browser window with your message underneath it.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stopLoadingSpinner&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send to stop the large spinner.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>startWorkingSpinner&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send to start a small spinner in the middle bottom of the browser window.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stopWorkingSpinner&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Send to stop the small spinner.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>openSelectItemDialog&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>dialogTitle: your dialog title
(default is no title),
selectBlobs: true or false
(default is false),
selectParts: true or false
(default is false),
selectPartStudios: true or false
(default is false),
selectAssemblies: true or false
(default is false),
selectMultiple: true or false
(default is false),
selectBlobMimeTypes: ‘comma-delimited string of blob mime types to show in dialog (e.g. “application/dwt,application/dwg”)’
(default is an empty string)
showBrowseDocuments: true or false - controls whether ‘Other documents’ choice should be available
(default is true)
showStandardContent: true or false - controls whether ‘Standard content’ choice should be available
(default is false)
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Send when your application wants to open a dialog in which the user will select one or multiple items - blobs, parts, part studios or assemblies.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>requestCameraProperties&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>graphicsElementId: string , Element ID of the part studio or assembly
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>
Send to request camera properties of a specific part studio or assembly element. Note: The element should have been opened at least once in the current session. The messageName of the response is cameraProperties
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h3 id="messages-that-may-be-_received_-by-element-tab-application-extensions">Messages that may be &lt;em>Received&lt;/em> by Element Tab Application Extensions&lt;/h3>
&lt;table>
&lt;tr>
&lt;td>messageName
(case sensitive)&lt;/td>
&lt;td>other message properties?&lt;/td>
&lt;td>comment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>show&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Sent when an element tab application extension is shown (made active) within the Onshape client. This message is NOT sent when the element tab application extension is created.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hide&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Sent when an element tab application extension is made inactive within the Onshape client. This message is NOT sent when an element tab application extension is deleted.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>itemSelectedInSelectItemDialog&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>documentId: id of selected item’s document,
workspaceId: id of selected item’s workspace, empty if versionId not empty,
versionId: id of selected item’s version, empty if workspaceId not empty,
elementId: id of element selected or containing the selected part,
elementName: name of element selected or containing the selected part,
elementType: type of element selected or containing the selected part - ‘partstudio’, ‘assembly’ or ‘blob’,
elementMicroversionId: microversion id of the element,
itemType: type of item selected: ‘part’,‘partStudio’ or ‘assembly’,
partName: name of part selected, empty if itemType is not ‘part’,
idTag: id of part, empty if no part selected
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Sent when the user selects an item (blob, part, part studio or assembly) in the select item dialog that was opened due to an openSelectItemDialog message sent earlier.
When a part is not selected, the partXxx message properties will be empty strings.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>print&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Sent when the user chooses the Print command while the application is the active element. The application can choose to handle this as either a print or an export to a PDF or other format.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>selectItemDialogClosed&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Sent when the select item dialog closes, either because the user selected an item and selectMultiple is false, or the user changed the active element or the user closed the dialog with the "X" button.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>startFirstViewCommand&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>documentId: id of selected item’s document,
workspaceId: id of selected item’s workspace, empty if versionId not empty,
versionId: id of selected item’s version, empty if workspaceId not empty,
elementId: id of element selected or containing the selected part,
elementName: name of element selected or containing the selected part,
elementType: type of element selected or containing the selected part - ‘partstudio’, ‘assembly’ or ‘blob’,
elementMicroversionId: microversion id of the element,
itemType: type of item selected: ‘part’,‘partstudio’ or ‘assembly’,
partName: name of part selected, empty if itemType is not ‘part’,
idTag: id of part
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Sent to a drawings application extension when the drawing is created with zero views.
&lt;p>If other types of applications need a message posted to them with creation context, contact Onshape and we can discuss using this sort of message for your application also.&lt;/td>&lt;/p>
&lt;/tr>
&lt;tr>
&lt;td>export&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>fileExtension: the file extension of the export type the user chose - “.dwg”, “.dxf” are the types currently supported.
baseFileName: the base portion of the expected output file. This is currently set to “&amp;lt;document name&amp;gt; - &amp;lt;element name&amp;gt;”
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Sent when the user chooses a command to export the contents of the application to a file.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cameraProperties&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>graphicsElementId: string , Element ID of the part studio or assembly
isValid: boolean, Indicates if the properties are valid or not. false if element ID is invalid or element has not been open in the current session
projectionType: string, Denotes the projection method. Values are ‘orthographic’, ‘perspective’ . Empty string ‘’ if isValid is false
viewMatrix: 16 element numeric matrix with elements at index 13, 14, 15 corresponding to position of the camera
projectionMatrix: 16 element numeric matrix
verticalFieldOfView: number, 0 in case of orthographic projection
viewportHeight: number, eight of the viewport
viewportWidth: number, width of the viewport
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Sent when application posts a requestCameraProperties message&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>takeFocus&lt;/td>
&lt;td>no&lt;/td>
&lt;td>Sent when the Onshape client sets focus on the content window of the element tab application extension.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>saveChanges&lt;/td>
&lt;td>yes
&lt;pre>&lt;code>messageId: a unique identifier for this message. Should be passed back in the 'finishedSaving' message.
&lt;/code>&lt;/pre>
&lt;/td>
&lt;td>Sent if the application specified 'notifyWhenSaveRequired' in the 'applicationInit' message. Indicates that the application should cleanup any pending edits before an Onshape process continues (i.e. version save).&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h2 id="element-right-panel-application-extension-messages">&lt;strong>Element Right Panel&lt;/strong> Application Extension Messages&lt;/h2>
&lt;p>Most client messaging functionality had been limited to that occurring between the Onshape client and application elements (the &lt;strong>element tab&lt;/strong> location). Included now is &lt;em>some&lt;/em> functionality for client messaging to work with application extensions in the &lt;strong>element right panel&lt;/strong> location as well.&lt;/p>
&lt;h3 id="all-onshape-selections-to-element-right-panel-application-extensions">All Onshape Selections to Element Right Panel Application Extensions&lt;/h3>
&lt;p>Enabled messaging to element right panel extensions includes the communication of selections that the user makes for the following application extension contexts:&lt;/p>
&lt;ul>
&lt;li>Part Studio&lt;/li>
&lt;li>Assembly&lt;/li>
&lt;li>Document&lt;/li>
&lt;/ul>
&lt;h4 id="capturing-selection-messages-from-the-onshape-client">Capturing &lt;code>SELECTION&lt;/code> Messages from the Onshape Client:&lt;/h4>
&lt;p>First, all &lt;a href="#posting-a-message-from-the-application-extension-to-the-onshape-client">security related requirements&lt;/a> that apply to posting a message from an element tab location to the Onshape client apply for the element right panel location as well. In staying consistent with the functionality described in that section, an initial message from the application extension to the Onshape client, in the form of an &lt;code>applicationInit&lt;/code> message (or one of any other messages supported by the element right panel extensions), is required to ensure the Onshape client does not send messages to the extension until it is ready.&lt;/p>
&lt;p>Once a valid &lt;code>applicationInit&lt;/code> message is received by the Onshape client, it will start sending messages with the &lt;code>messageName&lt;/code> value of &lt;code>SELECTION&lt;/code> upon user selection interactions.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>&lt;strong>NOTE:&lt;/strong> Prior to accepting &lt;em>any&lt;/em> message from the Onshape client as secure, the &lt;code>origin&lt;/code> attribute value included in incoming messages must be validated as equal to the original &lt;code>server&lt;/code> query parameter value used to load the application extension.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>Sequence diagram illustrating interaction between element right panel application extension and Onshape client:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">%%{
init: {
&amp;#34;theme&amp;#34;: &amp;#34;default&amp;#34;,
&amp;#34;sequence&amp;#34;: {
&amp;#34;mirrorActors&amp;#34;: false,
&amp;#34;showSequenceNumbers&amp;#34;: false,
&amp;#34;width&amp;#34;: 75,
&amp;#34;height&amp;#34;: 60,
&amp;#34;actorMargin&amp;#34;: 25,
&amp;#34;messageFontSize&amp;#34;: 13,
&amp;#34;messageFontFamily&amp;#34;: &amp;#34;monospace&amp;#34;,
&amp;#34;messageFontWeight&amp;#34;: 2
}
}
}%%
sequenceDiagram
actor user
participant OSC AS Onshape Client
participant AE AS Application Extension
user-&amp;gt;&amp;gt;+OSC: start element right panel extension
Note right of user: via configured button
OSC-&amp;gt;&amp;gt;+AE: invoke action url (with query params)
AE-&amp;gt;&amp;gt;OSC: postMessage(messageName: &amp;#39;applicationInit&amp;#39;)
loop selection interactions
user-&amp;gt;&amp;gt;OSC: select
OSC-&amp;gt;&amp;gt;AE: postMessage(messageName: &amp;#39;SELECTION&amp;#39;)
end
user-&amp;gt;&amp;gt;OSC: stop element right panel extension
Note right of user: via configured button
deactivate AE
OSC-XAE: destroy
deactivate OSC
&lt;/code>&lt;/pre>&lt;p>The following messages are exchanged for application extensions located in the element right panel and configured for Part Studio, Assembly, or Document contexts:&lt;/p>
&lt;p>The first message with &lt;code>messageName&lt;/code> attribute set to &lt;code>applicationInit&lt;/code> is sent to the Onshape client by an application extension once it is loaded and ready to receive and process incoming messages:&lt;/p>
&lt;pre tabindex="0">&lt;code> {
documentId: &amp;#39;&amp;lt;document id&amp;gt;&amp;#39;,
workspaceId: &amp;#39;&amp;lt;workspace id&amp;gt;&amp;#39;,
elementId: &amp;#39;&amp;lt;element id&amp;gt;&amp;#39;,
messageName: &amp;#39;applicationInit&amp;#39;
}
&lt;/code>&lt;/pre>&lt;p>where the values &amp;lt;document id&amp;gt;, &amp;lt;workspace id&amp;gt;, &amp;lt;element id&amp;gt;, and &amp;lt;server id&amp;gt;:&lt;/p>
&lt;ul>
&lt;li>are originally included as query parameters in the action URL used to request the content of the application extension&lt;/li>
&lt;li>must be included in messages sent to the Onshape client&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> while initialization is the specific intent of the &lt;code>applicationInit&lt;/code> message, other supported &lt;code>messageName&lt;/code> attributes have the same initialization effect upon their first receipt by the Onshape client.&lt;/p>
&lt;/blockquote>
&lt;p>Next, as the user interacts with Onshape by selecting various parts of the model, messages with the &lt;code>messageName&lt;/code> attribute set to &lt;code>SELECTION&lt;/code> are sent to the application extension. The following is an example of one such message:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> messageName: &lt;span style="color:#a50">&amp;#39;SELECTION&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selections: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selectionType: &lt;span style="color:#a50">&amp;#39;ENTITY&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selectionId: &lt;span style="color:#a50">&amp;#39;KRiB&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entityType: &lt;span style="color:#a50">&amp;#39;FACE&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> occurrencePath: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;MfOieM8xKIDGHe37c&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workspaceMicroversionId: &lt;span style="color:#a50">&amp;#39;a781c53fbd1095e3462d2b70&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selectionType: &lt;span style="color:#a50">&amp;#39;ENTITY&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selectionId: &lt;span style="color:#a50">&amp;#39;KRdC&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entityType: &lt;span style="color:#a50">&amp;#39;EDGE&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> occurrencePath: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;MfOieM8xKIDGHe37c&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workspaceMicroversionId: &lt;span style="color:#a50">&amp;#39;a781c53fbd1095e3462d2b70&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="example-code-snippet">Example Code Snippet&lt;/h4>
&lt;p>The following is an example of how one might send an initialization message to, and handle post messages from the Onshape client.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> Proper clean-up of event listeners is not included in the snippet&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">function&lt;/span> handlePostMessage(event) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// ensure that the event data is from a legit source:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">if&lt;/span>(theServerStringFromActionUrl !== event.origin) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(&lt;span style="color:#a50">&amp;#39;origin of message is not legitimate&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// branch based on messageName attribute
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">switch&lt;/span>(event.data.messageName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">case&lt;/span> &lt;span style="color:#a50">&amp;#39;SELECTION&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.debug(&lt;span style="color:#a50">&amp;#39;SELECTION event data: %o&amp;#39;&lt;/span>, event.data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.debug(&lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>event.data.messageName&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50"> not handled`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0aa">window&lt;/span>.addEventListener(&lt;span style="color:#a50">&amp;#39;message&amp;#39;&lt;/span>, handlePostMessage);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> initMessage = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> documentId: theDocumentId, &lt;span style="color:#aaa;font-style:italic">// required - parsed from action url
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> workspaceId: theWorkspaceId, &lt;span style="color:#aaa;font-style:italic">// required - parsed from action url
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> elementId: theElementId, &lt;span style="color:#aaa;font-style:italic">// required - parsed from action url
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> messageName: &lt;span style="color:#a50">&amp;#39;applicationInit&amp;#39;&lt;/span> &lt;span style="color:#aaa;font-style:italic">// required
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0aa">window&lt;/span>.parent.postMessage(initMessage, &lt;span style="color:#a50">&amp;#39;*&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="general">General&lt;/h2>
&lt;p>&lt;strong>Keyboard Focus / Shortcut Keys&lt;/strong>&lt;/p>
&lt;p>Keyboard focus will not be transferred to an application until the user clicks in the application or the application programmatically takes focus. The simplest thing is an application should programmatically take focus when it is first loaded and then also take focus when it receives a &amp;ldquo;show&amp;rdquo; message from Onshape. If an application does this, then shortcut keys will work immediately when the application is shown.&lt;/p>
&lt;p>&lt;strong>Future Notes&lt;/strong>&lt;/p>
&lt;p>New message types will be added as needed. If your application extension needs a message not listed in this document, please notify Onshape and we’ll work with you on it.&lt;/p>
&lt;p>Mobile client support is unclear at this time.&lt;/p>
&lt;p>Onshape is considering using promises to wrap post messages. This would make the application extension&amp;rsquo;s JavaScript simpler and enables chaining posts with other operations. But promises would make some sorts of interactions where there are multiple responses difficult, such as when you open a dialog like the select item dialog and want to receive multiple post messages back due to the user clicking on multiple items in the dialog.&lt;/p></description></item><item><title>Docs: Extensions</title><link>https://onshape-public.github.io/docs/6-app-development/extensions/</link><pubDate>Mon, 18 May 2020 20:39:14 -0400</pubDate><guid>https://onshape-public.github.io/docs/6-app-development/extensions/</guid><description>
&lt;h1 id="onshape-api-and-application-extensions">Onshape API and Application Extensions&lt;/h1>
&lt;p>We are enhancing the Onshape API to enable a more integrated user experience and new capabilities.&lt;/p>
&lt;p>The new capabilities called extensions allow the following:&lt;/p>
&lt;ol>
&lt;li>Embedding application UIs at multiple locations in the Onshape UI&lt;/li>
&lt;li>Enabling actions within the Onshape UI that can invoke application code via REST APIs or open custom URLs.&lt;/li>
&lt;li>Enabling background process integration into release workflows.&lt;/li>
&lt;li>An OAuth connection from Onshape to the application which enables seamlessly calling application code via REST APIs&lt;/li>
&lt;/ol>
&lt;h2 id="creating-extensions">Creating extensions&lt;/h2>
&lt;p>Once the application has been created, we can configure it in the Developer Portal. While viewing or editing the application, we earlier had 4 sections - Details, Settings, Keys, and Secrets and Permissions. We now have 2 new sections - &lt;strong>Extensions&lt;/strong> and &lt;strong>External OAuth&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage01.png" alt="image alt text">&lt;/p>
&lt;p>At a high level, we can classify extensions into 2 types. The first type of extensions embeds a UI from the application into the Onshape UI. The embedded UI is an HTTPS page that is shown in an iFrame in the Onshape UI. The UI is served from the application, and can choose to make API calls to Onshape for additional information. This is exactly like the traditional tab-based applications in Onshape, except that such extensions exist at different UI locations.&lt;/p>
&lt;p>The second type of extension embeds an action that calls a REST API exposed by the application from the Onshape UI. Examples of these are context menu actions and toolbar actions. These types of extensions rely on the External OAuth information to authenticate and make a call where Onshape acts as a client and the application acts as a server.&lt;/p>
&lt;p>Each extension exists at a specific place in the Onshape UI and works with a specific context or selection. The attributes of an extension are:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Name - This should be short and explicit. It will appear in the Onshape UI as a menu item, a toolbar tooltip, a collapsed panel icon tooltip, or a panel icon. It might be truncated in the UI if it is too long.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Description - This is where the developer can record a detailed description of the extension. It does not appear in the Onshape UI, but could appear in the grant process.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Location - This describes where the extension exists in the Onshape UI. Over time, this will cover various panels in the UI, context menus, toolbars, actions in dialogs, etc. You can see the list of currently supported locations &lt;a href="#supported-locations-and-contexts">here&lt;/a>.
Please note that you can create only one element tab extension per application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Context(selection) - Some locations will work in the context of a selection. Let’s say the application developer wants to show some information from a third-party system, pertinent only to parts (not assemblies or drawings). In this scenario, the developer would choose a location like ‘Document list info panel’, and the context as ‘Selected part’. If the user searches for something in the document list, some documents, Part Studios, parts, and Assemblies would be returned. This extension will show up in the Info panel only if the selected entity is a part. Using context enables application developers to control when the extension is displayed. Check the list of contexts available for different locations &lt;a href="#supported-locations-and-contexts">here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Action URL - Locations that embed a UI use the action URL to define the address of the page to display. The action URL is used to specify the REST endpoint if the location is an action (context menu, toolbar item, action in dialog etc.) and the action type is GET or POST. If the location is an action and the action is ‘Open in new window’, the action URL is the URL to open in the new window.&lt;br>
The action URL can be parameterized to pass information from Onshape to the application. The action URL replaces attributes in the format {$attribute} with the appropriate value. These attributes can be used to identify the selected entity and/or make calls back to Onshape via the API. The currently supported attributes are:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>{$documentId} - The Onshape ID for the current or selected document.&lt;/li>
&lt;li>{$workspaceOrVersion} - This will be either ‘w’ or ‘v’ for workspace or version respectively depending on current opened document state or selection.&lt;/li>
&lt;li>{$workspaceOrVersionId} - The Onshape ID for the current or selected workspace or version.&lt;/li>
&lt;li>&lt;em>{$workspaceId}&lt;/em> - The Onshape ID for the current or selected workspace. This is being deprecated.&lt;/li>
&lt;li>&lt;em>{$versionId}&lt;/em> - The Onshape ID for the current or selected version. This is being deprecated.&lt;/li>
&lt;li>{$elementId} - The Onshape ID for the current or selected element (part studio, assembly, drawing).&lt;/li>
&lt;li>{$partId} - The Onshape ID for the current or selected part.&lt;/li>
&lt;li>{$partNumber} - The Part number property for the current or selected part, assembly or drawing.&lt;/li>
&lt;li>{$revision} - The Revision property for the current or selected part, assembly or drawing.&lt;/li>
&lt;li>{$mimeType} - The mime type if the current or selected element is a blob.&lt;/li>
&lt;li>{$featureId} - In case of feature selected in the Feature list in a Part Studio.&lt;/li>
&lt;li>{$nodeId} - In case of mate or mate feature selected in the Assembly list.&lt;/li>
&lt;li>{$occurrencePath} - In case of part instances, mates, mate connectors and sub assemblies.&lt;/li>
&lt;li>{$configuration} - In case of extensions inside the document, this attribute will be replaced by current element active configuration.&lt;/li>
&lt;/ul>
&lt;p>The attributes can exist as path parameters or query parameters or attributes in the POST body. For example: &lt;a href="https://whispering-sea-42267.herokuapp.com/oauthSignin?documentId=%7B$documentId%7D&amp;amp;workspaceId=%7B$workspaceId%7D&amp;amp;elementId=%7B$elementId%7D&amp;amp;partId=%7B$partId">https://whispering-sea-42267.herokuapp.com/oauthSignin?documentId={$documentId}&amp;amp;workspaceOrVersion={workspaceOrVersion}&amp;amp;workspaceOrVersionId={$workspaceOrVersionId}&amp;amp;elementId={$elementId}&amp;amp;partId={$partId}&amp;amp;server=https://cad.onshape.com&amp;amp;companyId=cad&amp;amp;userId=5f1eba76c14a434817d9c588&amp;amp;locale=en-US&lt;/a> OR &lt;a href="https://cad.onshape.com/api/partstudios/d/%7B$documentId%7D/w/%7B$workspaceId%7D/e/%7B$elementId%7D/stl">https://cad.onshape.com/api/partstudios/d/{$documentId}/{$workspaceOrVersion}/{$workspaceOrVersionId}/e/{$elementId}/stl?server=https://cad.onshape.com&amp;amp;companyId=cad&amp;amp;userId=5f1eba76c14a434817d9c588&amp;amp;locale=en-US&lt;/a>&lt;/p>
&lt;p>The attributes available for replacement differ by location and context selection. You can see the available attributes for each location &lt;a href="#supported-locations-and-contexts">here&lt;/a>.&lt;/p>
&lt;p>The &lt;strong>timeout&lt;/strong> for action_url of type GET or POST is &lt;strong>180 seconds&lt;/strong>.&lt;/p>
&lt;ol start="6">
&lt;li>Action type: The action type is only applicable for locations that act as actions and not for locations that embed UIs. Check if action type is valid for a location &lt;a href="#supported-locations-and-contexts">here&lt;/a>. The supported action types are:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>GET - This makes a GET API call using the action URL. Parameter replacement is done on the action URL.&lt;/li>
&lt;li>POST - This makes a POST API call using the action URL and the action body as the post body. Parameter replacement is done on both the action URL and the action body.&lt;/li>
&lt;li>Open in new window - This opens the action URL in a new browser window. Parameter replacement is done on the action URL.&lt;/li>
&lt;/ul>
&lt;ol start="7">
&lt;li>
&lt;p>Action body: This is only applicable if the action type is POST. The action body is passed in a POST API call and must be in a valid json format.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Show response: This is only applicable if the action type is GET or POST. If this is checked, the UI will wait for a response and show the response in a dialog in the UI. The response must be in a valid json format.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Icon: The icon will be shown where the extension exists. This can be an icon in an Info panel, context menu action, toolbar button, action button in a dialog, or other supported locations.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage02.png" alt="image alt text">&lt;/p>
&lt;h2 id="3rd-party-oauth">3rd-party OAuth&lt;/h2>
&lt;p>This section lists the details required by Onshape to connect to the application. Refer to the sample application for details about building OAuth server functionality into your application.&lt;/p>
&lt;p>Please note that this section is compulsory for now. You have to build an OAuth server application at this time. In the future we may make this optional, or even support other authentication models.&lt;/p>
&lt;p>The attributes are:&lt;/p>
&lt;ol>
&lt;li>Client ID - The Client ID is considered public. It is how your specific application is uniquely identified in OAuth protocol exchanges.&lt;/li>
&lt;li>Client Secret - The client secret is like a password and is saved securely in Onshape storage. It is used to establish a valid OAuth connection to your application.&lt;/li>
&lt;li>Authorization URL - This is the URL where we initiate the OAuth process from Onshape to your application.&lt;/li>
&lt;li>Access Token URL - This is the URL used to access the token for making API calls to your application.&lt;/li>
&lt;li>Scopes - These are the scopes which your application wants to grant. This can be empty.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage03.png" alt="image alt text">&lt;/p>
&lt;h2 id="supported-locations-and-contexts">Supported locations and contexts&lt;/h2>
&lt;p>This is the list of supported locations, their valid contexts, and whether they support action types.&lt;/p>
&lt;h3 id="location-element-context-menu">Location: Element context menu&lt;/h3>
&lt;p>This is the context menu for elements.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage04.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>Part Studio&lt;/li>
&lt;li>Assembly&lt;/li>
&lt;li>Drawing&lt;/li>
&lt;li>Blob element - These are file elements like pdf, stl, Parasolid file, etc.&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacements:&lt;/p>
&lt;ul>
&lt;li>{$documentId} - The Onshape ID for the current or selected document.&lt;/li>
&lt;li>{$workspaceOrVersion} - This will be either ‘w’ or ‘v’ for workspace or version respectively depending on current opened document state or selection.&lt;/li>
&lt;li>{$workspaceOrVersionId} - The Onshape ID for the current or selected workspace or version.&lt;/li>
&lt;li>&lt;em>{$workspaceId}&lt;/em> - The Onshape ID for the current or selected workspace. This is being deprecated.&lt;/li>
&lt;li>&lt;em>{$versionId}&lt;/em> - The Onshape ID for the current or selected version. This is being deprecated.&lt;/li>
&lt;li>{$elementId} - The Onshape ID for the current or selected element (Part Studio, Assembly, Drawing, blob).&lt;/li>
&lt;li>{$partNumber} - The Part number property for the current or selected part, Assembly or Drawing.&lt;/li>
&lt;li>{$mimeType} - The mime type of the currently selected blob element.&lt;/li>
&lt;li>{$configuration} - The active configuration of the current element.&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>server - The address of the current Onshape server&lt;/li>
&lt;li>companyId - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>userId - Current user ID&lt;/li>
&lt;li>locale - Locale of current user (ex. en-US)&lt;/li>
&lt;li>clientId - The OAuth client ID for the application&lt;/li>
&lt;/ul>
&lt;p>This location supports action types.&lt;/p>
&lt;h3 id="location-tree-context-menu">Location: Tree context menu&lt;/h3>
&lt;p>This is the context menu for the part tree, assembly tree and feature tree in part studios.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage05.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>Part - Part in a Part Studio’s Part list&lt;/li>
&lt;li>Sub assembly - Sub assembly in an Assembly list&lt;/li>
&lt;li>Feature - Feature in a Part Studio’s feature list&lt;/li>
&lt;li>Mate - Mate in an Assembly list&lt;/li>
&lt;li>Mate feature - Mate in an Assembly list&lt;/li>
&lt;li>Instance - Part instance in an Assembly list&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>{$documentId} - The Onshape ID for the current or selected document.&lt;/li>
&lt;li>{$workspaceOrVersion} - This will be either ‘w’ or ‘v’ for workspace or version respectively depending on current opened document state or selection.&lt;/li>
&lt;li>{$workspaceOrVersionId} - The Onshape ID for the current or selected workspace or version.&lt;/li>
&lt;li>&lt;em>{$workspaceId}&lt;/em> - The Onshape ID for the current or selected workspace. This is being deprecated.&lt;/li>
&lt;li>&lt;em>{$versionId}&lt;/em> - The Onshape ID for the current or selected version. This is being deprecated.&lt;/li>
&lt;li>{$elementId} - The Onshape ID for the current or selected element (Part Studio, Assembly, Drawing).&lt;/li>
&lt;li>{$partNumber} - The Part number property for the current or selected part, Assembly or Drawing.&lt;/li>
&lt;li>{$revision} - The Revision property for the current or selected part, Assembly or Drawing.&lt;/li>
&lt;li>{$featureId} - In case of feature selected in the Feature list in a Part Studio&lt;/li>
&lt;li>{$nodeId} - In case of mate or mate feature selected in the Assembly list&lt;/li>
&lt;li>{$occurrencePath} - In case of part instances, mates, mate connectors and sub assemblies.&lt;/li>
&lt;li>{$configuration} - The active configuration of the current element.&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>server - The address of the current Onshape server&lt;/li>
&lt;li>companyId - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>userId - Current user ID&lt;/li>
&lt;li>locale - Locale of current user (ex. en-US)&lt;/li>
&lt;li>clientId - The OAuth client ID for the application&lt;/li>
&lt;/ul>
&lt;p>This location supports action types.&lt;/p>
&lt;h3 id="location-document-list-context-menu">Location: Document list context menu&lt;/h3>
&lt;p>This the context menu available on items in the document list. This is normally documents but can be multiple types based on search results.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage06.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>Part&lt;/li>
&lt;li>Document&lt;/li>
&lt;li>Part Studio&lt;/li>
&lt;li>Assembly&lt;/li>
&lt;li>Drawing&lt;/li>
&lt;li>Blob element - These are file elements like pdf, stl, Parasolid file, etc.&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>{$documentId} - The Onshape ID for the current or selected document.&lt;/li>
&lt;li>{$workspaceOrVersion} - This will be either ‘w’ or ‘v’ for workspace or version respectively depending on current opened document state or selection.&lt;/li>
&lt;li>{$workspaceOrVersionId} - The Onshape ID for the current or selected workspace or version.&lt;/li>
&lt;li>&lt;em>{$workspaceId}&lt;/em> - The Onshape ID for the current or selected workspace. This is being deprecated.&lt;/li>
&lt;li>&lt;em>{$versionId}&lt;/em> - The Onshape ID for the current or selected version. This is being deprecated.&lt;/li>
&lt;li>{$elementId} - The Onshape ID for the current or selected element (Part Studio, Assembly, Drawing).&lt;/li>
&lt;li>{$partNumber} - The Part number property for the current or selected part, Assembly or Drawing.&lt;/li>
&lt;li>{$revision} - The Revision property for the current or selected part, Assembly or Drawing.&lt;/li>
&lt;li>{$configuration} - The active configuration of the current or selected part, Assembly if applicable.&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>server - The address of the current Onshape server&lt;/li>
&lt;li>companyId - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>userId - Current user ID&lt;/li>
&lt;li>locale - Locale of current user (ex. en-US)&lt;/li>
&lt;li>clientId - The OAuth client ID for the application&lt;/li>
&lt;/ul>
&lt;p>This location supports action types.&lt;/p>
&lt;h3 id="location-document-list-info-panel">Location: Document list info panel&lt;/h3>
&lt;p>This is the Info panel to the right in the document list. The document list normally contains documents, but can contain other entities as the result of a search.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage07.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>Part&lt;/li>
&lt;li>Document&lt;/li>
&lt;li>Part Studio&lt;/li>
&lt;li>Assembly&lt;/li>
&lt;li>Drawing&lt;/li>
&lt;li>Blob element - These are file elements like pdf, stl, Parasolid file, etc.&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>{$documentId} - The Onshape ID for the current or selected document.&lt;/li>
&lt;li>{$workspaceOrVersion} - This will be either ‘w’ or ‘v’ for workspace or version respectively depending on current opened document state or selection.&lt;/li>
&lt;li>{$workspaceOrVersionId} - The Onshape ID for the current or selected workspace or version.&lt;/li>
&lt;li>&lt;em>{$workspaceId}&lt;/em> - The Onshape ID for the current or selected workspace. This is being deprecated.&lt;/li>
&lt;li>&lt;em>{$versionId}&lt;/em> - The Onshape ID for the current or selected version. This is being deprecated.&lt;/li>
&lt;li>{$elementId} - The Onshape ID for the current or selected element (Part Studio, Assembly, Drawing).&lt;/li>
&lt;li>{$partId} - The Onshape ID for the current or selected part.&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>server - The address of the current Onshape server&lt;/li>
&lt;li>companyId - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>userId - Current user ID&lt;/li>
&lt;li>locale - Locale of current user (ex. en-US)&lt;/li>
&lt;li>clientId - The OAuth client ID for the application&lt;/li>
&lt;/ul>
&lt;p>This location does NOT support action types.&lt;/p>
&lt;h3 id="location-element-right-panel">Location: Element right panel&lt;/h3>
&lt;p>This is the panel inside a document. It currently houses the BOM, configurations, etc. Applications can use this extension location to add items in this panel.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage08.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>Part - Part selected in the part tree in the Part Studio.&lt;/li>
&lt;li>Document - Shown in the document irrespective of any selections.&lt;/li>
&lt;li>Part studio - Shown in the Part Studio irrespective of other selections.&lt;/li>
&lt;li>Assembly - Shown in the Assembly element irrespective of other selections.&lt;/li>
&lt;li>Sub assembly - Sub assembly selected in the Assembly list.&lt;/li>
&lt;li>Feature - Feature selected in the feature list in the Part Studio.&lt;/li>
&lt;li>Mate - Mate selected in the Assembly list.&lt;/li>
&lt;li>Mate feature - Mate feature selected in the Assembly list.&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>{$documentId} - The Onshape ID for the current document.&lt;/li>
&lt;li>{$workspaceOrVersion} - This will be either ‘w’ or ‘v’ for workspace or version respectively depending on current opened document state or selection.&lt;/li>
&lt;li>{$workspaceOrVersionId} - The Onshape ID for the current or selected workspace or version.&lt;/li>
&lt;li>&lt;em>{$workspaceId}&lt;/em> - The Onshape ID for the current or selected workspace. This is being deprecated.&lt;/li>
&lt;li>&lt;em>{$versionId}&lt;/em> - The Onshape ID for the current or selected version. This is being deprecated.&lt;/li>
&lt;li>{$elementId} - The Onshape ID for the current element (Part Studio, Assembly, Drawing).&lt;/li>
&lt;li>{$partNumber} - The Part number property for the selected part, Assembly or Drawing.&lt;/li>
&lt;li>{$revision} - The Revision property for the selected part, Assembly or Drawing.&lt;/li>
&lt;li>{$featureId} - In case of feature selected in the Feature list in a Part Studio.&lt;/li>
&lt;li>{$nodeId} - In case of mate or mate feature selected in the Assembly list.&lt;/li>
&lt;li>{$occurrencePath} - In case of part instances, mates, mate connectors and sub assemblies.&lt;/li>
&lt;li>{$configuration} - The active configuration of the current element.&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>server - The address of the current Onshape server.&lt;/li>
&lt;li>companyId - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>userId - Current user ID&lt;/li>
&lt;li>locale - Locale of current user (ex. en-US)&lt;/li>
&lt;li>clientId - The OAuth client ID for the application&lt;/li>
&lt;/ul>
&lt;p>This location does NOT support action types.&lt;/p>
&lt;h3 id="location-new-element-tab">Location: New Element tab&lt;/h3>
&lt;p>This is the menu option for &lt;code>+ menu -&amp;gt; Add application&lt;/code> inside a document . After menu click, a new tab will be created with the action url associated with this extension.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage09.png" alt="image alt text">&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>There are no supported contexts.&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>Parameter replacement not supported.&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>documentId - Current document ID&lt;/li>
&lt;li>workspaceId - Current workspace ID&lt;/li>
&lt;li>versionId - Current version ID&lt;/li>
&lt;li>elementId - Current (application) element ID&lt;/li>
&lt;li>server - The address of the current Onshape server&lt;/li>
&lt;li>companyId - Default value is ‘cad’. If the document owner is company/enterprise, then the value is company/enterprise ID.&lt;/li>
&lt;li>userId - Current user ID&lt;/li>
&lt;li>locale - Locale of current user (ex. en-US)&lt;/li>
&lt;li>clientId - The OAuth client ID for the application&lt;/li>
&lt;/ul>
&lt;p>This location supports action types.&lt;/p>
&lt;h3 id="location-part-number-generator">Location: Part number generator&lt;/h3>
&lt;p>This extension helps partners to embed their own custom part number generation scheme in Onshape. Each application can have only one extension of this type. Once defined, these extensions are listed as one of the part numbering schemes in the release management configuration in Company settings.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage10.png" alt="image alt text">&lt;/p>
&lt;p>In the above screen shot, ‘Part number generation scheme’ is the user-defined name of the extension.&lt;/p>
&lt;p>Supported contexts:&lt;/p>
&lt;ul>
&lt;li>There are no supported contexts.&lt;/li>
&lt;/ul>
&lt;p>Supported parameters for replacement:&lt;/p>
&lt;ul>
&lt;li>Parameter replacement is not supported.&lt;/li>
&lt;/ul>
&lt;p>Default parameters as query string:&lt;/p>
&lt;ul>
&lt;li>No default query parameters&lt;/li>
&lt;/ul>
&lt;p>Action URL defined by the user is assumed to be a POST API. This API should consume a predefined request body as shown below. This definition may have additional attributes in future.&lt;/p>
&lt;pre tabindex="0">&lt;code> [
{
&amp;#34;id&amp;#34; : &amp;lt;internal part number id&amp;gt;,
&amp;#34;documentId&amp;#34; : &amp;lt;documentId&amp;gt;,
&amp;#34;elementId&amp;#34; : &amp;lt;elementId&amp;gt;,
&amp;#34;workspaceId&amp;#34; : &amp;lt;workspaceId&amp;gt;,
&amp;#34;elementType&amp;#34; : &amp;lt;elementType&amp;gt;,
&amp;#34;partId&amp;#34; : &amp;lt;partId&amp;gt;,
&amp;#34;companyId&amp;#34; : &amp;lt;companyId&amp;gt;, // Id of the company that owns the document, else the text “cad”
&amp;#34;partNumber&amp;#34; : &amp;lt;current part number&amp;gt;,
&amp;#34;configuration&amp;#34; : &amp;lt;configuration string&amp;gt;,
&amp;#34;categories&amp;#34; : &amp;lt;array of category ids and names&amp;gt; // [ { &amp;#34;id&amp;#34;: &amp;lt;String&amp;gt;, &amp;#34;name&amp;#34;: &amp;lt;string&amp;gt; } ]
}
]
&lt;/code>&lt;/pre>&lt;p>Note - Categories are only passed from the Release dialog and properties dialogs for now. They are empty when part number generation is called from the BOM table or configuration table.&lt;/p>
&lt;p>Expected response sent to Onshape is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code> [
{
&amp;#34;id&amp;#34; : &amp;lt;internal part number id&amp;gt;,
&amp;#34;documentId&amp;#34; : &amp;lt;documentId&amp;gt;,
&amp;#34;elementId&amp;#34; : &amp;lt;elementId&amp;gt;,
&amp;#34;workspaceId&amp;#34; : &amp;lt;workspaceId&amp;gt;,
&amp;#34;elementType&amp;#34; : &amp;lt;elementType&amp;gt;,
&amp;#34;partId&amp;#34; : &amp;lt;partId&amp;gt;,
&amp;#34;partNumber&amp;#34; : &amp;lt;next part number generated by third party numbering scheme&amp;gt;
}
]
&lt;/code>&lt;/pre>&lt;p>Third-party applications can simply fill up the &lt;code>&amp;quot;partNumber&amp;quot;&lt;/code> attribute with part number generated by the custom numbering scheme and send it as a response. However, the response should at least contain &lt;code>&amp;quot;id&amp;quot;&lt;/code> and &lt;code>&amp;quot;partNumber&amp;quot;&lt;/code> as highlighted above, other attributes are optional.&lt;/p>
&lt;p>Custom numbering schemes for part generation, once set in the Release management page, can be invoked from all the places where we set part numbers, including the Release candidate dialog shown below.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage11.png" alt="image alt text">&lt;/p>
&lt;h2 id="sample-application">Sample application&lt;/h2>
&lt;p>We have provided a sample application which supports the features described in this document.&lt;/p>
&lt;p>The source code for this ‘Inventory management’ application can be found &lt;a href="https://github.com/onshape-public/inventory-oauth2-app">here&lt;/a>.&lt;/p>
&lt;p>The instructions to install and try out the application are available in the README.md file in the repository.&lt;/p>
&lt;p>The application is built on the Passport node module. It is based on this &lt;a href="http://scottksmith.com/blog/2014/05/02/building-restful-apis-with-node/">article&lt;/a>. Please read the article before proceeding with this section.&lt;/p>
&lt;p>Some structural information about the application:&lt;/p>
&lt;ul>
&lt;li>The dependencies are defined in package.json&lt;/li>
&lt;li>The routing for inbound calls is defined in server.js. This includes routing for OAuth2 calls as well as calls for the rest APIs we expose that Onshape can call via the extensions.&lt;/li>
&lt;li>The OAuth2 calls are routed to controllers/oauth2.js. These include calls to authenticate as calls to get the bearer token.&lt;/li>
&lt;li>controllers/oauth2.js uses controllers/auth.js to interact with Passport to manage the authentication and storage.&lt;/li>
&lt;li>Other API calls to get part number, etc, route to the appropriate controller in the controllers directory.&lt;/li>
&lt;li>The controllers use the model defined in the model directory.&lt;/li>
&lt;/ul>
&lt;p>The application is defined in the Developer Portal with extensions that use the exposed APIs.&lt;/p>
&lt;p>The following screenshots define the base configuration of the application and some of the sample extensions.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage12.png" alt="image alt text">&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage13.png" alt="image alt text">&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage14.png" alt="image alt text">&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage15.png" alt="image alt text">&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage16.png" alt="image alt text">&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage17.png" alt="image alt text">&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage18.png" alt="image alt text">&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage19.png" alt="image alt text">&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage20.png" alt="image alt text">&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage21.png" alt="image alt text">&lt;/p>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;p>&lt;em>Q. What is the user experience of granting and revoking OAuth access?&lt;/em>&lt;/p>
&lt;p>Once users have purchased the application from the App Store, they will start seeing actions and panel icons as described by the extensions. When they try to use these actions and panels, they will be prompted by an error message stating that they need to grant access first.&lt;/p>
&lt;p>They can grant access by navigating to the ‘Applications’ section under ‘My Account’.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/extensionsimage22.png" alt="image alt text">&lt;/p>
&lt;p>Users will have to grant 2 permissions. The first button called ‘Onshape access’ will enable the application to make calls to the Onshape API. This will require the user’s Onshape credentials.&lt;/p>
&lt;p>The second button calls ‘External access’ and enables Onshape to make calls to the application API. This will require the user’s credentials in the application. Both modes of access use OAuth, so credentials are not stored in the other system.&lt;/p>
&lt;p>If the access is revoked at any time, the actions and panels will ask the user to re-authenticate from the ‘Applications’ page. Access may be revoked manually from Onshape or the application, or because a new version is installed that requires a different scope.&lt;/p>
&lt;p>&lt;em>Q. Who can get access to my app, and how?&lt;/em>&lt;/p>
&lt;p>Applications with extensions are only available to people who have been explicitly granted this permission in Onshape. Users who have been given this permission will be able to go to the App Store and purchase the application. There is no change to this process from earlier. They will then be able to grant access to the application as described in the previous question.&lt;/p>
&lt;p>Do not publish your application if it contains extensions in the App Store for all users. Other users (who have not been granted permission) will not be able to see the extensions and will have a bad experience.&lt;/p>
&lt;p>&lt;em>Q. How is my application informed about selection changes in the Onshape UI?&lt;/em>&lt;/p>
&lt;p>Let’s take the case where your application has an extension that is showing some information in the document info panel that is based on document selection. As the selection changes, the action URL passed to the extension will change (based on parameterization). The new action URL will be loaded into the IFrame for the extension, and the application page will reload. We are adding support for post messages to reduce loading overhead in the future.&lt;/p>
&lt;p>&lt;em>Q. What is the timeout for the action_url of extensions? Is it configurable?&lt;/em>&lt;/p>
&lt;p>Timeout set for each GET or POST request set as action_url of an extension is 180 seconds. Timeout is not configurable.&lt;/p>
&lt;p>&lt;em>Q. What changed when my legacy application migrated to extensions&lt;/em>&lt;/p>
&lt;p>If you had created a desktop or connected ckoud app, nothing has changed.&lt;br>
If you had created an integrated cloud app, the following changes have been made to the app.&lt;/p>
&lt;ul>
&lt;li>The IFrame URL has been changed to the OAuth URL. This is now invoked from the user&amp;rsquo;s application setting page to grant OAuth access. A redirect URL is passed along with the call as a query parameter named &amp;lsquo;redirectOnshapeUri&amp;rsquo;. You will need to modify your code to redirect to this URL if it is present.&lt;/li>
&lt;li>A new tab extension is automatically created for your applications. The target URL for this extension is the earlier IFrame URL. This should continue to work as earlier.&lt;/li>
&lt;li>The tab icon will also be populated into the extension from the earlier application icon and should work as earlier.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Structured Storage</title><link>https://onshape-public.github.io/docs/6-app-development/structuredstorage/</link><pubDate>Mon, 18 May 2020 20:40:16 -0400</pubDate><guid>https://onshape-public.github.io/docs/6-app-development/structuredstorage/</guid><description>
&lt;h2 id="sub-elements">Sub Elements&lt;/h2>
&lt;p>Onshape provides application elements storage that is controlled by applications through the API. These elements allow a set of named sub-elements.&lt;/p>
&lt;p>The application can make changes to sub-elements independently or in arbitrary groupings. Changes may be wholesale replacements, or may be deltas. When performing a delta update, the application may post a full version as well, which allows the api to return a smaller number of deltas for subsequent queries.&lt;/p>
&lt;p>An application may need to perform multiple versionable actions in the course of performing a user-level action, and we want to allow the individual actions to be collected into a single action from the perspective of document history. We do this by providing support for creation of a private transaction and support for atomically committing the transaction to the document workspace as a single user-visible action.&lt;/p>
&lt;p>Onshape does not assume any knowledge about the semantics of application deltas. All merging of deltas into a consolidated form is done by the application. Applications should typically send checkpoint state for a sub-element if many delta changes have been made since the last checkpoint.&lt;/p>
&lt;p>Document content and changes are logically an array of bytes, but since they are transmitted through JSON, then are expected to be presented a Base-64 encoding of the array into string form.&lt;/p>
&lt;p>We use some terminology in this document that is new.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>changeId&lt;/strong> - an opaque identifier for the state of an application element. Each change to the application element results in a new changeId&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>transaction&lt;/strong> - a private workspace within a document workspace for composing modifications to an application element. These changes are not visible to the user until committed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>transaction commit&lt;/strong> - an operation that moves the changes performed within a transaction to the application element workspace as a single user-visible action.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Concurrent access by multiple users&lt;/strong>&lt;/p>
&lt;p>If the element is being concurrently accessed by multiple sessions, updates may encounter conflicts during update. If the application has a mechanism that ensures that all accesses to the element are mediated by a single process, as is done with our part studio and assemblies, this can be addressed directly by the application. However, if the application is not able to mediate access in this way, updates by one session may invalidate state held by another session. We address this by notifying updaters when an update cannot be directly applied because their state is out of date and allowing them to refresh their state before re-applying the change.&lt;/p>
&lt;p>This policy of requiring the application have current state when posting updates could be overly conservative in some cases. Detecting conflict at the sub-element level might provide for better concurrent access performance, but there probably are cases where this fails, so it probably would need some level of application control.&lt;/p>
&lt;h2 id="json-tree">JSON Tree&lt;/h2>
&lt;p>In contrast with sub elements, JSON tree storage is a more managed data storage mechanism that Onshape itself can merge and diff. At the root of it, the data structure is a single JSON object per Application Element. The user submits incremental changes that are then applied by Onshape to the JSON tree. Onshape stores these &amp;lsquo;diffs&amp;rsquo; in a new microversion created as a result of the update request, or during a subsequent transaction commit request. When the user then performs a merge or restore operation, Onshape can sum and apply the requisite incremental changes. By storing diffs, Onshape provides to the user a storage mechanism that is more robust to race conditions, since multiple simultaneous edits can be optionally merged by Onshape. All of these qualities make JSON tree a preferred way to store application element data in an Onshape-native manner.&lt;/p>
&lt;h3 id="json-tree-edit-semantics">JSON Tree Edit Semantics&lt;/h3>
&lt;h5 id="btjedit-encoding">BTJEdit Encoding&lt;/h5>
&lt;p>A JSON tree edit represents an incremental change to an application element&amp;rsquo;s JSON tree. The edit is a &lt;code>BTJEdit&lt;/code> class, which is encoded as one of the following:&lt;/p>
&lt;ul>
&lt;li>Deletion:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJEditDelete-1992&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;path&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Insertion:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJEditInsert-2523&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;path&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;newValue&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Change:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJEditChange-2636&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;path&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;newValue&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Move:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJEditMove-3245&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourcePath&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;path&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;destinationPath&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;path&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>List (where edit1, edit2, etc. are zero or more edits.):&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJEditList-2707&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;edits&amp;#34;&lt;/span> : [ &lt;span style="color:#a50">&amp;#34;edit1&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;edit2&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;...&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Within the above encoding, &lt;code>newValue&lt;/code> is a stand in for any valid JSON, and &lt;code>path&lt;/code> is a stand in for an object representing a path to the node at which to perform the edit.&lt;/p>
&lt;h5 id="btjpath-encoding">BTJPath Encoding&lt;/h5>
&lt;p>The BTJPath object describes a path through the JSON tree to a particular node, and is encoded as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;startNode&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span> : [ &lt;span style="color:#a50">&amp;#34;pathElement1&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;pathElement2&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;...&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where startNode is a string that is either empty to specify the root node or a nodeId of a node in the tree. The pathElement is one of:&lt;/p>
&lt;ul>
&lt;li>Key:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;string&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Index:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{ &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;BTJPathIndex-1871&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;index&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;integer&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the insertion and move type edits the path elements can describe a path that doesn&amp;rsquo;t currently exist. Onshape will generate the proper keys and values as needed to place the node value in the proper location.&lt;/p>
&lt;h3 id="json-tree-examples">JSON Tree Examples&lt;/h3>
&lt;p>Below are some examples that show the body required to perform the particular edit on a JSON tree.&lt;/p>
&lt;h4 id="deletion-example">Deletion Example&lt;/h4>
&lt;p>If the pre-existing JSON tree looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and a delete edit looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditDelete-1992&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>}]}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the resulting JSON is the result of deleting the node specified by &lt;code>path&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="insert-example">Insert Example&lt;/h4>
&lt;p>If the pre-existing JSON tree looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the insertion edit looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditInsert-2523&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;insertedKey&amp;#34;&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the resulting JSON is the result of inserting the node described by &lt;code>value&lt;/code> at the node specified by &lt;code>path&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;insertedKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="change-example">Change Example&lt;/h4>
&lt;p>If the pre-existing JSON tree looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the change edit looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditChange-2636&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myOtherValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the resulting JSON is the result of changing the node specified by &lt;code>path&lt;/code> to the node described by &lt;code>value&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myOtherValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="move-example">Move Example&lt;/h4>
&lt;p>If the pre-existing JSON tree looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myOtherKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myOtherValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the move edit looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditMove-3245&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourcePath&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;destinationPath&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;keyCreatedFromMove&amp;#34;&lt;/span>}]}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the resulting JSON is the result of moving the node from the specified &lt;code>sourcePath&lt;/code> to the &lt;code>destinationPath&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;keyCreatedFromMove&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="list-example">List Example&lt;/h4>
&lt;p>If the pre-existing JSON tree looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the list edit looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditList-2707&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;edits&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditInsert-2523&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditChange-2636&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;firstValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;secondValue&amp;#34;&lt;/span>]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditInsert-2523&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathIndex-1871&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;index&amp;#34;&lt;/span>: &lt;span style="color:#099">1&lt;/span>}]},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myBetterSecondValue&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJEditDelete-1992&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPath-3073&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;startNode&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;path&amp;#34;&lt;/span>: [{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathKey-3221&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myKey&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;btType&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;BTJPathIndex-1871&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;index&amp;#34;&lt;/span>: &lt;span style="color:#099">2&lt;/span>}]}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the resulting JSON is the result of applying all the given edits in order:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;firstValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;myBetterSecondValue&amp;#34;&lt;/span>]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The intermediate steps were:&lt;/p>
&lt;ol>
&lt;li>Insertion:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;myValue&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Change:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;firstValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;secondValue&amp;#34;&lt;/span>]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>List insertion:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;firstValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;myBetterSecondValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;secondValue&amp;#34;&lt;/span>]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>List deletion:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;myKey&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;firstValue&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;myBetterSecondValue&amp;#34;&lt;/span>]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>All the examples above were tested and validated using the Python client &lt;a href="https://github.com/onshape-public/onshape-clients/blob/next/python/test/test_app_element_json_tree.py">here&lt;/a>.&lt;/p></description></item><item><title>Docs: Webhook Notifications</title><link>https://onshape-public.github.io/docs/6-app-development/webhook/</link><pubDate>Mon, 18 May 2020 20:44:05 -0400</pubDate><guid>https://onshape-public.github.io/docs/6-app-development/webhook/</guid><description>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Webhook notifications allow an application to register to receive notifications of certain events that occur within the
Onshape environment. To receive a notification, an application must expose an endpoint that Onshape can call.&lt;/p>
&lt;h2 id="example-code">Example Code&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/onshape-public/onshape-clients/blob/master/python/test/test_webhooks.py#L126">Python&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="events">Events&lt;/h2>
&lt;p>Each type of event that an application may receive notifications for has a unique identifier known as the event type.
Event types are grouped into Event Groups. Each group shares specification requirements, as described below.&lt;/p>
&lt;h3 id="event-groups">Event Groups&lt;/h3>
&lt;p>Event types are categorized into several different groups based on the dominant user resource of the event. The group
that a given event is part of defines the required parameters needed in the registration process to identify the
resource or group of resources to watch. For instance, if registering for an event in the &lt;code>document&lt;/code> event group,
the application must identify either a specific document&amp;rsquo;s id or a specific company&amp;rsquo;s id. If registered for a company,
the event will be registered for all present and future documents owned by the company.&lt;/p>
&lt;h4 id="application-group">Application Group&lt;/h4>
&lt;p>Monitor changes to applications.&lt;/p>
&lt;h5 id="registration-requirements">Registration Requirements&lt;/h5>
&lt;ul>
&lt;li>&lt;code>clientId&lt;/code>&lt;/li>
&lt;/ul>
&lt;h5 id="supported-event-types">Supported Event Types&lt;/h5>
&lt;ul>
&lt;li>&lt;code>onshape.user.lifecycle.updateappsettings&lt;/code> - occurs when user application settings are modified&lt;/li>
&lt;/ul>
&lt;h4 id="document-group">Document Group&lt;/h4>
&lt;p>Monitor various aspects of document changes.&lt;/p>
&lt;h5 id="registration-requirements-1">Registration Requirements&lt;/h5>
&lt;ul>
&lt;li>&lt;code>documentId&lt;/code> OR &lt;code>companyId&lt;/code> must be specified in the registration body.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: only &lt;code>documentId&lt;/code> is valid for the &lt;code>onshape.document.lifecycle.statechange&lt;/code>.&lt;/p>
&lt;h5 id="supported-event-types-1">Supported Event Types&lt;/h5>
&lt;ul>
&lt;li>&lt;code>onshape.model.lifecycle.changed&lt;/code> - occurs when a change to a model has been made&lt;/li>
&lt;li>&lt;code>onshape.model.translation.complete&lt;/code> - occurs when a translation request is completed&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.metadata&lt;/code> - occurs when part or element metadata is modified&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.createversion&lt;/code> - occurs when a new version of a document is created&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.createworkspace&lt;/code> - occurs when a new workspace is created&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.createelement&lt;/code> - occurs when a new element is created&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.deleteelement&lt;/code> - occurs when an element is deleted&lt;/li>
&lt;li>&lt;code>onshape.document.lifecycle.statechange&lt;/code> - occurs when an document changes state&lt;/li>
&lt;li>&lt;code>onshape.model.lifecycle.changed.externalreferences&lt;/code> - occurs when an external reference changes&lt;/li>
&lt;li>&lt;code>onshape.document.lifecycle.created&lt;/code> - occurs when a document is created&lt;/li>
&lt;li>&lt;code>onshape.revision.created&lt;/code> - occurs when a revision is created&lt;/li>
&lt;li>&lt;code>onshape.comment.create&lt;/code> - occurs when a comment is created in a document&lt;/li>
&lt;li>&lt;code>onshape.comment.update&lt;/code> - occurs when a comment is updated in a document&lt;/li>
&lt;li>&lt;code>onshape.comment.delete&lt;/code> - occurs when a deleted is deleted in a document&lt;/li>
&lt;/ul>
&lt;h4 id="workflow-group">Workflow Group&lt;/h4>
&lt;p>Monitor release management actions.&lt;/p>
&lt;h5 id="registration-requirements-2">Registration Requirements&lt;/h5>
&lt;ul>
&lt;li>&lt;code>companyId&lt;/code>&lt;/li>
&lt;/ul>
&lt;h5 id="supported-event-types-2">Supported Event Types&lt;/h5>
&lt;ul>
&lt;li>&lt;code>onshape.workflow.transition&lt;/code> - occurs when a revision or release package transitions through workflow states.&lt;/li>
&lt;/ul>
&lt;h4 id="lifecycle-group">Lifecycle Group&lt;/h4>
&lt;p>Monitor webhook changes.&lt;/p>
&lt;h5 id="registration-requirements-3">Registration Requirements&lt;/h5>
&lt;p>No requirements. This event type responds to any and all webhooks registered by the same application.&lt;/p>
&lt;h5 id="supported-event-types-3">Supported Event Types&lt;/h5>
&lt;ul>
&lt;li>&lt;code>webhook.ping&lt;/code> - occurs either in response to a request by an application to call a registered webhook, or as a post-registration validation initiated by Onshape&lt;/li>
&lt;li>&lt;code>webhook.register&lt;/code> - occurs in response to a notification registration API call&lt;/li>
&lt;li>&lt;code>webhook.unregister&lt;/code> - occurs in response to a notification deregistation API call&lt;/li>
&lt;/ul>
&lt;h2 id="webhook-registration">Webhook Registration&lt;/h2>
&lt;p>An application registers for event notification by making a REST call to the Onshape web service, providing a URL to
notify, and the required parameters for the event types to be registered, as mentioned in &lt;a href="#event-groups">Event Groups&lt;/a>.
If the registration request is well-formed, the registration API call returns information about the registration,
including a unique ID string. This ID string identifies the webhook registration. No de-duplication of notification
registrations is performed by the API. Each registration call will yield a new registration ID, even if the parameters
are identical to those passed in a prior call. Shortly after an application calls the notification registration API,
Onshape will make make an asynchronous trial notification call to the URL generated from the URL template with an event
type of webhook.register in order to test whether the application notification server is accessible. If the trial
notification delivery fails to return an HTTP 200 status code, the notification registration is cancelled. The trial
notification is usually delivered after the notification registration has been received by the application. However,
variations in network delays may result in the trial notification occurring before response is received and processed by
the application, so the notification handler should be ready to process notifications before the registration call is
made.&lt;/p>
&lt;h2 id="notifications">Notifications&lt;/h2>
&lt;p>Notifications are delivered to an application as an HTTP POST with a JSON body. The body includes information about the
identity of the registration request plus information specific to the event and notification message. An application may
register for notifications to a URL that uses either HTTP or HTTPS. If HTTPS is specified by the URL template, the
notification server must supply a certificate that is signed by a certificate authority (CA) recognized by Onshape.&lt;br>
Self-signed certificates as well as certificates signed by unrecognized CAs will be rejected, causing notification
delivery to fail.&lt;/p>
&lt;h2 id="notification-deregistration">Notification Deregistration&lt;/h2>
&lt;p>When an application no longer needs to be notified of changes specified by a particular notification registration, it should normally de-register the notification request. De-registration is performed by making an HTTP that specifies the hook to deregister. Onshape will attempt to call the deregistered hook with an event type of webhook.unregister as validation for the application that the de-registration is complete. If the application does not de-register the webhook, Onshape will continue delivering notifications until either the the application returns an error in response to a notification for the webhook, or fails to respond at all for an extended period of time.&lt;/p>
&lt;h2 id="notification-api-example-messages">Notification API example messages&lt;/h2>
&lt;p>registration&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:45:10.611-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;webhook.register&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;34795d2e5f5f44eeb61fb7b1&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;versionId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>ping&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:24.368-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;webhook.ping&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;6808d9a622644330b6cd95f5&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;versionId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>model change&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:29.284-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;onshape.model.lifecycle.changed&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;f925722bee1c43fc80fb5bb2&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;0f931a1ceba842299192823f&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;60f54ac1cbc04179a6642d9a&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;0f9c4392e5934f30b48ab645&amp;#34;,
&amp;#34;versionId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>document state change&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:29.284-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;onshape.document.lifecycle.statechange&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;60f54ac1cbc04179a6642d9a&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;0f9c4392e5934f30b48ab645&amp;#34;,
&amp;#34;versionId&amp;#34;: &amp;#34;000000000000000000000000&amp;#34;,
&amp;#34;documentState&amp;#34;: &amp;#34;TRASH&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>Possible values of documentState are:&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;ACTIVE&amp;rdquo; - document is in a normal, usable state&lt;/li>
&lt;li>&amp;ldquo;TRASH&amp;rdquo; - document has been moved to the trash (User can move out of trash to ACTIVE state)&lt;/li>
&lt;li>&amp;ldquo;DELETED&amp;rdquo; - document has been deleted&lt;/li>
&lt;/ul>
&lt;p>user application settings change&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:29.284-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;onshape.user.lifecycle.updateappsettings&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;f925722bee1c43fc80fb5bb2&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;0f931a1ceba842299192823f&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;60f54ac1cbc04179a6642d9a&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;userId&amp;#34;: &amp;#34;567953d60a1a5fbb95940333&amp;#34;,
&amp;#34;clientId&amp;#34;:&amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXZY234567ABCDEFG=&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>translation completion&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:29.284-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;onshape.model.translation.complete&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;f925722bee1c43fc80fb5bb2&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;0f931a1ceba842299192823f&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;60f54ac1cbc04179a6642d9a&amp;#34;,
&amp;#34;data&amp;#34;: &amp;#34;Some data&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;0f9c4392e5934f30b48ab645&amp;#34;,
&amp;#34;userId&amp;#34;: &amp;#34;567953d60a1a5fbb95940333&amp;#34;,
&amp;#34;translationId&amp;#34;: &amp;#34;4f5de10f9c4392e5934f30b4&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>comment create&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;timestamp&amp;#34;: &amp;#34;2014-12-16T23:46:29.284-0500&amp;#34;,
&amp;#34;event&amp;#34;: &amp;#34;onshape.comment.create&amp;#34;,
&amp;#34;workspaceId&amp;#34;: &amp;#34;f925722bee1c43fc80fb5bb2&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;0f931a1ceba842299192823f&amp;#34;,
&amp;#34;webhookId&amp;#34;: &amp;#34;544e91f7fb88ed44f5de1508&amp;#34;,
&amp;#34;messageId&amp;#34;: &amp;#34;60f54ac1cbc04179a6642d9a&amp;#34;,
&amp;#34;documentId&amp;#34;: &amp;#34;0f9c4392e5934f30b48ab645&amp;#34;,
&amp;#34;commentId&amp;#34;: &amp;#34;567953d60a1a5fbb95940333&amp;#34;
}
&lt;/code>&lt;/pre></description></item></channel></rss>