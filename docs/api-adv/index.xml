<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API Guides on</title><link>https://onshape-public.github.io/docs/api-adv/</link><description>Recent content in API Guides on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 15 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://onshape-public.github.io/docs/api-adv/index.xml" rel="self" type="application/rss+xml"/><item><title>Assemblies</title><link>https://onshape-public.github.io/docs/api-adv/assemblies/</link><pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/assemblies/</guid><description>This page describes the APIs Onshape provides for working with assemblies.
üìò Notes
This page provides sample code as curls. See the curl documentation for more information. All Onshape API calls must be properly authenticated by replacing the CREDENTIALS variable in the curls below. See the API Keys page for instructions and the Quick Start for an example. All applications submitted to the Onshape App Store must authenticate with OAuth2. This documentation refers to Onshape IDs in the following format: {did}, {wid}, {eid}, {pid}, {otherId}.</description></item><item><title>Associativity</title><link>https://onshape-public.github.io/docs/api-adv/associativity/</link><pubDate>Mon, 18 May 2020 20:28:26 -0400</pubDate><guid>https://onshape-public.github.io/docs/api-adv/associativity/</guid><description>Onshape does not expose a persistent ID for any of these entities. When the model changes, the ID may change. Therefore, Onshape provides an API to enable mapping IDs from a previous microversion to the current microversion. Assuming a simple case of maintaining associativity for a face, an abstract workflow might be:
Read the tessellated model data. Select the face of interest. Store the Face ID and Document Microversion ID for the face.</description></item><item><title>Billing</title><link>https://onshape-public.github.io/docs/api-adv/billing/</link><pubDate>Mon, 18 May 2020 20:29:36 -0400</pubDate><guid>https://onshape-public.github.io/docs/api-adv/billing/</guid><description>This document describes APIs that will allow partners to interact with the Onshape billing system.
Please address questions to &amp;ldquo;api-support@onshape.com&amp;rdquo; for the fastest response.
Overview All billing is done through &amp;ldquo;plans&amp;rdquo; that are created in the Developer Portal. A ‚Äúplan‚Äù has the following attributes:
Name (also called SKU) A unique (within your company) plan name Description A user-visible description of the plan Amount The cost of the plan (may be one-time or recurring, depending on the type) Type Monthly, One-time or Consumable Onshape defines three kinds of plans:</description></item><item><title>Configurations</title><link>https://onshape-public.github.io/docs/api-adv/configs/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/configs/</guid><description>This page describes the APIs Onshape provides for working with Configurations.
You can use Configurations to create variations of entire Part Studios, Assemblies, specific parts and more. You can configure feature and parameter values, part properties, custom part properties, face and part appearances, and sketch text. Each Part Studio can have only one Configuration, but it can contain multiple Configuration inputs. The Configuration inputs you define for a Part Studio become options when inserting that Part Studio into an Assembly or Drawing.</description></item><item><title>Drawings</title><link>https://onshape-public.github.io/docs/api-adv/drawings/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/drawings/</guid><description>This page describes the APIs Onshape provides for creating and manipulating Onshape drawings.
üìò Notes
This page provides sample code as curls. See the curl documentation for more information. All Onshape API calls must be properly authenticated by replacing the CREDENTIALS variable in the curls below. See the API Keys page for instructions and the Quick Start for an example. All applications submitted to the Onshape App Store must authenticate with OAuth2.</description></item><item><title>Features</title><link>https://onshape-public.github.io/docs/api-adv/featureaccess/</link><pubDate>Mon, 18 May 2020 20:37:28 -0400</pubDate><guid>https://onshape-public.github.io/docs/api-adv/featureaccess/</guid><description>This page describes the APIs Onshape provides for creating and manipulating features and the Feature List in a Part Studio.
üìò Notes
This page provides sample code as curls. See the curl documentation for more information. All Onshape API calls must be properly authenticated by replacing the CREDENTIALS variable in the curls below. See the API Keys page for instructions and the Quick Start for an example. All applications submitted to the Onshape App Store must authenticate with OAuth2.</description></item><item><title>Evaluating FeatureScript</title><link>https://onshape-public.github.io/docs/api-adv/fs/</link><pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/fs/</guid><description>This page describes some of the APIs Onshape provides for evaluating FeatureScript.
üìò Notes
This page provides sample code as curls. See the curl documentation for more information. All Onshape API calls must be properly authenticated by replacing the CREDENTIALS variable in the curls below. See the API Keys page for instructions and the Quick Start for an example. All applications submitted to the Onshape App Store must authenticate with OAuth2.</description></item><item><title>Import &amp; Export</title><link>https://onshape-public.github.io/docs/api-adv/translation/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/translation/</guid><description>This page describes the APIs Onshape provides for importing files to Onshape and exporting files from Onshape into different formats. We refer to the process of importing and exporting files from one format to another as translating the files.
Onshape provides several APIs to support this format translation. These fall into three categories:
Synchronous exports - Export Onshape content to glTF, STL, or Parasolid format. Asynchronous exports - Export Onshape content into a variety of other formats.</description></item><item><title>Metadata</title><link>https://onshape-public.github.io/docs/api-adv/metadata/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/metadata/</guid><description>This page describes the APIs Onshape provides for working with document metadata.
üìò Notes
This page provides sample code as curls. See the curl documentation for more information. All Onshape API calls must be properly authenticated by replacing the CREDENTIALS variable in the curls below. See the API Keys page for instructions and the Quick Start for an example. All applications submitted to the Onshape App Store must authenticate with OAuth2.</description></item><item><title>Response Codes</title><link>https://onshape-public.github.io/docs/api-adv/errors/</link><pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/errors/</guid><description>This page details some of the response codes that may be returned by Onshape API endpoints. For each response code, we&amp;rsquo;ve provided a brief description of the response and recommended next steps.
Success (2xx) The client call was successful.
200 - OK The client call was successful. No action needed.
204 - No Content The client call was successful, and there&amp;rsquo;s nothing to return in the response body. The empty response body cannot be parsed.</description></item></channel></rss>