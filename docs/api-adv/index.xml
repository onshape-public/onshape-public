<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>– API Guides</title><link>https://onshape-public.github.io/docs/api-adv/</link><description>Recent content in API Guides on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 05 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://onshape-public.github.io/docs/api-adv/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Associativity</title><link>https://onshape-public.github.io/docs/api-adv/associativity/</link><pubDate>Mon, 18 May 2020 20:28:26 -0400</pubDate><guid>https://onshape-public.github.io/docs/api-adv/associativity/</guid><description>
&lt;p>Onshape does not expose a persistent ID for any of these entities. When the model changes, the ID may change. Therefore, Onshape provides an API to enable mapping IDs from a previous microversion to the current microversion. Assuming a simple case of maintaining associativity for a face, an abstract workflow might be:&lt;/p>
&lt;ol>
&lt;li>Read the tessellated model data.&lt;/li>
&lt;li>Select the face of interest.&lt;/li>
&lt;li>Store the Face ID and Document Microversion ID for the face.&lt;/li>
&lt;li>[ user changes model ]&lt;/li>
&lt;li>Call the REST API to translate from the known Face ID to an ID in the new model.&lt;/li>
&lt;li>Re-apply application-specific data to the face(s) in the new model. Note that a face may become zero, one or multiple faces in the new model, depending on what changes the user made.&lt;/li>
&lt;/ol>
&lt;h2 id="associativity-example">Associativity Example&lt;/h2>
&lt;ol>
&lt;li>Create a cube in Onshape:&lt;/br>
&lt;img src="https://onshape-public.github.io/images/associativityimage03.png" alt="image alt text">&lt;/li>
&lt;li>Get the document microversion ID from the URL: &lt;code>https://cad.onshape.com/api/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/microversionId&lt;/code>.&lt;/li>
&lt;li>Use the appropriate REST API to get the tessellated faces (&lt;code>getPartStudioFaces&lt;/code>)
and edges (&lt;code>getPartStudioEdges&lt;/code>}. Note the ids:
&lt;ul>
&lt;li>Part ID: &lt;code>JHD&lt;/code>&lt;/li>
&lt;li>Front face ID: &lt;code>JHO&lt;/code>&lt;/li>
&lt;li>Top edge of the front face ID: &lt;code>JHd&lt;/code>&lt;/li>
&lt;li>Right edge of the top face ID: &lt;code>JHt&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Split cube with the Front plane and translate the IDs:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/associativityimage00.png" alt="image alt text">&lt;/p>
&lt;p>&lt;strong>POST&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>https://cad.onshape.com/api/partstudios/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/e/&amp;lt;eid&amp;gt;/idtranslations
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Body&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span> : [&lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Response&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;documentId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;748d6e850c9248328189922b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;elementId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;042a6fa54e79451e8076463d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;SPLIT&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JID&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JIH&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;SPLIT&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JI5&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JI9&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;targetDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;78bc7f3fcf82475085c2f3ab&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Delete one of the parts, and translate the IDs:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/associativityimage01.png" alt="image alt text">&lt;/p>
&lt;p>&lt;strong>POST&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>https://cad.onshape.com/api/partstudios/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/e/&amp;lt;eid&amp;gt;/idtranslations
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Body&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span> : [&lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Response&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;documentId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;748d6e850c9248328189922b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;elementId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;042a6fa54e79451e8076463d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JID&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;FAILED_TO_RESOLVE&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;FAILED_TO_RESOLVE&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JI5&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;targetDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;52aa74d34b624f3aaef33204&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Roll back the delete and the split, and translate the IDs:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://onshape-public.github.io/images/associativityimage02.png" alt="image alt text">&lt;/p>
&lt;p>&lt;strong>POST&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>https://cad.onshape.com/api/partstudios/d/&amp;lt;docid&amp;gt;/w/&amp;lt;wid&amp;gt;/e/&amp;lt;eid&amp;gt;/idtranslations
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Body&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span> : &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span> : [&lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Response&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;documentId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;748d6e850c9248328189922b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;elementId&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;042a6fa54e79451e8076463d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;sourceDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;47e75ab2ee8b4356a76ebd47&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;ids&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHD&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JID&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JHO&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JHd&amp;#34;&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;OK&amp;#34;&lt;/span>, &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: [&lt;span style="color:#a50">&amp;#34;JHt&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1e90ff;font-weight:bold">&amp;#34;targetDocumentMicroversion&amp;#34;&lt;/span>: &lt;span style="color:#a50">&amp;#34;52aa74d34b624f3aaef33204&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Billing</title><link>https://onshape-public.github.io/docs/api-adv/billing/</link><pubDate>Mon, 18 May 2020 20:29:36 -0400</pubDate><guid>https://onshape-public.github.io/docs/api-adv/billing/</guid><description>
&lt;p>This document describes APIs that will allow partners to interact with the Onshape billing system.&lt;/p>
&lt;p>Please address questions to &amp;ldquo;&lt;a href="mailto:api-support@onshape.com">api-support@onshape.com&lt;/a>&amp;rdquo; for the fastest response.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>All billing is done through &amp;ldquo;plans&amp;rdquo; that are created in the Developer Portal. A “plan” has the following attributes:&lt;/p>
&lt;table>
&lt;tr>
&lt;td>Name (also called SKU)&lt;/td>
&lt;td>A unique (within your company) plan name&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Description&lt;/td>
&lt;td>A user-visible description of the plan&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Amount&lt;/td>
&lt;td>The cost of the plan (may be one-time or recurring, depending on the type)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Type&lt;/td>
&lt;td>Monthly, One-time or Consumable&lt;/td>
&lt;/tr>
&lt;/table>
&lt;p>Onshape defines three kinds of plans:&lt;/p>
&lt;table>
&lt;tr>
&lt;td>Plan type&lt;/td>
&lt;td>Description&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Recurring
(Monthly Subscription)&lt;/td>
&lt;td>A plan that is renewed monthly at a fixed cost. All Apps in the app store must have a Free monthly plan (which is created by default), and may have additional paid plans.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>One-time&lt;/td>
&lt;td>A plan that is purchased once (not renewed monthly). A user may purchase these multiple times.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Consumable&lt;/td>
&lt;td>A plan that represents a consumable unit, such as "hours of rendering" or “simulation runs”. Consumable plans are not fully implemented at this time, but the consumable functionality can be implemented using One-time Purchase plans as described below.&lt;/td>
&lt;/tr>
&lt;/table>
&lt;p>Users may purchase plans through the App Store interface. In addition, if your application has the OAuth Purchase Scope, your application can initiate &amp;ldquo;in-app&amp;rdquo; purchases by calling Onshape to request a purchase.&lt;/p>
&lt;p>The basic steps for interacting with Onshape Billing:&lt;/p>
&lt;ol>
&lt;li>Define one or more plans using the Developer Portal interface&lt;/li>
&lt;li>Use the Onshape API to determine the current user’s plan&lt;/li>
&lt;li>Provide features and/or limits based on the current plan&lt;/li>
&lt;/ol>
&lt;h2 id="using-the-onshape-billing-api">Using the Onshape Billing API&lt;/h2>
&lt;p>&lt;code>GET /api/accounts/purchases&lt;/code>&lt;/p>
&lt;p>Returns a list of purchase made by the current user for plans owned by the current application. Use this information to determine what capabilities or features the user is entitled to use.&lt;/p>
&lt;p>&lt;code>DELETE /api/accounts/purchases/&amp;lt;purchase id&amp;gt;&lt;/code>&lt;/p>
&lt;p>Cancel a recurring purchase.&lt;/p>
&lt;p>&lt;code>POST /api/accounts/purchases/&amp;lt;purchase id&amp;gt;/consume&lt;/code>&lt;/p>
&lt;p>Indicate the use of a consumable. (Not fully implemented at this time)&lt;/p>
&lt;p>&lt;code>GET /api/billing/plans/client/&amp;lt;client id&amp;gt;&lt;/code>&lt;/p>
&lt;p>Get a list of the billing plans defined for this client.&lt;/p>
&lt;h2 id="initiating-a-purchase-from-an-application-in-app-purchases">Initiating a purchase from an application (in-app purchases)&lt;/h2>
&lt;p>To initiate a purchase of a subscription or one time item you must set the browser’s location to particular URL within the Onshape stack:&lt;/p>
&lt;p>&lt;code>https://cad.onshape.com/billing/purchase?redirectUri=RRRR&amp;amp;clientId=CCCC&amp;amp;sku=SSSS&amp;amp;userId=UUUU&lt;/code>&lt;/p>
&lt;p>Each of the query parameters should be URL encoded. The clientId is your application’s OAuth Client ID, the sku is the name/sku field for an item (you can find this in the developer portal or it’s retrievable through the /api/billing/plans REST endpoints). The user Id should be the Onshape user Id for the current user and is available through the /api/users/session REST endpoint. The redirectUri is the URI the user will be returned to within your website when the purchase is finished.&lt;/p>
&lt;p>When the browser’s location is changed to this pattern the Onshape stack will serve content to confirm the users identity, confirm the details of what is being purchased (or obtained if the item is free) and then after the user agrees to the purchase will confirm the transaction (with our payment processor if the item is not free) and then redirect the user back to the supplied redirectUri (the browser location will be changed to the redirectUri). Additionally Onshape will add a &lt;code>success=true&lt;/code> or &lt;code>success=false&lt;/code> query parameter to the redirectURI indicating whether the user completed successfully (payment was taken if required etc.) or failed, either due to cancelling the purchase or an issue with payment.&lt;/p>
&lt;p>When the browser fetches the redirectUri your application must call back through the &lt;code>/api/account/purchases&lt;/code> API to get confirmation of the purchase - do NOT assume that a fetch of the redirectUri with a &lt;code>success=true&lt;/code> query parameter actually indicates a purchase has occurred. Query the Onshape stack with the &lt;code>/api/account/purchases&lt;/code> API to ensure that the required item has actually been bought.&lt;/p>
&lt;h2 id="consumable-items">Consumable Items&lt;/h2>
&lt;p>A detailed description of the interface for managing consumable purchases will be provided shortly. You can use one-time plans to achieve similar results:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Define a one-time purchase plan with a description indicating the nature of the purchase, for example:&lt;/p>
&lt;p>RENDER-10 Ten rendering hours $100&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Keep track of the number of hours that the user has consumed. You can store and retrieve this information in Onshape using the following APIs. These APIs allow you to store and retrieve arbitrary information on a per-user basis.&lt;/p>
&lt;p>POST /applications/clients/:cid/settings/users/:uid
GET /applications/clients/:cid/settings/users/:uid&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check the number of available &amp;ldquo;units&amp;rdquo; by getting the purchases and the record of consumables. Be sure to include UI in your application that the user can use to see their remaining quantity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Alternately, you can store the consumption data in your own system; you do not need to use the Onshape API to manage that data.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Onshape intends to provide a richer set of APIs that help track the purchase and consumption of consumables in the near future.&lt;/p>
&lt;h2 id="other-billing-models">Other billing models&lt;/h2>
&lt;p>You can use these mechanisms to implement other models. For example, a time-limited trial could be implemented by scanning purchases for the first &amp;ldquo;purchase&amp;rdquo; and denying service if it is more than a defined number of days in the past. A “fixed number of uses per month” could be implemented as a monthly subscription, string usage data with the settings API, and denying service after a fixed number of uses.&lt;/p>
&lt;h2 id="samples">Samples&lt;/h2>
&lt;p>Onshape will provide sample code for both desktop and integrated applications demonstrating the use of the billing APIs and workflow. If you are subscribed to the Onshape Github Partner group, you will have access to those samples as soon as they are posted.&lt;/p>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>Please contact &lt;a href="mailto:api-support@onshape.com">api-support@onshape.com&lt;/a> to discuss details of testing billing &amp;amp; subscriptions.&lt;/p></description></item><item><title>Docs: Configurations</title><link>https://onshape-public.github.io/docs/api-adv/configs/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/configs/</guid><description>
&lt;p>This page describes the APIs Onshape provides for working with &lt;a href="https://cad.onshape.com/help/Content/configurations.htm">Configurations&lt;/a>.&lt;/p>
&lt;p>You can use Configurations to create variations of entire Part Studios, Assemblies, specific parts and more. You can configure feature and parameter values, part properties, custom part properties, face and part appearances, and sketch text. Each Part Studio can have only one Configuration, but it can contain multiple Configuration inputs. The Configuration inputs you define for a Part Studio become options when inserting that Part Studio into an Assembly or Drawing. You can also create your own Configurations for an Assembly, regardless of any existing Part Studio Configurations. Assembly Configurations work the same way as Part Studio Configurations, but are limited to configuring Mates (&lt;em>not&lt;/em> Mate connectors), instances, and patterns.&lt;/p>
&lt;blockquote>
&lt;p>📘 &lt;strong>Notes&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>This page provides sample code as curls. See the &lt;a href="https://curl.se/docs/">curl documentation&lt;/a> for more information.&lt;/li>
&lt;li>All Onshape API calls must be properly authenticated by replacing the &lt;code>CREDENTIALS&lt;/code> variable in the curls below. See the &lt;a href="https://onshape-public.github.io/docs/auth/apikeys">API Keys&lt;/a> page for instructions and the &lt;a href="https://onshape-public.github.io/docs/api-intro/quickstart">Quick Start&lt;/a> for an example. All applications submitted to the Onshape App Store &lt;em>must&lt;/em> authenticate with &lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth2&lt;/a>.&lt;/li>
&lt;li>This documentation refers to Onshape IDs in the following format: &lt;code>{did}, {wid}, {eid}, {pid}, {otherId}&lt;/code>. These represent document, workspace, element, part, and other IDs (respectively) that are needed make the API calls. We sometimes abbreviate these variables as &lt;code>DWVEM&lt;/code> Please see &lt;a href="https://onshape-public.github.io/docs/api-intro/#onshape-api-request">API Guide: API Intro&lt;/a> for information on what these IDs mean and how to obtain them from your documents. Never include the curly braces (&lt;code>{}&lt;/code>) in your API calls.&lt;/li>
&lt;li>For Enterprise accounts, replace &lt;strong>&lt;font color="slate">cad&lt;/font>&lt;/strong> in all Onshape URLs with your company domain.
https://&lt;font color="slate">&lt;strong>cad&lt;/strong>&lt;/font>.onshape.com &amp;gt; https://&lt;font color="slate">&lt;strong>companyName&lt;/strong>&lt;/font>.onshape.com&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="endpoints">Endpoints&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Element/getConfiguration">Element/getConfiguration&lt;/a>: Get the configuration data for a Part Studio or Assembly.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/elements/d/{did}/wvm/{wvmid}/e/{eid}/configuration&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;\
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Element/updateConfiguration">Element/updateConfiguration&lt;/a>: Update the configuration data for a Part Studio or Assembly.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/elements/d/{did}/wvm/{wvmid}/e/{eid}/configuration&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;\
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{ }&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Element/decodeConfiguration">Element/decodeConfiguration&lt;/a>: Process an encoded configuration file.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/elements/d/{did}/wvm/{wvmid}/e/{eid}/configurationencodings/{encodingId}&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Element/encodeConfigurationMap">Element/encodeConfigurationMap&lt;/a>: Create an encoded map of configurations.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/elements/d/{did}/e/{eid}/configurationencodings&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;\
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;parameterId&amp;#34;: &amp;#34;{parameterId}&amp;#34;,
&amp;#34;parameterValue&amp;#34;: &amp;#34;{configValue}&amp;#34;
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h3 id="encoded-configuration-strings">Encoded Configuration Strings&lt;/h3>
&lt;p>The &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Element/encodeConfigurationMap">Element/encodeConfigurationMap&lt;/a> and &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Element/decodeConfiguration">Element/decodeConfiguration&lt;/a> APIs convert parameters from JSON to a URL-encoded string in the following format: &lt;code>&amp;quot;configuration=parameterId%3DparameterValue&amp;quot;&lt;/code>&lt;/p>
&lt;p>For example,&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;parameterId&amp;#34;: &amp;#34;List_izOjbm5HCRXEld&amp;#34;,
&amp;#34;parameterValue&amp;#34;: &amp;#34;_500_mm&amp;#34;
}
]
}
&lt;/code>&lt;/pre>&lt;p>encodes to:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;configuration=List_izOjbm5HCRXEld%3D_500_mm&amp;#34;
&lt;/code>&lt;/pre>&lt;p>and:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;configuration=List_izOjbm5HCRXEld%3DDefault&amp;#34;
&lt;/code>&lt;/pre>&lt;p>decodes to:&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;parameterId&amp;#34;: &amp;#34;List_izOjbm5HCRXEld&amp;#34;,
&amp;#34;parameterValue&amp;#34;: &amp;#34;Default&amp;#34;
}
]
}
&lt;/code>&lt;/pre>&lt;h2 id="sample-workflows">Sample Workflows&lt;/h2>
&lt;p>These sample workflows all build off one another. Completing all of the workflows will take you step-by-step through the process of getting Configuration information, encoding the information for use, and using the encoded configuration to create a configured export. You can also watch the &lt;a href="#workflow-video">video&lt;/a> to see the entire workflow in the Glassworks API Explorer.&lt;/p>
&lt;h3 id="get-a-configuration">Get a Configuration&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll use the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Element/getConfiguration">Element/getConfiguration&lt;/a> endpoint to get the Configuration information from a Part Studio.&lt;/p>
&lt;ol>
&lt;li>Make a copy of &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/958bceb5a2511b572dbbe851">this public document&lt;/a>. Make a note of the new document&amp;rsquo;s document ID, workspace ID, and element ID.&lt;/li>
&lt;li>Click the Configurations dropdown in the Features list, and observe that there are two options for the drillbit length, &lt;code>250 mm&lt;/code> and &lt;code>500 mm&lt;/code>.
&lt;/br>&lt;/br>&lt;img src="https://onshape-public.github.io/images/configs-example-ui.png" alt=" " width=550>&lt;/li>
&lt;li>Set up a call to the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Element/getConfiguration">Element/getConfiguration&lt;/a> endpoint to get the Configuration for the Part Studio. Don&amp;rsquo;t forget to replace the URL parameters with the IDs from your copy of the document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/elements/d/{did}/w/{wid}/e/{eid}/configuration&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Review the Configuration information detailed in the response. You can see that the Part Studio contains one configuration (&lt;code>Drill_Bit_Length&lt;/code>) with two options (&lt;code>250 mm&lt;/code> and &lt;code>500 mm&lt;/code>):
&lt;pre tabindex="0">&lt;code>{
&amp;#34;btType&amp;#34;: &amp;#34;BTConfigurationResponse-2019&amp;#34;,
&amp;#34;currentConfiguration&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterEnum-145&amp;#34;,
&amp;#34;namespace&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;nodeId&amp;#34;: &amp;#34;{nodeId1}&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;Default&amp;#34;,
&amp;#34;enumName&amp;#34;: &amp;#34;{paramId_conf}&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;{paramId}&amp;#34;
}
],
&amp;#34;configurationParameters&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMConfigurationParameterEnum-105&amp;#34;,
&amp;#34;defaultValue&amp;#34;: &amp;#34;Default&amp;#34;,
&amp;#34;enumName&amp;#34;: &amp;#34;{enumName}&amp;#34;,
&amp;#34;namespace&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;options&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMEnumOption-592&amp;#34;,
&amp;#34;optionName&amp;#34;: &amp;#34;250 mm&amp;#34;,
&amp;#34;option&amp;#34;: &amp;#34;Default&amp;#34;,
&amp;#34;nodeId&amp;#34;: &amp;#34;{nodeId2}&amp;#34;
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMEnumOption-592&amp;#34;,
&amp;#34;optionName&amp;#34;: &amp;#34;500 mm&amp;#34;,
&amp;#34;option&amp;#34;: &amp;#34;_500_mm&amp;#34;,
&amp;#34;nodeId&amp;#34;: &amp;#34;{nodeId3}&amp;#34;
}
],
&amp;#34;isCosmetic&amp;#34;: false,
&amp;#34;parameterId&amp;#34;: &amp;#34;{paramId}&amp;#34;,
&amp;#34;parameterName&amp;#34;: &amp;#34;Drill_Bit_Length&amp;#34;,
&amp;#34;nodeId&amp;#34;: &amp;#34;{nodeId4}&amp;#34;
}
],
&amp;#34;serializationVersion&amp;#34;: &amp;#34;1.2.0&amp;#34;,
&amp;#34;sourceMicroversion&amp;#34;: &amp;#34;{mid}&amp;#34;,
&amp;#34;microversionSkew&amp;#34;: false,
&amp;#34;rejectMicroversionSkew&amp;#34;: false,
&amp;#34;libraryVersion&amp;#34;: 2296
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h3 id="encode-a-configuration-string">Encode a configuration string&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll encode a Configuration so it can be used as part of a translation (i.e., an export). Please read the &lt;a href="#encoded-configuration-strings">Encoded Configuration Strings&lt;/a> section before beginning this example.&lt;/p>
&lt;ol>
&lt;li>This example builds off the previous one. Please complete the &lt;a href="#get-a-configuration">Get a Part Studio Configuration&lt;/a> workflow to obtain the raw Configuration output for the Part Studio.&lt;/li>
&lt;li>Set up a call to the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Element/encodeConfigurationMap">Element/encodeConfigurationMap&lt;/a> endpoint. Don&amp;rsquo;t forget to replace the URL parameters with the IDs from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/elements/d/{did}/e/{eid}/configurationencodings&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{ }&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Now we need to create our JSON body for the request. Note the structure of the body:
&lt;pre tabindex="0">&lt;code>{
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;parameterId&amp;#34;: &amp;#34;string&amp;#34;,
&amp;#34;parameterValue&amp;#34;: &amp;#34;string&amp;#34;
}
],
&amp;#34;standardContentParametersId&amp;#34;: &amp;#34;string&amp;#34;
}
&lt;/code>&lt;/pre>Fill out the request body with our information:
&lt;ul>
&lt;li>We&amp;rsquo;re not using a standard content part, so we can delete the second key/value pair.&lt;/li>
&lt;li>The parameterId can be found in the response from the previous example. It usually begins with (&lt;code>List_&lt;/code>)&lt;/li>
&lt;li>For the parameter value, we&amp;rsquo;ll enter one of our configuration options from the previous example. In this case, we&amp;rsquo;ll use &lt;code>_500_mm&lt;/code> to export a 500 mm drillbit part.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;parameterId&amp;#34;: &amp;#34;{parameterId}&amp;#34;,
&amp;#34;parameterValue&amp;#34;: &amp;#34;_500_mm&amp;#34;
}
]
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Now we can make our call:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/elements/d/{did}/e/{eid}/configurationencodings&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;parameterId&amp;#34;: &amp;#34;{parameterId}&amp;#34;,
&amp;#34;parameterValue&amp;#34;: &amp;#34;_500_mm&amp;#34;
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>The call responds with two values: the ID of the encoding, and the encoded configuration string. We can use this configuration string (returned in the &lt;code>queryParam&lt;/code> field) any time we want to specify the 500 mm drillbit length.
&lt;pre tabindex="0">&lt;code>{
&amp;#34;encodedId&amp;#34;: &amp;#34;{encodedId}&amp;#34;,
&amp;#34;queryParam&amp;#34;: &amp;#34;configuration={configString}&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h3 id="export-a-configured-part">Export a configured part&lt;/h3>
&lt;p>In this example, we will export a configured part. We have a drillbit with two configurations: &lt;code>250 mm&lt;/code> and &lt;code>500 mm&lt;/code> lengths. To export a 500 mm drillbit, we can specify the configuration as part of the export.&lt;/p>
&lt;ol>
&lt;li>This example builds off the previous two. Please complete this exercise after the &lt;a href="#encode-a-configuration">Encode a configuration&lt;/a> workflow.&lt;/li>
&lt;li>Next, set up a call to the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/exportParasolid">PartStudio/exportParasolid&lt;/a> endpoint. Don&amp;rsquo;t forget to replace the URL parameters with the IDs from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials. Note that this endpoint includes an optional &lt;code>configuration&lt;/code> parameter. This is where we&amp;rsquo;ll enter the configuration string we found in the previous example.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/partstudios/d/{did}/w/{wid}/e/{eid}/parasolid?version=0&amp;amp;includeExportIds=false&amp;amp;configuration={configString}&amp;amp;binaryExport=false&amp;#39; \
-H &amp;#39;Accept: */*&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>This endpoint returns a redirect URL. Navigate to the returned URL in your browser to download the export.
&lt;ul>
&lt;li>Hint: The URL will look something like this, but with different IDs:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>https://cad.onshape.com/api/v6/partstudios/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/958bceb5a2511b572dbbe851/parasolid?version=0&amp;amp;includeExportIds=false&amp;amp;configuration=List_izOjbm5HCRXEld%253D_500_mm&amp;amp;binaryExport=false
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Now we need to import our Parasolid to confirm the correct configuration was used. Open your document in the Onshape UI, click the Insert new tab button, and then select Import.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/configs-insert-menu.png" alt="Insert new tab menu with Import highlighted in Onshape UI" width=250>&lt;/li>
&lt;li>Navigate to the export you downloaded (with the &lt;code>.x_t&lt;/code> extension) and import it into Onshape.&lt;/li>
&lt;li>Use the measure tool to confirm the length of the imported drillbit is 500 mm.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/configs-measure-tool.png" alt="Measure tool in Onshape UI showing drill length as 500 mm" width=400>&lt;/li>
&lt;/ol>
&lt;h2 id="workflow-video">Workflow Video&lt;/h2>
&lt;p>This video demonstrates how to complete the above tutorials in the Onshape API Explorer.
&lt;/br>&lt;/p>
&lt;p>
&lt;div class="wistia_responsive_padding" style="padding:77.08% 0 0 0;position:relative;">&lt;div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;">&lt;iframe src="https://fast.wistia.net/embed/iframe/o4pvoyjwuk?seo=true&amp;videoFoam=true" title="configs-export-example Video" allow="autoplay; fullscreen" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" msallowfullscreen width="100%" height="100%">&lt;/iframe>&lt;/div>&lt;/div>
&lt;script src="https://fast.wistia.net/assets/external/E-v1.js" async>&lt;/script>
&lt;/p>
&lt;h2 id="additional-resources">Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Element">API Explorer: Configurations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/api-intro/explorer">API Guide: API Explorer&lt;/a>&lt;/li>
&lt;li>&lt;a href="%5Bconfigurations%5D(https://cad.onshape.com/help/Content/configurations.htm)">Onshape Help: Configurations&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Drawings</title><link>https://onshape-public.github.io/docs/api-adv/drawings/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/drawings/</guid><description>
&lt;p>This page describes the APIs Onshape provides for creating and manipulating Onshape drawings.&lt;/p>
&lt;blockquote>
&lt;p>📘 &lt;strong>Notes&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>This page provides sample code as curls. See the &lt;a href="https://curl.se/docs/">curl documentation&lt;/a> for more information.&lt;/li>
&lt;li>All Onshape API calls must be properly authenticated by replacing the &lt;code>CREDENTIALS&lt;/code> variable in the curls below. See the &lt;a href="https://onshape-public.github.io/docs/auth/apikeys">API Keys&lt;/a> page for instructions and the &lt;a href="https://onshape-public.github.io/docs/api-intro/quickstart">Quick Start&lt;/a> for an example. All applications submitted to the Onshape App Store &lt;em>must&lt;/em> authenticate with &lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth2&lt;/a>.&lt;/li>
&lt;li>This documentation refers to Onshape IDs in the following format: &lt;code>{did}, {wid}, {eid}, {pid}, {otherId}&lt;/code>. These represent document, workspace, element, part, and other IDs (respectively) that are needed make the API calls. We sometimes abbreviate these variables as &lt;code>DWVEM&lt;/code> Please see &lt;a href="https://onshape-public.github.io/docs/api-intro/#onshape-api-request">API Guide: API Intro&lt;/a> for information on what these IDs mean and how to obtain them from your documents. Never include the curly braces (&lt;code>{}&lt;/code>) in your API calls.&lt;/li>
&lt;li>For Enterprise accounts, replace &lt;strong>&lt;font color="slate">cad&lt;/font>&lt;/strong> in all Onshape URLs with your company domain.
https://&lt;font color="slate">&lt;strong>cad&lt;/strong>&lt;/font>.onshape.com &amp;gt; https://&lt;font color="slate">&lt;strong>companyName&lt;/strong>&lt;/font>.onshape.com&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="endpoints">Endpoints&lt;/h2>
&lt;p>To create drawings, Onshape allows you to send all drawing data points and information through the API as part of the request body JSON.&lt;/p>
&lt;p>The following endpoints are available:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingAppElement">Create a drawing&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;lt;JSON request body options from the BTDrawingParams schema&amp;gt;
}&amp;#39;
&lt;/code>&lt;/pre>Specify the document in which to create the drawing in the URL, and pass any additional options as part of the request body. You can provide a name for the drawing, manipulate the drawing graphics area, specify a part or template to create the drawing from, and more.
&lt;ul>
&lt;li>See documentation for all available options in the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingAppElement">API Explorer&lt;/a>.&lt;/li>
&lt;li>For instructions on viewing the documentation for the request body schemas, see our &lt;a href="https://onshape-public.github.io/docs/api-intro/explorer#view-request-body-docs">API Explorer&lt;/a> page.
Check out the &lt;a href="#sample-workflows">Sample Workflows&lt;/a> section below for some practical examples.&lt;p>&lt;/br>
&lt;img src="https://onshape-public.github.io/images/BTDrawingParamsSchema.png" alt="BTDrawingParams schema in the createDrawingAppElement endpoint">&lt;/br>&lt;/p>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/modifyDrawing">Modify a drawing&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;description&amp;#34;: &amp;#34;Description of the modification.&amp;#34;,
&amp;#34;jsonRequests&amp;#34;: [
{
&amp;lt;JSON request body options from the jsonRequests schema&amp;gt;
}
]
}&amp;#39;
&lt;/code>&lt;/pre>Specify the drawing to modify in the URL, and pass the information on the modification in the request body. Note that the &lt;code>jsonRequests&lt;/code> schema is not defined in the Glassworks API Explorer; see the &lt;a href="https://github.com/onshape-public/onshapedrawingjson">OnshapeDrawingJson&lt;/a> repository for this information, and check out the &lt;a href="#sample-workflows">Sample Workflows&lt;/a> section below for some practical examples.&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/getModificationStatus">Get the drawing modification status&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/modify/status/{mrid}
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>Provide the modification ID (from the &lt;code>modifyDrawing&lt;/code> response body) to get the status of the modification.&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingTranslation">Translate a drawing&lt;/a>: See the &lt;a href="https://onshape-public.github.io/docs/api-adv/translation#export-a-drawing-as-a-json">Translations API Guide&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/getDrawingTranslatorFormats">Get drawing translation formats&lt;/a>: See the &lt;a href="https://onshape-public.github.io/docs/api-adv/translation#export-a-drawing-as-a-json">Translations API Guide&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="sample-app">Sample App&lt;/h2>
&lt;p>Please see the &lt;a href="https://github.com/onshape-public/onshape-ts-drawing-client">Onshape TypeScript Drawing Client&lt;/a> for a working example of using the Onshape Drawing APIs in an application.&lt;/p>
&lt;h2 id="sample-workflows">Sample Workflows&lt;/h2>
&lt;h3 id="create-a-drawing-from-a-part">Create a drawing from a part&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll create a drawing from the &lt;strong>FLYWHEEL&lt;/strong> part in &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/v/405ba186c3a70e0227ab2941/e/6bed6b43463f6a46a37b4a22">this public document&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>Create or open an Onshape document in which to create your drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingAppElement">Drawings/createDrawingAppElement&lt;/a> call. Replace &lt;code>{did}&lt;/code> and &lt;code>{wid}&lt;/code> in the URL below with the document ID and workspace ID of your document (i.e., the &lt;em>target&lt;/em> document), and replace &lt;code>CREDENTIAL&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add the request body information:
&lt;ul>
&lt;li>Add &lt;code>flywheelDrawing&lt;/code> as the &lt;code>drawingName&lt;/code> field.&lt;/li>
&lt;li>We must specify the &lt;em>source&lt;/em> document&amp;rsquo;s document and version IDs. Note that since our target document and source document are different, we use the &lt;code>external&lt;/code> document and version ID fields.&lt;/li>
&lt;li>We must also provide the ID of the part to create the drawing from, and the ID of the element (i.e., tab) in which the part lives.
&lt;/br>
(Hint: You can call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/getPartsWMVE">Part/getPartsWMVE&lt;/a> to get a list of part IDs in an element.)&lt;/br>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;drawingName&amp;#34;: &amp;#34;flywheelDrawing&amp;#34;,
&amp;#34;externalDocumentId&amp;#34;: &amp;#34;e60c4803eaf2ac8be492c18e&amp;#34;,
&amp;#34;externalDocumentVersionId&amp;#34;: &amp;#34;405ba186c3a70e0227ab2941&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;6bed6b43463f6a46a37b4a22&amp;#34;,
&amp;#34;partId&amp;#34;: &amp;#34;JiD&amp;#34;
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Call the endpoint and open your document. Confirm that you see the new &lt;code>flywheelDrawing&lt;/code> element containing the drawing:
&lt;/br>&lt;img src="https://onshape-public.github.io/images/flywheelDrawingExample1.png" alt="new drawing created from a part in an external document" width=650>&lt;/li>
&lt;/ol>
&lt;h3 id="create-a-drawing-from-a-template">Create a drawing from a template&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll create a drawing from the standard ANSI template in &lt;a href="https://cad.onshape.com/documents/cbe6e776694549b5ba1a3e88/w/24d08acf10234dbc8d3ab585/e/17eef7862b224f6fb12cbc46">this public document&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>Open any Onshape document in which to create your drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingAppElement">Drawings/createDrawingAppElement&lt;/a> call. Replace &lt;code>{did}&lt;/code> and &lt;code>{wid}&lt;/code> in the URL below with the document ID and workspace ID of your document (i.e., the &lt;em>target&lt;/em> document), and replace &lt;code>CREDENTIAL&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add the request body information:
&lt;ul>
&lt;li>Add &lt;code>templateAnsiDrawing&lt;/code> as the &lt;code>drawingName&lt;/code> field.&lt;/li>
&lt;li>We must specify the &lt;em>source&lt;/em> document&amp;rsquo;s document ID and workspace ID.&lt;/li>
&lt;li>We must also provide the ID of the element (i.e., tab) in which the template lives.&lt;/li>
&lt;li>Note that we use the &lt;code>template&lt;/code> document, workspace, and element ID fields when referring to a specific template for drawing creation.
&lt;/br>
&lt;pre tabindex="0">&lt;code>curl &amp;#39;https://cad.onshape.com/api/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json, text/plain, */*&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8&amp;#39; \
-d &amp;#39;{
&amp;#34;drawingName&amp;#34;: &amp;#34;templateAnsiDrawing&amp;#34;,
&amp;#34;templateDocumentId&amp;#34;:&amp;#34;cbe6e776694549b5ba1a3e88&amp;#34;,
&amp;#34;templateWorkspaceId&amp;#34;:&amp;#34;24d08acf10234dbc8d3ab585&amp;#34;,
&amp;#34;templateElementId&amp;#34;:&amp;#34;17eef7862b224f6fb12cbc46&amp;#34;
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Call the endpoint and open your document. Confirm that you see the new &lt;code>templateAnsiDrawing&lt;/code> element containing the emtpy drawing template.&lt;/li>
&lt;/ol>
&lt;h3 id="create-a-drawing-in-a-custom-graphics-area">Create a drawing in a custom graphics area&lt;/h3>
&lt;ol>
&lt;li>Open any Onshape document in which to create your drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingAppElement">Drawings/createDrawingAppElement&lt;/a> call. Replace &lt;code>{did}&lt;/code> and &lt;code>{wid}&lt;/code> in the URL below with your document, and replace &lt;code>CREDENTIAL&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add information about the drawings area. In this example, we&amp;rsquo;ll add an additional column and row to the drawings area, a title block, and add a border around it.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/create&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;drawingName&amp;#34;: &amp;#34;customGraphicsArea&amp;#34;,
&amp;#34;border&amp;#34;: &amp;#34;true&amp;#34;,
&amp;#34;numberHorizontalZones&amp;#34;: &amp;#34;3&amp;#34;,
&amp;#34;numberVerticalZones&amp;#34;: &amp;#34;3&amp;#34;
&amp;#34;titleblock&amp;#34;: true
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Call the endpoint and open your document. Confirm that you see the new &lt;code>customGraphicsArea&lt;/code> element:
&lt;/br>&lt;img src="https://onshape-public.github.io/images/customDrawingArea.png" alt="new drawing created with border and extra column and row" width=550>&lt;/li>
&lt;/ol>
&lt;h3 id="add-a-note-to-a-drawing">Add a note to a drawing&lt;/h3>
&lt;ol>
&lt;li>Open an existing (or create a new) Onshape document with a drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/modifyDrawing">Drawings/modifyDrawing&lt;/a> call. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add information about the modification. In this example, we&amp;rsquo;ll create an &lt;code>Onshape::Note&lt;/code> on the drawing. We must specify the &lt;code>messageName&lt;/code> and &lt;code>formatVersion&lt;/code> for the modification, and then provide the contents and size of the annotation.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;description&amp;#34;: &amp;#34;Add a note to the drawing.&amp;#34;,
&amp;#34;jsonRequests&amp;#34;: [ {
&amp;#34;messageName&amp;#34;: &amp;#34;onshapeCreateAnnotations&amp;#34;,
&amp;#34;formatVersion&amp;#34;: &amp;#34;2021-01-01&amp;#34;,
&amp;#34;annotations&amp;#34;: [
{
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Note&amp;#34;,
&amp;#34;note&amp;#34;: {
&amp;#34;position&amp;#34;: {
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Reference::Point&amp;#34;,
&amp;#34;coordinate&amp;#34;: [
1,
10,
0
]
},
&amp;#34;contents&amp;#34;: &amp;#34;This is a note&amp;#34;,
&amp;#34;textHeight&amp;#34;: 0.2,
&amp;#34;logicalId&amp;#34;: &amp;#34;note1&amp;#34;
}
}
]
}]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Make the call, and then get &lt;code>id&lt;/code> from the response body. You&amp;rsquo;ll need this to poll the modification status to figure out when the modification has completed.&lt;/li>
&lt;li>Set up the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/getModificationStatus">Drawings/getModificationStatus&lt;/a> call. Replace &lt;code>{mrid}&lt;/code> with the &lt;code>id&lt;/code> from the last step, and replace &lt;code>CREDENTIALS&lt;/code> with your credentials. Poll the modification status until the response returns &lt;code>&amp;quot;requestState&amp;quot;: &amp;quot;DONE&amp;quot;&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/modify/status/{mrid}&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open your drawing and confirm that you see the new note. Note that your drawing may not match this image exactly, depending on your drawing and document properties. This sample document uses Inches for units.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/drawings-addnote.png" alt="drawing with note annotation" width=550>&lt;/li>
&lt;/ol>
&lt;h3 id="add-a-callout-to-a-drawing">Add a callout to a drawing&lt;/h3>
&lt;ol>
&lt;li>Open an existing (or create a new) Onshape document with a drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/modifyDrawing">Drawings/modifyDrawing&lt;/a> call. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add information about the modification. In this example, we&amp;rsquo;ll add an &lt;code>Onshape::Callout&lt;/code> to the drawing. We must specify the &lt;code>messageName&lt;/code> and &lt;code>formatVersion&lt;/code> for the modification, and then provide the contents and size of the annotation:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;description&amp;#34;: &amp;#34;Add a callout to the drawing.&amp;#34;,
&amp;#34;jsonRequests&amp;#34;: [ {
&amp;#34;messageName&amp;#34;: &amp;#34;onshapeCreateAnnotations&amp;#34;,
&amp;#34;formatVersion&amp;#34;: &amp;#34;2021-01-01&amp;#34;,
&amp;#34;annotations&amp;#34;: [
{
&amp;#34;callout&amp;#34;:
{
&amp;#34;borderShape&amp;#34;: &amp;#34;Circle&amp;#34;,
&amp;#34;borderSize&amp;#34;: 0,
&amp;#34;contents&amp;#34;: &amp;#34;Example Callout&amp;#34;,
&amp;#34;contentsBottom&amp;#34;: &amp;#34;bottom&amp;#34;,
&amp;#34;contentsLeft&amp;#34;: &amp;#34;left&amp;#34;,
&amp;#34;contentsRight&amp;#34;: &amp;#34;right&amp;#34;,
&amp;#34;contentsTop&amp;#34;: &amp;#34;top&amp;#34;,
&amp;#34;position&amp;#34;: {
&amp;#34;coordinate&amp;#34;: [
2.5,
6,
0
],
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Reference::Point&amp;#34;
},
&amp;#34;textHeight&amp;#34;: 0.12,
&amp;#34;logicalId&amp;#34;: &amp;#34;callout1&amp;#34;
},
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Callout&amp;#34;
}
]
}]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Make the call, and then get &lt;code>id&lt;/code> from the response body. You&amp;rsquo;ll need this to poll the modification status to figure out when the modification has completed.&lt;/li>
&lt;li>Set up the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/getModificationStatus">Drawings/getModificationStatus&lt;/a> call. Replace &lt;code>{mrid}&lt;/code> with the &lt;code>id&lt;/code> from the last step, and replace &lt;code>CREDENTIALS&lt;/code> with your credentials. Poll the modification status until the response returns &lt;code>&amp;quot;requestState&amp;quot;: &amp;quot;DONE&amp;quot;&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/modify/status/{mrid}&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open your drawing and confirm that you see the new callout.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/drawings-addcallout.png" alt="callout added to drawing" width=550>&lt;/li>
&lt;/ol>
&lt;h3 id="add-a-centerline-to-a-drawing">Add a centerline to a drawing&lt;/h3>
&lt;ol>
&lt;li>Open an existing (or create a new) Onshape document with a drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/modifyDrawing">Drawings/modifyDrawing&lt;/a> call. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add information about the modification. In this example, we&amp;rsquo;ll add an &lt;code>Onshape::Centerline&lt;/code> to the drawing. We must specify the &lt;code>messageName&lt;/code> and &lt;code>formatVersion&lt;/code> for the modification, and then provide the coordinates of the centerline ends.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Note: you can &lt;a href="https://onshape-public.github.io/docs/api-adv/translation/#export-a-drawing-as-a-json">Export a Drawing to JSON&lt;/a> to get a list of valid coordinates and handles.&lt;/li>
&lt;li>Note: if you have access, you can refer to the &lt;a href="https://docs.opendesign.com/td/">ODA documentation&lt;/a> for more detailed formatting information.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;description&amp;#34;: &amp;#34;Add a centerline to the drawing&amp;#34;,
&amp;#34;jsonRequests&amp;#34;: [ {
&amp;#34;messageName&amp;#34;: &amp;#34;onshapeCreateAnnotations&amp;#34;,
&amp;#34;formatVersion&amp;#34;: &amp;#34;2021-01-01&amp;#34;,
&amp;#34;annotations&amp;#34;: [
{
&amp;#34;pointToPointCenterline&amp;#34;: {
&amp;#34;point1&amp;#34;: {
&amp;#34;coordinate&amp;#34;: [
2,
4,
0
],
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Reference::Point&amp;#34;,
&amp;#34;uniqueId&amp;#34;: &amp;#34;point1&amp;#34;,
&amp;#34;viewId&amp;#34;: &amp;#34;51fa8b6040e411dfd17a4cda&amp;#34;
},
&amp;#34;point2&amp;#34;: {
&amp;#34;coordinate&amp;#34;: [
7,
6,
1
],
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Reference::Point&amp;#34;,
&amp;#34;uniqueId&amp;#34;: &amp;#34;point2&amp;#34;,
&amp;#34;viewId&amp;#34;: &amp;#34;ay6a8b6020e4h7dfdnn1499i&amp;#34;
}
},
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Centerline::PointToPoint&amp;#34;
}
]
}]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>Make the call, and then get &lt;code>id&lt;/code> from the response body. You&amp;rsquo;ll need this to poll the modification status to figure out when the modification has completed.&lt;/li>
&lt;li>Set up the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/getModificationStatus">Drawings/getModificationStatus&lt;/a> call. Replace &lt;code>{mrid}&lt;/code> with the &lt;code>id&lt;/code> from the last step, and replace &lt;code>CREDENTIALS&lt;/code> with your credentials. Poll the modification status until the response returns &lt;code>&amp;quot;requestState&amp;quot;: &amp;quot;DONE&amp;quot;&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/modify/status/{mrid}&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open your drawing and confirm that you see the new centerline.&lt;/li>
&lt;/ol>
&lt;h3 id="add-a-dimension-to-a-drawing">Add a dimension to a drawing&lt;/h3>
&lt;ol>
&lt;li>Open an existing (or create a new) Onshape document with a drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/modifyDrawing">Drawings/modifyDrawing&lt;/a> call. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add information about the modification. In this example, we&amp;rsquo;ll add an &lt;code>Onshape::Dimension&lt;/code> to the drawing. We must specify the &lt;code>messageName&lt;/code> and &lt;code>formatVersion&lt;/code> for the modification, and then provide the coordinates and formatting options for the dimension. (Hint: you can &lt;a href="https://onshape-public.github.io/docs/api-adv/translation/#export-a-drawing-as-a-json">Export a Drawing to JSON&lt;/a> to get a list of valid coordinates and handles.)
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;description&amp;#34;: &amp;#34;Add a dimension to the drawing&amp;#34;,
&amp;#34;jsonRequests&amp;#34;: [ {
&amp;#34;messageName&amp;#34;: &amp;#34;onshapeCreateAnnotations&amp;#34;,
&amp;#34;formatVersion&amp;#34;: &amp;#34;2021-01-01&amp;#34;,
&amp;#34;annotations&amp;#34;: [
{
&amp;#34;radialDimension&amp;#34;: {
&amp;#34;centerPoint&amp;#34;: {
&amp;#34;coordinate&amp;#34;: [
0.2800021171569824,
0.014964947476983043,
0.079502
],
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Reference::Point&amp;#34;,
&amp;#34;uniqueId&amp;#34;: &amp;#34;point1&amp;#34;,
&amp;#34;viewId&amp;#34;: &amp;#34;e11c38795c04ca55047f7ea7&amp;#34;
},
&amp;#34;chordPoint&amp;#34;: {
&amp;#34;coordinate&amp;#34;: [
0.2920149764955524,
0.010030535983985095,
0.079502
],
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Reference::Point&amp;#34;,
&amp;#34;uniqueId&amp;#34;: &amp;#34;point2&amp;#34;,
&amp;#34;viewId&amp;#34;: &amp;#34;e11c38795c04ca55047f7ea7&amp;#34;
},
&amp;#34;formatting&amp;#34;: {
&amp;#34;dimdec&amp;#34;: 2,
&amp;#34;dimlim&amp;#34;: false,
&amp;#34;dimpost&amp;#34;: &amp;#34;R&amp;lt;&amp;gt;&amp;#34;,
&amp;#34;dimtm&amp;#34;: 0,
&amp;#34;dimtol&amp;#34;: false,
&amp;#34;dimtp&amp;#34;: 0,
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Formatting::Dimension&amp;#34;
},
&amp;#34;logicalId&amp;#34;: &amp;#34;dimension1&amp;#34;,
&amp;#34;textOverride&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;textPosition&amp;#34;: {
&amp;#34;coordinate&amp;#34;: [
191.80537349378181,
89.76274130852224,
0
],
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Reference::Point&amp;#34;
}
},
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Dimension::Radial&amp;#34;
}
]
}]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Make the call, and then get &lt;code>id&lt;/code> from the response body. You&amp;rsquo;ll need this to poll the modification status to figure out when the modification has completed.&lt;/li>
&lt;li>Set up the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/getModificationStatus">Drawings/getModificationStatus&lt;/a> call. Replace &lt;code>{mrid}&lt;/code> with the &lt;code>id&lt;/code> from the last step, and replace &lt;code>CREDENTIALS&lt;/code> with your credentials. Poll the modification status until the response returns &lt;code>&amp;quot;requestState&amp;quot;: &amp;quot;DONE&amp;quot;&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/modify/status/{mrid}&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open your drawing and confirm that you see the new dimension.&lt;/li>
&lt;/ol>
&lt;h3 id="add-a-geometric-tolerance-to-a-drawing">Add a geometric tolerance to a drawing&lt;/h3>
&lt;ol>
&lt;li>Open an existing (or create a new) Onshape document with a drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/modifyDrawing">Drawings/modifyDrawing&lt;/a> call. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add information about the modification. In this example, we&amp;rsquo;ll add an &lt;code>Onshape::GeometricTolerance&lt;/code> to the drawing. We must specify the &lt;code>messageName&lt;/code> and &lt;code>formatVersion&lt;/code> for the modification, and then provide the frames and position of the annotation:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;description&amp;#34;: &amp;#34;Add a geometric tolerance to the drawing&amp;#34;,
&amp;#34;jsonRequests&amp;#34;: [ {
&amp;#34;messageName&amp;#34;: &amp;#34;onshapeCreateAnnotations&amp;#34;,
&amp;#34;formatVersion&amp;#34;: &amp;#34;2021-01-01&amp;#34;,
&amp;#34;annotations&amp;#34;: [
{
&amp;#34;geometricTolerance&amp;#34;: {
&amp;#34;frames&amp;#34;: [
&amp;#34;{\\fDrawing Symbols Sans;◎}%%v{\\fDrawing Symbols Sans;∅}tol1{\\fDrawing Symbols Sans;Ⓜ}%%v%%v%%v%%v%%v\n&amp;#34;,
&amp;#34;{\\fDrawing Symbols Sans;⌖}%%vto2{\\fDrawing Symbols Sans;Ⓛ}%%v%%v%%v%%v%%v\n&amp;#34;
],
&amp;#34;logicalId&amp;#34;: &amp;#34;geometricTolerance1&amp;#34;,
&amp;#34;position&amp;#34;: {
&amp;#34;coordinate&amp;#34;: [
6,
6,
0
],
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Reference::Point&amp;#34;
}
},
&amp;#34;type&amp;#34;: &amp;#34;Onshape::GeometricTolerance&amp;#34;
}
]
}]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Make the call, and then get &lt;code>id&lt;/code> from the response body. You&amp;rsquo;ll need this to poll the modification status to figure out when the modification has completed.&lt;/li>
&lt;li>Set up the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/getModificationStatus">Drawings/getModificationStatus&lt;/a> call. Replace &lt;code>{mrid}&lt;/code> with the &lt;code>id&lt;/code> from the last step, and replace &lt;code>CREDENTIALS&lt;/code> with your credentials. Poll the modification status until the response returns &lt;code>&amp;quot;requestState&amp;quot;: &amp;quot;DONE&amp;quot;&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/modify/status/{mrid}&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open your drawing and confirm that you see the new annotation.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/drawings-addtolerance.png" alt="new drawing created with border and extra column and row" width=550>&lt;/li>
&lt;/ol>
&lt;h3 id="add-an-inspection-symbol-to-a-drawing">Add an inspection symbol to a drawing&lt;/h3>
&lt;ol>
&lt;li>Open an existing (or create a new) Onshape document with a drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/modifyDrawing">Drawings/modifyDrawing&lt;/a> call. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add information about the modification. In this example, we&amp;rsquo;ll add an &lt;code>Onshape::InspectionSymbol&lt;/code> to the drawing. We must specify the &lt;code>messageName&lt;/code> and &lt;code>formatVersion&lt;/code> for the modification, and then provide the shape and position of the inspection symbol. (Hint: you can &lt;a href="https://onshape-public.github.io/docs/api-adv/translation/#export-a-drawing-as-a-json">Export a Drawing to JSON&lt;/a> to get a list of valid coordinates and handles.)
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;description&amp;#34;: &amp;#34;Add an inspection symbol to the drawing&amp;#34;,
&amp;#34;jsonRequests&amp;#34;: [ {
&amp;#34;messageName&amp;#34;: &amp;#34;onshapeCreateAnnotations&amp;#34;,
&amp;#34;formatVersion&amp;#34;: &amp;#34;2021-01-01&amp;#34;,
&amp;#34;annotations&amp;#34;: [
{
&amp;#34;inspectionSymbol&amp;#34;: {
&amp;#34;borderShape&amp;#34;: &amp;#34;Circle&amp;#34;,
&amp;#34;borderSize&amp;#34;: 2,
&amp;#34;logicalId&amp;#34;: &amp;#34;inspection1&amp;#34;,
&amp;#34;parentAnnotation&amp;#34;: &amp;#34;h:10000577&amp;#34;,
&amp;#34;parentLineIndex&amp;#34;: 0.0,
&amp;#34;position&amp;#34;: {
&amp;#34;coordinate&amp;#34;: [
2.6,
6,
0
],
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Reference::Point&amp;#34;
},
&amp;#34;textHeight&amp;#34;: 2
},
&amp;#34;type&amp;#34;: &amp;#34;Onshape::InspectionSymbol&amp;#34;
}
]
}]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Make the call, and then get &lt;code>id&lt;/code> from the response body. You&amp;rsquo;ll need this to poll the modification status to figure out when the modification has completed.&lt;/li>
&lt;li>Set up the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/getModificationStatus">Drawings/getModificationStatus&lt;/a> call. Replace &lt;code>{mrid}&lt;/code> with the &lt;code>id&lt;/code> from the last step, and replace &lt;code>CREDENTIALS&lt;/code> with your credentials. Poll the modification status until the response returns &lt;code>&amp;quot;requestState&amp;quot;: &amp;quot;DONE&amp;quot;&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/modify/status/{mrid}&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open your drawing and confirm that you see the new inspection symbol.&lt;/li>
&lt;/ol>
&lt;h3 id="add-a-table-to-a-drawing">Add a table to a drawing&lt;/h3>
&lt;ol>
&lt;li>Open an existing (or create a new) Onshape document with a drawing.&lt;/li>
&lt;li>Start to form the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/modifyDrawing">Drawings/modifyDrawing&lt;/a> call. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \s
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add information about the modification. In this example, we&amp;rsquo;ll add an &lt;code>Onshape::Table::GeneralTable&lt;/code> to the drawing. We must specify the &lt;code>messageName&lt;/code> and &lt;code>formatVersion&lt;/code> for the modification, and then provide the location, number of rows, and number of columns for the table. (Hint: you can &lt;a href="https://onshape-public.github.io/docs/api-adv/translation/#export-a-drawing-as-a-json">Export a Drawing to JSON&lt;/a> to get a list of valid coordinates.)
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/modify&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;description&amp;#34;: &amp;#34;New table&amp;#34;,
&amp;#34;jsonRequests&amp;#34;: [ {
&amp;#34;formatVersion&amp;#34;: &amp;#34;2021-01-01&amp;#34;,
&amp;#34;messageName&amp;#34;: &amp;#34;onshapeCreateAnnotations&amp;#34;,
&amp;#34;annotations&amp;#34;: [
{ &amp;#34;table&amp;#34;: {
&amp;#34;cells&amp;#34;: [
{
&amp;#34;column&amp;#34;: 0,
&amp;#34;content&amp;#34;: &amp;#34;1.1&amp;#34;,
&amp;#34;row&amp;#34;: 0
},
{
&amp;#34;column&amp;#34;: 0,
&amp;#34;content&amp;#34;: &amp;#34;2.1&amp;#34;,
&amp;#34;row&amp;#34;: 1
},
{
&amp;#34;column&amp;#34;: 1,
&amp;#34;content&amp;#34;: &amp;#34;1.2&amp;#34;,
&amp;#34;row&amp;#34;: 0
},
{
&amp;#34;column&amp;#34;: 1,
&amp;#34;content&amp;#34;: &amp;#34;2.2&amp;#34;,
&amp;#34;row&amp;#34;: 1
}
],
&amp;#34;columns&amp;#34;: 2,
&amp;#34;rows&amp;#34;: 2,
&amp;#34;showHeaderRow&amp;#34;: false,
&amp;#34;showTitleRow&amp;#34;: false,
&amp;#34;position&amp;#34;: {
&amp;#34;coordinate&amp;#34;: [100.0, 400.0, 0.0],
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Reference::Point&amp;#34;
}
},
&amp;#34;type&amp;#34;: &amp;#34;Onshape::Table::GeneralTable&amp;#34;
}]
}]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Make the call, and then get &lt;code>id&lt;/code> from the response body. You&amp;rsquo;ll need this to poll the modification status to figure out when the modification has completed.&lt;/li>
&lt;li>Set up the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/getModificationStatus">Drawings/getModificationStatus&lt;/a> call. Replace &lt;code>{mrid}&lt;/code> with the &lt;code>id&lt;/code> from the last step, and replace &lt;code>CREDENTIALS&lt;/code> with your credentials. Poll the modification status until the response returns &lt;code>&amp;quot;requestState&amp;quot;: &amp;quot;DONE&amp;quot;&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET \
&amp;#39;https://cad.onshape.doc/api/v6/drawings/modify/status/{mrid}&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open your drawing and confirm that you see the new table.&lt;/li>
&lt;/ol>
&lt;h2 id="additional-resources">Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/api-intro//#onshape-api-request">Guide to Onshape APIs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/api-intro/explorer">Guide to the API Explorer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing">API Explorer: Drawings&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/help/Content/drawings.htm">Onshape Help: Drawings&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Features</title><link>https://onshape-public.github.io/docs/api-adv/featureaccess/</link><pubDate>Mon, 18 May 2020 20:37:28 -0400</pubDate><guid>https://onshape-public.github.io/docs/api-adv/featureaccess/</guid><description>
&lt;p>This page describes the APIs Onshape provides for creating and manipulating features and the Feature List in a Part Studio.&lt;/p>
&lt;blockquote>
&lt;p>📘 &lt;strong>Notes&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>This page provides sample code as curls. See the &lt;a href="https://curl.se/docs/">curl documentation&lt;/a> for more information.&lt;/li>
&lt;li>All Onshape API calls must be properly authenticated by replacing the &lt;code>CREDENTIALS&lt;/code> variable in the curls below. See the &lt;a href="https://onshape-public.github.io/docs/auth/apikeys">API Keys&lt;/a> page for instructions and the &lt;a href="https://onshape-public.github.io/docs/api-intro/quickstart">Quick Start&lt;/a> for an example. All applications submitted to the Onshape App Store &lt;em>must&lt;/em> authenticate with &lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth2&lt;/a>.&lt;/li>
&lt;li>This documentation refers to Onshape IDs in the following format: &lt;code>{did}, {wid}, {vid}, {mid}, {eid}, {pid}, {otherId}&lt;/code>. These represent document, workspace, version, microversion, element, part, and other IDs (respectively) that are needed make the API calls. We sometimes abbreviate these variables as &lt;code>DWVEM&lt;/code> Please see &lt;a href="https://onshape-public.github.io/docs/api-intro/#onshape-api-request">API Guide: API Intro&lt;/a> for information on what these IDs mean and how to obtain them from your documents. Never include the curly braces (&lt;code>{}&lt;/code>) in your API calls.&lt;/li>
&lt;li>For Enterprise accounts, replace &lt;strong>cad&lt;/strong> in all Onshape URLs with your company domain.
https://&lt;strong>cad&lt;/strong>.onshape.com &amp;gt; https://&lt;strong>companyName&lt;/strong>.onshape.com&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="featurescript-vs-rest-api">FeatureScript vs REST API&lt;/h2>
&lt;p>When working with complex geometry, you might find working directly in FeatureScript easier than working with the Onshape REST API. &lt;a href="https://cad.onshape.com/FsDoc/">Click here to see the FeatureScript documentation.&lt;/a>&lt;/p>
&lt;h2 id="endpoints">Endpoints&lt;/h2>
&lt;p>The following endpoints are available for working with features and the Feature List:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/getPartStudioFeatures">Get the Feature List&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features?rollbackBarIndex=-1&amp;amp;includeGeometryIds=true&amp;amp;noSketchGeometry=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/addPartStudioFeature">Add a Feature&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/{wvm}/{wvmid}/e/{wid}/features&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureDefinitionCall-1406&amp;#34;,
&amp;#34;feature&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;parameters&amp;#34;: []
}
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/updatePartStudioFeature">Update a Feature&lt;/a>
&lt;pre tabindex="0">&lt;code> curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureDefinitionCall-1406&amp;#34;,
&amp;#34;feature&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;featureId&amp;#34;: &amp;#34;{fid}&amp;#34;,
&amp;#34;parameters&amp;#34;: []
}
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/updateFeatures">Update Multiple Features&lt;/a>
&lt;pre tabindex="0">&lt;code> curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/w/{wid}/e/{eid}/features/updates&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;btType&amp;#34;: &amp;#34;BTUpdateFeaturesCall-1748&amp;#34;,
&amp;#34;features&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;featureId&amp;#34;: &amp;#34;{fid1}&amp;#34;,
&amp;#34;parameters&amp;#34;: []
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;featureId&amp;#34;: &amp;#34;{fid2}&amp;#34;,
&amp;#34;parameters&amp;#34;: []
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/deletePartStudioFeature">Delete a Feature&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;DELETE&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features/featureid/{fid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h3 id="json-encoding">JSON encoding&lt;/h3>
&lt;p>Instead of providing a translation layer between a feature&amp;rsquo;s internal and external formats, these APIs present the internal format of the feature definitions to the user. The best way to familiarize yourself with the formats involved is by calling the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/getPartStudioFeatures">Get the Feature List&lt;/a> endpoint on existing Part Studios.&lt;/p>
&lt;blockquote>
&lt;p>📘 &lt;strong>Notes&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Onshape REST API parameters may change at any time. The documentation on this page is accurate for v8 of the Onshape API. The quickest way to verify what parameters are needed for a call is to create the sketch/feature in the Onshape UI, then call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/getPartStudioFeatures">Get the Feature List&lt;/a> API and see what parameters are returned for the feature.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;p>📘 &lt;strong>Notes&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Default values are sometimes omitted in the encoded output. These defaults are:
&lt;ul>
&lt;li>String: &lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/li>
&lt;li>Boolean: &lt;code>false&lt;/code>&lt;/li>
&lt;li>Numeric: &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The JSON encoding uses a special tagging system to manage polymorphic data structures. Objects are generally by enclosing them within another object that declares the type information for the enclosed object.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="feature-types">Feature types&lt;/h3>
&lt;p>Below, find the available types for working with features in the API.&lt;/p>
&lt;ul>
&lt;li>&lt;code>BTMFeature-134&lt;/code> - General feature type&lt;/li>
&lt;li>&lt;code>BTMSketch-151&lt;/code> - Feature type for sketches&lt;/li>
&lt;/ul>
&lt;h3 id="parameter-types">Parameter types&lt;/h3>
&lt;p>All parameters have the following fields in common:&lt;/p>
&lt;ul>
&lt;li>&lt;code>parameterId&lt;/code> - Unique ID of the parameter&lt;/li>
&lt;li>&lt;code>nodeId&lt;/code> - Unique ID of the parameter node&lt;/li>
&lt;/ul>
&lt;p>The parameter types available for use in the API are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>BTMParameterQuantity-147&lt;/code>
&lt;ul>
&lt;li>&lt;code>expression&lt;/code> - Define the value for the parameter&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>BTMParameterQueryList-148 &lt;/code> - defined by one of the following:
&lt;ul>
&lt;li>&lt;code>SBTMIndividualQuery-138&lt;/code>
&lt;ul>
&lt;li>&lt;code>geometryIds&lt;/code> - List of geometry IDs the feature applies to&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>SBTMIndividualSketchRegionQuery-140&lt;/code>
&lt;ul>
&lt;li>&lt;code>featureId&lt;/code> - Feature ID of the sketch for which to include all regions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>BTMParameterBoolean-144&lt;/code>
&lt;ul>
&lt;li>&lt;code>value&lt;/code> - &lt;code>true | false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>BTMParameterEnum-145&lt;/code>
&lt;ul>
&lt;li>&lt;code>enumName&lt;/code> - Name of the enum type that the value is a member of&lt;/li>
&lt;li>&lt;code>value&lt;/code> - The enum member&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="sketch-plane-ids">Sketch plane IDs&lt;/h3>
&lt;p>The following string can be sent along with the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/evalFeatureScript">PartStudios/featurescript&lt;/a> API to get the plane ID. You can then use that ID to specify the plane on which to create a sketch.&lt;/p>
&lt;pre tabindex="0">&lt;code>function(context is Context, queries) {
return transientQueriesToStrings(evaluateQuery(context, qCreatedBy(makeId(\&amp;#34;{planeName}\&amp;#34;), EntityType.FACE)));
}
&lt;/code>&lt;/pre>&lt;p>For example, to get the ID of the Top plane, you would make the following call:&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/w/{wid}/e/{eid}/featurescript?rollbackBarIndex=-1&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;script&amp;#34;: &amp;#34;function(context is Context, queries) { return transientQueriesToStrings(evaluateQuery(context, qCreatedBy(makeId(\&amp;#34;Top\&amp;#34;), EntityType.FACE))); }&amp;#34;
}&amp;#39;
&lt;/code>&lt;/pre>&lt;h2 id="sample-workflows">Sample Workflows&lt;/h2>
&lt;p>Below are several examples of how the API can be used in order to help you get started. The calls could be executed using your preferred software environment but interactive use in a REST-aware tool is likely the easiest way to try the examples.&lt;/p>
&lt;h3 id="get-the-list-of-features-in-a-part-studio">Get the list of features in a Part Studio&lt;/h3>
&lt;p>One of the best ways to familiarize yourself with the Onshape Feature APIs is to view the API details for existing features in a Part Studio. In this example, we&amp;rsquo;ll add three features to a Part Studio, and then call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/getPartStudioFeatures">PartStudio/getPartStudioFeatures&lt;/a> API on the Part Studio. We&amp;rsquo;ll then be able to view the structure of the way features are represented in the API.&lt;/p>
&lt;ol>
&lt;li>Create a new document or open an existing one.&lt;/li>
&lt;li>Create a new sketch in the document, and draw a long rectangle.&lt;/li>
&lt;li>Extrude the rectangle.&lt;/li>
&lt;li>Add a fillet to one edge of the part.&lt;/li>
&lt;li>Call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/getPartStudioFeatures">PartStudio/getPartStudioFeatures&lt;/a> API. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features?rollbackBarIndex=-1&amp;amp;includeGeometryIds=true&amp;amp;noSketchGeometry=false&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Review the JSON returned in the response body. A lot of information is returned, but it will look something like the truncated snippet below. Notice that there are objects returned for each feature in the Part Studio&amp;ndash; the sketch, the extrude, the fillet, and the chamfer. Each default plane and the origin in the Part Studio also appear in the &lt;code>defaultFeatures&lt;/code> object. The Standard Geometry library is listed as an import, and the response also includes the state of each feature. :
&lt;pre tabindex="0">&lt;code>{
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureListResponse-2457&amp;#34;,
&amp;#34;isComplete&amp;#34;: true,
&amp;#34;serializationVersion&amp;#34;: &amp;#34;1.2.4&amp;#34;,
&amp;#34;rollbackIndex&amp;#34;: 4,
&amp;#34;features&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMSketch-151&amp;#34;,
&amp;#34;entities&amp;#34;: [...],
&amp;#34;constraints&amp;#34;: [...],
&amp;#34;name&amp;#34;: &amp;#34;Sketch 1&amp;#34;,
&amp;#34;suppressed&amp;#34;: false,
&amp;#34;parameters&amp;#34;: [...],
&amp;#34;featureId&amp;#34;: &amp;#34;{fid1}&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;newSketch&amp;#34;,
&amp;#34;subFeatures&amp;#34;: [...],
&amp;#34;returnAfterSubfeatures&amp;#34;: false
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Extrude 1&amp;#34;,
&amp;#34;suppressed&amp;#34;: false,
&amp;#34;parameters&amp;#34;: [...]
&amp;#34;featureId&amp;#34;: &amp;#34;{fid2}&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;extrude&amp;#34;,
&amp;#34;subFeatures&amp;#34;: [],
&amp;#34;returnAfterSubfeatures&amp;#34;: false
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Fillet 1&amp;#34;,
&amp;#34;suppressed&amp;#34;: false,
&amp;#34;parameters&amp;#34;: [...],
&amp;#34;featureId&amp;#34;: &amp;#34;{fid3}&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;fillet&amp;#34;,
&amp;#34;subFeatures&amp;#34;: [...],
&amp;#34;returnAfterSubfeatures&amp;#34;: false
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Chamfer 1&amp;#34;,
&amp;#34;suppressed&amp;#34;: false,
&amp;#34;parameters&amp;#34;: [...],
&amp;#34;featureId&amp;#34;: &amp;#34;{fid4}&amp;#34;,
}
],
&amp;#34;featureStates&amp;#34;: {
&amp;#34;{fid1}&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureState-1688&amp;#34;,
&amp;#34;featureStatus&amp;#34;: &amp;#34;OK&amp;#34;,
&amp;#34;inactive&amp;#34;: false
},
...
},
&amp;#34;defaultFeatures&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Origin&amp;#34;,
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Top&amp;#34;,
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Front&amp;#34;,
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Right&amp;#34;,
}
],
&amp;#34;imports&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMImport-136&amp;#34;,
&amp;#34;path&amp;#34;: &amp;#34;onshape/std/geometry.fs&amp;#34;,
&amp;#34;version&amp;#34;: &amp;#34;2232.0&amp;#34;
}
],
&amp;#34;libraryVersion&amp;#34;: 2232
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h3 id="create-a-cube-feature">Create a cube feature&lt;/h3>
&lt;p>In this example we will create a cube using the &lt;code>cube&lt;/code> feature. The feature accepts a single parameter (the length of a side) and creates a cube with a corner at the origin and aligned with the three default planes.&lt;/p>
&lt;ol>
&lt;li>Create a new document or open an existing one. We&amp;rsquo;ll create the cube feature in this document.&lt;/li>
&lt;li>Begin to create the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/addPartStudioFeature">PartStudio/addPartStudioFeature&lt;/a> call. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials. This is a call to the same endpoint as in the previous example, but is a &lt;code>POST&lt;/code> instead of a &lt;code>GET&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39;\
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;lt;JSON of feature data&amp;gt;
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add the following as the JSON body.
&lt;ul>
&lt;li>Note the &lt;code>btType&lt;/code> defines this as a Feature.&lt;/li>
&lt;li>We&amp;rsquo;ve named the feature &lt;code>cube&lt;/code> and inserted an instance of the feature named &lt;code>Cube 1&lt;/code> into the Part Studio.&lt;/li>
&lt;li>The &lt;code>cube&lt;/code> feature has one parameter&amp;ndash; the cube &lt;code>sideLength&lt;/code> in inches, which is set to 1 by default.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureDefinitionCall-1406&amp;#34;,
&amp;#34;feature&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;cube&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Cube 1&amp;#34;,
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQuantity-147&amp;#34;,
&amp;#34;isInteger&amp;#34;: false,
&amp;#34;expression&amp;#34;: &amp;#34;1 in&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;sideLength&amp;#34;
}
],
&amp;#34;returnAfterSubfeatures&amp;#34;: false,
&amp;#34;suppressed&amp;#34;: false
}
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Confirm your call matches the following, and then make the call:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39;\
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureDefinitionCall-1406&amp;#34;,
&amp;#34;feature&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;cube&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Cube 1&amp;#34;,
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQuantity-147&amp;#34;,
&amp;#34;isInteger&amp;#34;: false,
&amp;#34;expression&amp;#34;: &amp;#34;1 in&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;sideLength&amp;#34;
}
],
&amp;#34;returnAfterSubfeatures&amp;#34;: false,
&amp;#34;suppressed&amp;#34;: false
}
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Return to your console to review the endpoint response. The output returns:
&lt;ul>
&lt;li>The feature definition that we provided as input with &lt;code>nodeId&lt;/code>s and a &lt;code>featureId&lt;/code>. Make a note of the &lt;code>featureId&lt;/code>; we&amp;rsquo;ll use it in the next example.&lt;/li>
&lt;li>Information that the feature executed correctly&lt;/li>
&lt;li>The serialization version and microversion of the document that resulted from the feature addition&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> {
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureDefinitionResponse-1617&amp;#34;,
&amp;#34;featureState&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureState-1688&amp;#34;,
&amp;#34;featureStatus&amp;#34;: &amp;#34;OK&amp;#34;,
&amp;#34;inactive&amp;#34;: false
},
&amp;#34;feature&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Cube 1&amp;#34;,
&amp;#34;suppressed&amp;#34;: false,
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQuantity-147&amp;#34;,
&amp;#34;value&amp;#34;: 0,
&amp;#34;units&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;isInteger&amp;#34;: false,
&amp;#34;expression&amp;#34;: &amp;#34;1 in&amp;#34;,
&amp;#34;nodeId&amp;#34;: &amp;#34;{nid1}&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;sideLength&amp;#34;
}
],
&amp;#34;featureId&amp;#34;: &amp;#34;{fid}&amp;#34;,
&amp;#34;nodeId&amp;#34;: &amp;#34;{nid2}&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;cube&amp;#34;,
&amp;#34;returnAfterSubfeatures&amp;#34;: false,
&amp;#34;subFeatures&amp;#34;: [],
&amp;#34;namespace&amp;#34;: &amp;#34;&amp;#34;
},
&amp;#34;serializationVersion&amp;#34;: &amp;#34;1.2.4&amp;#34;,
&amp;#34;sourceMicroversion&amp;#34;: &amp;#34;{mid}&amp;#34;,
&amp;#34;microversionSkew&amp;#34;: false,
&amp;#34;rejectMicroversionSkew&amp;#34;: false,
&amp;#34;libraryVersion&amp;#34;: 0
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open your document and confirm that the cube has been inserted into the Part Studio.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/features-cube-example.png" alt="cube added to part studio via features api" width=550>&lt;/li>
&lt;li>Double-click &lt;code>Cube 1&lt;/code> in the Feature List to open the Cube 1 dialog. Change the sideLength to 3 and click the checkbox. Note that the size of the cube changes automatically.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/features-cube-example-02.png" alt="cube parameter updated to 3 inches" width=550>&lt;/li>
&lt;/ol>
&lt;h3 id="create-a-sketch">Create a sketch&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll create a circular sketch feature with the following properties:&lt;/p>
&lt;ul>
&lt;li>While other features use a &lt;code>btType&lt;/code> of &lt;code>BTMFeature-141&lt;/code>, sketches have their own special type: &lt;code>BTMSketch-151&lt;/code>&lt;/li>
&lt;li>Sketches must use the &lt;code>newSketch&lt;/code> featureType&lt;/li>
&lt;li>Sketch plane ID: Front&lt;/li>
&lt;li>Radius: 0.025 inches&lt;/li>
&lt;li>Location: (0.05, 0.05)&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Open a new PartStudio. Note the following:
&lt;ul>
&lt;li>Document ID&lt;/li>
&lt;li>Workspace ID&lt;/li>
&lt;li>Element ID (of the Part Studio tab)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>We want to create the circle on the Front plane, so we&amp;rsquo;ll call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/evalFeatureScript">PartStudios/featurescript&lt;/a> endpoint to get its ID:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/w/{wid}/e/{eid}/featurescript?rollbackBarIndex=-1&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;script&amp;#34;: &amp;#34;function(context is Context, queries) { return transientQueriesToStrings(evaluateQuery(context, qCreatedBy(makeId(\&amp;#34;Front\&amp;#34;), EntityType.FACE))); }&amp;#34;
}&amp;#39;
&lt;/code>&lt;/pre>The call returns the following, identifying the plane as &lt;code>JCC&lt;/code>.
&lt;pre tabindex="0">&lt;code>{
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureScriptEvalResponse-1859&amp;#34;,
&amp;#34;result&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;com.belmonttech.serialize.fsvalue.BTFSValueArray&amp;#34;,
&amp;#34;value&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;com.belmonttech.serialize.fsvalue.BTFSValueString&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;JCC&amp;#34;,
&amp;#34;typeTag&amp;#34;: &amp;#34;&amp;#34;
}
],
&amp;#34;typeTag&amp;#34;: &amp;#34;&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Now we&amp;rsquo;ll create the JSON structure for our sketch. &lt;em>All sketches must be created with the &lt;code>BTMSketch-151&lt;/code> btType and the &lt;code>newSketch&lt;/code> featureType.&lt;/em> Note how we&amp;rsquo;ve specified the plane to use in the &lt;code>sketchPlane&lt;/code> parameter, and the &lt;code>geometry&lt;/code> details.
&lt;pre tabindex="0">&lt;code>{
&amp;#34;feature&amp;#34; : {
&amp;#34;btType&amp;#34;: &amp;#34;BTMSketch-151&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;newSketch&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Sketch 1&amp;#34;,
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQueryList-148&amp;#34;,
&amp;#34;queries&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMIndividualQuery-138&amp;#34;,
&amp;#34;deterministicIds&amp;#34;: [ &amp;#34;JCC&amp;#34; ]
}
],
&amp;#34;parameterId&amp;#34;: &amp;#34;sketchPlane&amp;#34;
}
],
&amp;#34;entities&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMSketchCurve-4&amp;#34;,
&amp;#34;geometry&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTCurveGeometryCircle-115&amp;#34;,
&amp;#34;radius&amp;#34;: 0.025,
&amp;#34;xcenter&amp;#34;: 0.05,
&amp;#34;ycenter&amp;#34;: 0.05,
&amp;#34;xdir&amp;#34;: 1,
&amp;#34;ydir&amp;#34;: 0,
&amp;#34;clockwise&amp;#34;: false
},
&amp;#34;centerId&amp;#34;: &amp;#34;circle-entity.center&amp;#34;,
&amp;#34;entityId&amp;#34;: &amp;#34;circle-entity&amp;#34;
}
],
&amp;#34;constraints&amp;#34;: [
]
}
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Now we&amp;rsquo;ll add the JSON structure to the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/addPartStudioFeature">PartStudio/addPartStudioFeature&lt;/a> endpoint. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/{wvm}/{wvmid}/e/{wid}/features&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;feature&amp;#34; : {
&amp;#34;btType&amp;#34;: &amp;#34;BTMSketch-151&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;newSketch&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Sketch 1&amp;#34;,
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQueryList-148&amp;#34;,
&amp;#34;queries&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMIndividualQuery-138&amp;#34;,
&amp;#34;deterministicIds&amp;#34;: [ &amp;#34;JCC&amp;#34; ]
}
],
&amp;#34;parameterId&amp;#34;: &amp;#34;sketchPlane&amp;#34;
}
],
&amp;#34;entities&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMSketchCurve-4&amp;#34;,
&amp;#34;geometry&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTCurveGeometryCircle-115&amp;#34;,
&amp;#34;radius&amp;#34;: 0.025,
&amp;#34;xcenter&amp;#34;: 0.05,
&amp;#34;ycenter&amp;#34;: 0.05,
&amp;#34;xdir&amp;#34;: 1,
&amp;#34;ydir&amp;#34;: 0,
&amp;#34;clockwise&amp;#34;: false
},
&amp;#34;centerId&amp;#34;: &amp;#34;circle-entity.center&amp;#34;,
&amp;#34;entityId&amp;#34;: &amp;#34;circle-entity&amp;#34;
}
],
&amp;#34;constraints&amp;#34;: [
]
}
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Find the new sketch&amp;rsquo;s &lt;code>featureId&lt;/code> in the call response. You&amp;rsquo;ll need this for the &lt;a href="#create-a-cylinder">Create a cylinder&lt;/a> tutorial.&lt;/li>
&lt;li>Open your Part Studio and confirm that the sketch has been added:
&lt;/br>&lt;/br>&lt;img src="https://onshape-public.github.io/images/features-create-sketch.png" alt="circle sketch created via features api" width=550>&lt;/li>
&lt;/ol>
&lt;h3 id="create-a-cylinder">Create a cylinder&lt;/h3>
&lt;p>In this tutorial, we&amp;rsquo;ll extrude an sketch with the following properties:
&lt;/br>&lt;/br>&lt;img src="https://onshape-public.github.io/images/features-extrude-dialog.png" alt="Extrude dialog in Onshape UI" width=350>&lt;/p>
&lt;ol>
&lt;li>This tutorial expands on the &lt;a href="#create-a-sketch">Create a sketch&lt;/a> tutorial. You&amp;rsquo;ll need the following from the document containing your circular sketch:
&lt;ul>
&lt;li>Document ID&lt;/li>
&lt;li>Workspace ID&lt;/li>
&lt;li>Element ID of the tab containing the sketch&lt;/li>
&lt;li>Feature ID of the sketch
&lt;ul>
&lt;li>If you need to get this &lt;code>featureId&lt;/code> again, you can call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/getPartStudioFeatures">getPartStudioFeatures&lt;/a> endpoint on the document.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Begin to create the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/addPartStudioFeature">PartStudio/addPartStudioFeature&lt;/a> call. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39;\
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;lt;JSON of feature data&amp;gt;
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>We&amp;rsquo;ll start by initializing an extrude in the JSON with the &lt;code>btType&lt;/code> and &lt;code>featureType&lt;/code> shown below:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code> {
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureDefinitionCall-1406&amp;#34;,
&amp;#34;feature&amp;#34;:
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;extrude&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Extrude 1&amp;#34;,
&amp;#34;suppressed&amp;#34;: false,
&amp;#34;parameters&amp;#34;: [
]
}
}
&lt;/code>&lt;/pre>&lt;ol start="4">
&lt;li>Now, we&amp;rsquo;ll add values for the options we want to our &lt;code>parameters&lt;/code> block. Don&amp;rsquo;t forget to replace &lt;code>{featureId}&lt;/code> in the code below with the feature ID of the sketch.&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code> {
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterEnum-145&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;SOLID&amp;#34;,
&amp;#34;enumName&amp;#34;: &amp;#34;ExtendedToolBodyType&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;bodyType&amp;#34;
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterEnum-145&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;NEW&amp;#34;,
&amp;#34;enumName&amp;#34;: &amp;#34;NewBodyOperationType&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;operationType&amp;#34;
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQueryList-148&amp;#34;,
&amp;#34;queries&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMIndividualSketchRegionQuery-140&amp;#34;,
&amp;#34;featureId&amp;#34;: &amp;#34;{featureId}&amp;#34;
}
],
&amp;#34;parameterId&amp;#34;: &amp;#34;entities&amp;#34;
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterEnum-145&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;BLIND&amp;#34;,
&amp;#34;enumName&amp;#34;: &amp;#34;BoundingType&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;endBound&amp;#34;
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQuantity-147&amp;#34;,
&amp;#34;expression&amp;#34;: &amp;#34;1 in&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;depth&amp;#34;
}
&lt;/code>&lt;/pre>&lt;ol start="5">
&lt;li>Now our JSON is complete, and we can make our call.&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code> curl -X &amp;#39;POST \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39;\
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureDefinitionCall-1406&amp;#34;,
&amp;#34;feature&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;extrude&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Extrude 1&amp;#34;,
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterEnum-145&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;SOLID&amp;#34;,
&amp;#34;enumName&amp;#34;: &amp;#34;ExtendedToolBodyType&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;bodyType&amp;#34;
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterEnum-145&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;NEW&amp;#34;,
&amp;#34;enumName&amp;#34;: &amp;#34;NewBodyOperationType&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;operationType&amp;#34;
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQueryList-148&amp;#34;,
&amp;#34;queries&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMIndividualSketchRegionQuery-140&amp;#34;,
&amp;#34;featureId&amp;#34;: &amp;#34;{featureId}&amp;#34;
}
],
&amp;#34;parameterId&amp;#34;: &amp;#34;entities&amp;#34;
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterEnum-145&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;BLIND&amp;#34;,
&amp;#34;enumName&amp;#34;: &amp;#34;BoundingType&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;endBound&amp;#34;
},
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQuantity-147&amp;#34;,
&amp;#34;expression&amp;#34;: &amp;#34;1 in&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;depth&amp;#34;
}
],
&amp;#34;returnAfterSubfeatures&amp;#34;: false,
&amp;#34;suppressed&amp;#34;: false
}
}&amp;#39;
&lt;/code>&lt;/pre>&lt;ol start="6">
&lt;li>Open your document and confirm that the sketch has been extruded into a cylinder.
&lt;/br>&lt;/br>&lt;img src="https://onshape-public.github.io/images/features-extrude-example.png" alt="circle sketch created via features api" width=550>&lt;/li>
&lt;/ol>
&lt;h3 id="update-a-feature">Update a feature&lt;/h3>
&lt;p>In this example we&amp;rsquo;ll update our cube feature.&lt;/p>
&lt;ol>
&lt;li>Open the document in which you created the cube feature in &lt;a href="#create-a-cube-feature">this example&lt;/a>. You will need the following from this document:
&lt;ul>
&lt;li>Document ID&lt;/li>
&lt;li>Workspace ID&lt;/li>
&lt;li>Element ID (for the element that contains the cube feature)&lt;/li>
&lt;li>Feature ID (ID of the cube feature, returned in the API response in the previous example)
&lt;ul>
&lt;li>If you need to get this &lt;code>featureId&lt;/code> again, you can call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/getPartStudioFeatures">getPartStudioFeatures&lt;/a> endpoint on the document.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Begin to create the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/updatePartStudioFeature">PartStudio/updatePartStudioFeature&lt;/a> call. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;lt;JSON of feature data&amp;gt;
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Add the following as the JSON body.
&lt;ul>
&lt;li>Note the &lt;code>btType&lt;/code> defines this as a Feature.&lt;/li>
&lt;li>We specify the &lt;code>featureId&lt;/code> again in the request body. This must match the &lt;code>featureId&lt;/code> sent in the URL exactly.&lt;/li>
&lt;li>We must also specify the feature&amp;rsquo;s &lt;code>featureType&lt;/code> and &lt;code>name&lt;/code> in this call; if we don&amp;rsquo;t send those fields, the call will attempt to change these values to empty strings, resulting in errors.&lt;/li>
&lt;li>The &lt;code>cube&lt;/code> feature has one parameter&amp;ndash; the cube &lt;code>sideLength&lt;/code> in inches, which we will update to 2 inches:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureDefinitionCall-1406&amp;#34;,
&amp;#34;feature&amp;#34;: {
&amp;#34;featureId&amp;#34;: &amp;#34;{fid}&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;cube&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Cube 1&amp;#34;,
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQuantity-147&amp;#34;,
&amp;#34;isInteger&amp;#34;: false,
&amp;#34;expression&amp;#34;: &amp;#34;2 in&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;sideLength&amp;#34;
}
]
}
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Confirm your call matches the following, and then make the call:
&lt;pre tabindex="0">&lt;code> curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureDefinitionCall-1406&amp;#34;,
&amp;#34;feature&amp;#34;: {
&amp;#34;featureId&amp;#34;: &amp;#34;{fid}&amp;#34;,
&amp;#34;featureType&amp;#34;: &amp;#34;cube&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Cube 1&amp;#34;,
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQuantity-147&amp;#34;,
&amp;#34;isInteger&amp;#34;: false,
&amp;#34;expression&amp;#34;: &amp;#34;2 in&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;sideLength&amp;#34;
}
]
}
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Return to your console to review the endpoint response. The output returns:
&lt;ul>
&lt;li>The updated feature definition&lt;/li>
&lt;li>Information that the feature executed correctly&lt;/li>
&lt;li>The serialization version and microversion of the document that resulted from the feature update&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> {
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureDefinitionResponse-1617&amp;#34;,
&amp;#34;featureState&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTFeatureState-1688&amp;#34;,
&amp;#34;featureStatus&amp;#34;: &amp;#34;OK&amp;#34;,
&amp;#34;inactive&amp;#34;: false
},
&amp;#34;feature&amp;#34;: {
&amp;#34;btType&amp;#34;: &amp;#34;BTMFeature-134&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;Cube 1&amp;#34;,
&amp;#34;suppressed&amp;#34;: false,
&amp;#34;parameters&amp;#34;: [
{
&amp;#34;btType&amp;#34;: &amp;#34;BTMParameterQuantity-147&amp;#34;,
&amp;#34;value&amp;#34;: 0,
&amp;#34;units&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;isInteger&amp;#34;: false,
&amp;#34;expression&amp;#34;: &amp;#34;2 in&amp;#34;,
&amp;#34;nodeId&amp;#34;: &amp;#34;{nid1}&amp;#34;,
&amp;#34;parameterId&amp;#34;: &amp;#34;sideLength&amp;#34;
}
],
&amp;#34;featureId&amp;#34;: &amp;#34;{fid}&amp;#34;,
&amp;#34;nodeId&amp;#34;: &amp;#34;{nid2},
&amp;#34;featureType&amp;#34;: &amp;#34;cube&amp;#34;,
&amp;#34;returnAfterSubfeatures&amp;#34;: false,
&amp;#34;subFeatures&amp;#34;: [],
&amp;#34;namespace&amp;#34;: &amp;#34;&amp;#34;
},
&amp;#34;serializationVersion&amp;#34;: &amp;#34;1.2.4&amp;#34;,
&amp;#34;sourceMicroversion&amp;#34;: &amp;#34;{mid}&amp;#34;,
&amp;#34;microversionSkew&amp;#34;: false,
&amp;#34;rejectMicroversionSkew&amp;#34;: false,
&amp;#34;libraryVersion&amp;#34;: 0
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open your document and confirm that the cube has a side length of 2 inches.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/features-cube-example-03.png" alt="cube added to part studio via features api" width=550>&lt;/li>
&lt;/ol>
&lt;h3 id="delete-a-feature">Delete a feature&lt;/h3>
&lt;ol>
&lt;li>Create a new document and add a cube feature to it. See &lt;a href="#create-a-cube-feature">Create a cube feature&lt;/a> for instructions. Make a note of the following:
&lt;ul>
&lt;li>Document ID&lt;/li>
&lt;li>Workspace ID&lt;/li>
&lt;li>Element ID (for the element containing the cube feature)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/getPartStudioFeatures">getPartStudioFeatures&lt;/a> endpoint on the document to get the &lt;code>featureId&lt;/code> of the cube feature. See &lt;a href="#get-the-list-of-features-in-a-part-studio">Get the Feature list&lt;/a> for instructions.&lt;/li>
&lt;li>Create and execute the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/deletePartStudioFeature">PartStudio/deletePartStudioFeature&lt;/a> call. Replace the URL parameters with the values from your document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;DELETE&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v8/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}&amp;#39; \
-H &amp;#39;Accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Confirm that the cube feature has been removed from your document.&lt;/li>
&lt;/ol></description></item><item><title>Docs: Import &amp; Export</title><link>https://onshape-public.github.io/docs/api-adv/translation/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/translation/</guid><description>
&lt;p>This page describes the APIs Onshape provides for importing files to Onshape and exporting files from Onshape into different formats. We refer to the process of importing and exporting files from one format to another as &lt;em>translating&lt;/em> the files.&lt;/p>
&lt;p>Onshape provides several APIs to support this format translation. These fall into three categories:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#synchronous-exports">Synchronous exports&lt;/a> - Export Onshape content to glTF, STL, or Parasolid format.&lt;/li>
&lt;li>&lt;a href="#asynchronous-exports">Asynchronous exports&lt;/a> - Export Onshape content into a variety of other formats.&lt;/li>
&lt;li>&lt;a href="#imports">Import to Onshape&lt;/a> - Import a translatable file by uploading it to an Onshape blob element.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>📘 &lt;strong>Notes&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>This page provides sample code as curls. See the &lt;a href="https://curl.se/docs/">curl documentation&lt;/a> for more information.&lt;/li>
&lt;li>All Onshape API calls must be properly authenticated by replacing the &lt;code>CREDENTIALS&lt;/code> variable in the curls below. See the &lt;a href="https://onshape-public.github.io/docs/auth/apikeys">API Keys&lt;/a> page for instructions and the &lt;a href="https://onshape-public.github.io/docs/api-intro/quickstart">Quick Start&lt;/a> for an example. All applications submitted to the Onshape App Store &lt;em>must&lt;/em> authenticate with &lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth2&lt;/a>.&lt;/li>
&lt;li>This documentation refers to Onshape IDs in the following format: &lt;code>{did}, {wid}, {eid}, {pid}, {otherId}&lt;/code>. These represent document, workspace, element, part, and other IDs (respectively) that are needed make the API calls. We sometimes abbreviate these variables as &lt;code>DWVEM&lt;/code> Please see &lt;a href="https://onshape-public.github.io/docs/api-intro/#onshape-api-request">API Guide: API Intro&lt;/a> for information on what these IDs mean and how to obtain them from your documents. Never include the curly braces (&lt;code>{}&lt;/code>) in your API calls.&lt;/li>
&lt;li>For Enterprise accounts, replace &lt;strong>&lt;font color="slate">cad&lt;/font>&lt;/strong> in all Onshape URLs with your company domain.
https://&lt;font color="slate">&lt;strong>cad&lt;/strong>&lt;/font>.onshape.com &amp;gt; https://&lt;font color="slate">&lt;strong>companyName&lt;/strong>&lt;/font>.onshape.com&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="synchronous-exports">Synchronous exports&lt;/h2>
&lt;p>Onshape provides a simple way to export content to common formats (glTF, Parasolid, and STL). Most of the interfaces defined here operate by requesting an HTTP redirect to a different URL where the request is fulfilled. Applications must explicitly handle the redirect and attachment authentication headers to the follow-up request, or it will fail.&lt;/p>
&lt;p>The following endpoints are available. We&amp;rsquo;ve included an example curl with each one.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/exportPartGltf">Export Part to glTF&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/parts/d/{did}/w/{wid}/e/{eid}/partid/{partid}/gltf?rollbackBarIndex=-1&amp;amp;outputSeparateFaceNodes=false&amp;amp;outputFaceAppearances=false&amp;#39; \
-H &amp;#39;accept: model/gltf-binary;qs=0.08&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/exportPS">Export Part to Parasolid&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/parts/d/{did}/w/{wid}?elementId={eid}&amp;amp;withThumbnails=false&amp;amp;includePropertyDefaults=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/exportStl">Export Part to STL&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/parts/d/{did}/w/{wid}/e/{eid}/partid/{partid}/stl?mode=text&amp;amp;grouping=true&amp;amp;scale=1&amp;amp;units=inch&amp;#39; \
-H &amp;#39;accept: application/octet-stream&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/exportPartStudioGltf">Export PartStudio to glTF&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/partstudios/d/{did}/w/{wid}/e/{eid}/gltf?rollbackBarIndex=-1&amp;amp;outputSeparateFaceNodes=false&amp;amp;outputFaceAppearances=false&amp;#39; \
-H &amp;#39;accept: model/gltf-binary;qs=0.08&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/exportParasolid">Export PartStudio to Parasolid&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/partstudios/d/{did}/w/{wid}/e/{eid}/parasolid?version=0&amp;amp;includeExportIds=false&amp;amp;binaryExport=false&amp;#39; \
-H &amp;#39;accept: */*&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/exportPartStudioStl">Export PartStudio to STL&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/partstudios/d/{did}/w/{wid}/e/{eid}/stl?mode=text&amp;amp;grouping=true&amp;amp;scale=1&amp;amp;units=inch&amp;#39; \
-H &amp;#39;accept: */*&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Document/export2Json">Export Document to JSON&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/documents/d/{did}/w/{wid}/e/{eid}/export&amp;#39; \
-H &amp;#39;accept: application/octet-stream&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="asynchronous-exports">Asynchronous exports&lt;/h2>
&lt;p>The exports in the last section perform the format translation synchronously, returning the output immediately after some processing delay. Other format conversions are more complex and time-consuming, and in many cases, cannot be completed quickly enough to prevent connection errors. Note that the source format for an export is currently always automatically detected by Onshape. Part Studios and Assemblies are known to be &lt;code>ONSHAPE&lt;/code> format. File uploads have their type determined by the filename suffix. For example, a file named &lt;em>part7.step&lt;/em> is assumed to be in &lt;code>STEP&lt;/code> format.&lt;/p>
&lt;p>The following asynchronous translation APIs are available:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/createBlobTranslation">BlobElement/createBlobTranslation&lt;/a>: Export a Blob Element to the specified &lt;code>formatName&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/createPartStudioTranslation">PartStudios/createPartStudioTranslation&lt;/a>: Export a Part Studio to the specified &lt;code>formatName&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Assembly/translateFormat">Assembly/translateFormat&lt;/a>: Export an Assembly to the specified &lt;code>formatName&lt;/code>.&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingTranslation">Drawing/createDrawingTranslation&lt;/a>: Export a Drawing to the specified &lt;code>formatName&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>These asynchronous exports include a few additional steps, which are explained in more detail in the &lt;a href="#async-export-steps">next section&lt;/a>:&lt;/p>
&lt;ol>
&lt;li>See what formats are available for exporting your content with &lt;strong>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translation/getAllTranslatorFormats&lt;/a>&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;strong>Note:&lt;/strong> Parts with mesh data cannot be exported to ACIS, IGES, or OBJ format.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Call the desired &lt;strong>translation API&lt;/strong>.
&lt;ul>
&lt;li>Specify the target &lt;strong>&lt;code>formatName&lt;/code>&lt;/strong> in the request body JSON.&lt;/li>
&lt;li>Specify &lt;strong>&lt;code>storeInDocument=false&lt;/code>&lt;/strong> (default) to export the content to new file.&lt;/li>
&lt;li>Specify &lt;strong>&lt;code>storeInDocument=true&lt;/code>&lt;/strong> to export the content to a blob element in the source document.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Poll the &lt;strong>&lt;code>requestState&lt;/code>&lt;/strong> in the translation response and wait for a result of &lt;strong>&lt;code>DONE&lt;/code>&lt;/strong>.&lt;/li>
&lt;li>To retrieve the exported results:
&lt;ul>
&lt;li>External files: call &lt;strong>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Document/downloadExternalData">Document/downloadExternalData&lt;/a>&lt;/strong> on the &lt;code>resultExternalDataIds&lt;/code> from the translation response.&lt;/li>
&lt;li>Blob elements: call &lt;strong>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/downloadFileWorkspace">BlobElement/downloadFileWorkspace&lt;/a>&lt;/strong> on the &lt;code>resultElementIds&lt;/code> from the translation response.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="async-export-details">Async export details&lt;/h3>
&lt;p>To export your Onshape content to another format:&lt;/p>
&lt;ol>
&lt;li>Determine what export format file types are available for your content by calling: &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translations/getAllTranslatorFormats&lt;/a>.
&lt;ul>
&lt;li>Note that Drawings have their own API for this call: &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/getDrawingTranslatorFormats">Drawing/getDrawingTranslatorFormats&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Next, initiate the export by calling one of the asynchronous translation APIs.
&lt;ul>
&lt;li>Note that each of these APIs takes a JSON for specifying options for the export as part of the request body. Refer to the &lt;a href="https://onshape-public.github.io/docs/api-intro/explorer">API Explorer&lt;/a> page for help viewing these JSON docs.&lt;/li>
&lt;li>The target file format &lt;strong>must be specified in the &lt;code>formatName&lt;/code> field&lt;/strong> in the request body, and must match a valid format found in Step 1.&lt;/li>
&lt;li>By default, &lt;code>storeInDocument&lt;/code> is set to &lt;code>false&lt;/code> in the request body to export to a single data file (or a zip of multiple files). Set to &lt;code>true&lt;/code> to export as blob elements.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wait for the translation to complete. You can either register a webhook and wait to receive a notifcation that the translation is complete (see &lt;a href="https://onshape-public.github.io/docs/app-dev/webhook/">Webhook Notifications&lt;/a>), or you can poll the translation&amp;rsquo;s &lt;code>requestState&lt;/code>:
&lt;ul>
&lt;li>You can poll the &lt;code>requestState&lt;/code> from the initial translation&amp;rsquo;s response, or you can call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getTranslation">Translation/getTranslation&lt;/a> on the &lt;code>translationId&lt;/code> from the initial translation&amp;rsquo;s response.&lt;/li>
&lt;li>When a translation is complete, &lt;code>requestState&lt;/code> will change from &lt;code>ACTIVE&lt;/code> to either &lt;code>DONE&lt;/code> or &lt;code>FAILED&lt;/code>.&lt;/li>
&lt;li>When &lt;code>requestState=DONE&lt;/code>, results are available to be used.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Retrieve the exported results:
&lt;ul>
&lt;li>If you exported to an external file, call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Document/downloadExternalData">Documents/downloadExternalData&lt;/a> to retrieve the exported result.
&lt;ul>
&lt;li>Note that this API takes the source document ID and a &amp;ldquo;foreign ID&amp;rdquo; as required parameters.&lt;/li>
&lt;li>Use the &lt;code>resultExternalDataIds&lt;/code> from the translation response as the foreign ID (&lt;code>fid&lt;/code>).&lt;/li>
&lt;li>External data is associated with, but external to, the document used as translation context. This data is not versioned like with in-document data.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If your translation request body specified &lt;code>storeInDocument=true&lt;/code>, retrieve the blob element data with &lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/downloadFileWorkspace">BlobElement/downloadFileWorkspace&lt;/a>.
&lt;ul>
&lt;li>The element IDs for the new blob elements can be found in the &lt;code>resultElementIds&lt;/code> field in the translation response.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="imports">Imports&lt;/h2>
&lt;p>Files can be imported to Onshape as blob elements. When uploading a file to a blob element, either as a new element or an update to an existing element, if the file is a recognized format for import, it will be translated into &lt;code>ONSHAPE&lt;/code> format by default. This behavior can be overridden by the application, if desired.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/createTranslation">Translation/createTranslation&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/translations/d/{did}/w/{wid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: multipart/form-data&amp;#39; \
-F &amp;#39;storeInDocument=true&amp;#39; \
-F &amp;#39;flattenAssemblies=true
-F &amp;#39;file=@/path/filename.ext&amp;#39;
-F &amp;#39;formatName=&amp;#39; \
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/uploadFileCreateElement">BlobElement/uploadFileCreateElement&lt;/a>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/blobelements/d/{did}/w/{wid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: multipart/form-data&amp;#39; \
-F &amp;#39;storeInDocument=true&amp;#39; \
-F &amp;#39;file=@/path/filename.ext&amp;#39;
-F &amp;#39;formatName=&amp;#39; \
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/uploadFileUpdateElement">BlobElement/uploadFileUpdateElement&lt;/a>
&lt;pre tabindex="0">&lt;code> curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/blobelements/d/{did}/w/{wid}/e/{eid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: multipart/form-data&amp;#39; \
-F &amp;#39;storeInDocument=true&amp;#39; \
-F &amp;#39;locationElementId=&amp;#39; \
-F &amp;#39;file=@/path/filename.ext&amp;#39;
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>Note that these endpoints require you to specify the target document ID and workspace ID. You must also include the file to import. These APIs also includes a request body JSON for specifying options for the import.&lt;/p>
&lt;ul>
&lt;li>Override the translation to &lt;code>ONSHAPE&lt;/code> format by specifying a valid format in the &lt;code>formatName&lt;/code> field. Get a list of valid import formats by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translation/getAllTranslatorFormats&lt;/a>.&lt;/li>
&lt;li>Specify &lt;code>storeInDocument=true&lt;/code> to import the data as a blob element into the target document. Change to &lt;code>false&lt;/code> to only create an external data file.&lt;/li>
&lt;li>If the source file contains an assembly and &lt;code>flattenAssemblies=true&lt;/code>, the assembly structure is removed and a single part studio is created.&lt;/li>
&lt;li>Note that when using cURL, you must begin the path to the file with an &lt;code>@&lt;/code> symbol.&lt;/li>
&lt;/ul>
&lt;h2 id="sample-workflows">Sample Workflows&lt;/h2>
&lt;h3 id="export-a-partstudio-to-stl">Export a PartStudio to STL&lt;/h3>
&lt;p>We will export the &lt;code>CRANK&lt;/code> PartStudio from &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22">this public document&lt;/a> to an STL file.&lt;/p>
&lt;ol>
&lt;li>Call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/exportPartStudioStl">Part Studios/exportPartStudioStl&lt;/a> endpoint on the document:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/partstudios/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22/stl?mode=text&amp;amp;grouping=true&amp;amp;scale=1&amp;amp;units=inch&amp;#39; \
-H &amp;#39;accept: */*&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Navigate to the request URL to download the resulting STL file:
&lt;pre tabindex="0">&lt;code>https://cad.onshape.com/api/v6/partstudios/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22/stl?mode=text&amp;amp;grouping=true&amp;amp;scale=1&amp;amp;units=inch
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open the &lt;em>CRANK.stl&lt;/em> file from wherever your downloads are saved.&lt;/li>
&lt;/ol>
&lt;h3 id="export-a-part-to-parasolid">Export a Part to Parasolid&lt;/h3>
&lt;p>We will export the &lt;code>FLYWHEEL&lt;/code> part from &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22">this public document&lt;/a> to an STL file.&lt;/p>
&lt;ol>
&lt;li>Call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/getPartsWMV">Part/getPartsWMV&lt;/a> endpoint on your document and get all the part IDs:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/parts/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62?elementId=6bed6b43463f6a46a37b4a22&amp;amp;withThumbnails=false&amp;amp;includePropertyDefaults=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Locate the part to export (hint: look for &lt;code>name = yourPartName&lt;/code>) in the response body. Get the part ID from the &lt;code>partId&lt;/code> field. In the example below, &lt;code>partId = JiD&lt;/code> for &lt;code>name=FLYWHEEL&lt;/code>:
&lt;pre tabindex="0">&lt;code>[
...
{
&amp;#34;name&amp;#34; : &amp;#34;FLYWHEEL&amp;#34;,
&amp;#34;state&amp;#34; : &amp;#34;IN_PROGRESS&amp;#34;,
&amp;#34;propertySourceTypes&amp;#34; : {
&amp;#34;57f3fb8efa3416c06701d60f&amp;#34; : 3,
&amp;#34;57f3fb8efa3416c06701d60d&amp;#34; : 3,
&amp;#34;57f3fb8efa3416c06701d61e&amp;#34; : 3,
&amp;#34;57f3fb8efa3416c06701d60e&amp;#34; : 3,
&amp;#34;57f3fb8efa3416c06701d60c&amp;#34; : 3
},
&amp;#34;defaultColorHash&amp;#34; : &amp;#34;FzHLKqGeuTBFjmY_2_0&amp;#34;,
&amp;#34;ordinal&amp;#34; : 1,
&amp;#34;isMesh&amp;#34; : false,
&amp;#34;description&amp;#34; : &amp;#34;Flywheel&amp;#34;,
&amp;#34;microversionId&amp;#34; : &amp;#34;bdb504d2d4c948493a87ccf3&amp;#34;,
&amp;#34;partNumber&amp;#34; : &amp;#34;PRT-10241&amp;#34;,
&amp;#34;elementId&amp;#34; : &amp;#34;6bed6b43463f6a46a37b4a22&amp;#34;,
&amp;#34;partId&amp;#34; : &amp;#34;JiD&amp;#34;,
&amp;#34;bodyType&amp;#34; : &amp;#34;solid&amp;#34;,
&amp;#34;customProperties&amp;#34; : {
&amp;#34;57f3fb8efa3416c06701d61e&amp;#34; : &amp;#34;false&amp;#34;
}
...
]
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/exportPS">Part/exportPS&lt;/a> endpoint on the FLYWHEEL part:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/parts/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22/partid/JiD/parasolid?version=0&amp;#39; \
-H &amp;#39;accept: application/octet-stream&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Navigate to the request URL to download the resulting file:
&lt;pre tabindex="0">&lt;code>https://cad.onshape.com/api/v6/parts/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22/partid/JiD/parasolid?version=0
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Open the &lt;em>CRANK.x_t&lt;/em> file from your downloads. Note that the file is automatically named after the PartStudio to which the part belongs.&lt;/li>
&lt;/ol>
&lt;h3 id="export-a-partstudio-to-solidworks">Export a PartStudio to SOLIDWORKS&lt;/h3>
&lt;p>We will export the &lt;code>CRANK&lt;/code> PartStudio from &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22">this public document&lt;/a> to a SOLIDWORKS file.&lt;/p>
&lt;ol>
&lt;li>Validate that SOLIDWORKS is a supported export file type by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translation/getAllTranslatorFormats&lt;/a> and confirming that &lt;code>validDestinationFormat=true&lt;/code> for &lt;code>translatorName=SOLIDWORKS&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/translations/translationformats&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>[
{
&amp;#34;validSourceFormat&amp;#34;: true,
&amp;#34;validDestinationFormat&amp;#34;: true,
&amp;#34;name&amp;#34;: &amp;#34;SOLIDWORKS&amp;#34;,
&amp;#34;translatorName&amp;#34;: &amp;#34;solidworks&amp;#34;,
&amp;#34;couldBeAssembly&amp;#34;: true
}
]
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Initialize the export by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/createPartStudioTranslation">PartStudio/createPartStudioTranslation&lt;/a>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/partstudios/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/6bed6b43463f6a46a37b4a22/translations&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;formatName&amp;#34;: &amp;#34;SOLIDWORKS&amp;#34;,
&amp;#34;storeInDocument&amp;#34;: false,
&amp;#34;translate&amp;#34;: true
}&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that the API takes a JSON as part of the request body, in which you can specify options for the export.&lt;/li>
&lt;li>In this example, we&amp;rsquo;ve just shown a snippet of the entire JSON.&lt;/li>
&lt;li>A &lt;code>formatName&lt;/code> string must be specified that matches one of the valid formats you found in the last step. In this example, we set &lt;code>formatName&lt;/code> to &lt;code>SOLIDWORKS.&lt;/code>&lt;/li>
&lt;li>We want to export this to a new file, so we&amp;rsquo;ll leave &lt;code>storeInDocument&lt;/code> set to &lt;code>false&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Next, we poll the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/PartStudio/createPartStudioTranslation">PartStudio/createPartStudioTranslation&lt;/a> response until &lt;code>requestState&lt;/code> changes from &lt;code>ACTIVE&lt;/code> to &lt;code>DONE&lt;/code> or &lt;code>FAILED&lt;/code>.
&lt;pre tabindex="0">&lt;code>{
&amp;#34;documentId&amp;#34;: &amp;#34;e60c4803eaf2ac8be492c18e&amp;#34;,
&amp;#34;requestElementId&amp;#34;: &amp;#34;6bed6b43463f6a46a37b4a22&amp;#34;,
&amp;#34;requestState&amp;#34;: &amp;#34;DONE&amp;#34;,
&amp;#34;resultExternalDataIds&amp;#34;: &amp;#34;[{resultId}]&amp;#34;,
...
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Once &lt;code>requestState=DONE&lt;/code>, we can call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Document/downloadExternalData">Documents/downloadExternalData&lt;/a> to retrieve the exported result.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/documents/d/e60c4803eaf2ac8be492c18e/externaldata/{fid}&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Use the &lt;code>resultExternalDataIds&lt;/code> value from the translation response as the foreign ID (&lt;code>fid&lt;/code>).&lt;/li>
&lt;li>The new SOLIDWORKS file is returned as the response and will be downloaded to wherever the API call is made.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="export-an-assembly-to-step">Export an Assembly to STEP&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll export an assembly from &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/23a9385cd48c50167c32d6d1">this public document&lt;/a> to a STEP file.&lt;/p>
&lt;ol>
&lt;li>Make a copy of &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/23a9385cd48c50167c32d6d1">this public document&lt;/a> so you can export the assembly. Make a note of the documentId, workspaceId, and elementId of the assembly in your new document.&lt;/li>
&lt;li>Validate that STEP is a supported export file type for assemblies by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translation/getAllTranslatorFormats&lt;/a> and confirming that &lt;code>validDestinationFormat=true&lt;/code> and &lt;code>couldBeAssembly=true&lt;/code> for &lt;code>translatorName=STEP&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/translations/translationformats&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>[
{
&amp;#34;validSourceFormat&amp;#34;: true,
&amp;#34;validDestinationFormat&amp;#34;: true,
&amp;#34;name&amp;#34;: &amp;#34;STEP&amp;#34;,
&amp;#34;translatorName&amp;#34;: &amp;#34;step&amp;#34;,
&amp;#34;couldBeAssembly&amp;#34;: true
},
...
]
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Initialize the export by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Assembly/translateFormat">Assembly/translateFormat&lt;/a>. Replace &lt;code>{did}&lt;/code>, &lt;code>{wid}&lt;/code>, and &lt;code>{eid}&lt;/code> with the document, workspace, and element IDs from your copied document. Do NOT include the curly braces (&lt;code>{}&lt;/code>) in the final call.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/assemblies/d/{did}/w/{wid}/e/{eid}/translations&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;allowFaultyParts&amp;#34;: true,
&amp;#34;angularTolerance&amp;#34;: 0.001,
&amp;#34;formatName&amp;#34;: &amp;#34;STEP&amp;#34;,
&amp;#34;storeInDocument&amp;#34;: true
}&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that the API takes a JSON as part of the request body, in which you can specify options for the export.&lt;/li>
&lt;li>In the example above, we&amp;rsquo;ve just shown a snippet of the entire JSON where we allow faulty parts to be exported and set the angular tolerance to 0.001.&lt;/li>
&lt;li>A &lt;code>formatName&lt;/code> string must be specified that matches one of the valid formats you found in the last step. In this example, we set &lt;code>formatName&lt;/code> to &lt;code>STEP.&lt;/code>&lt;/li>
&lt;li>Set &lt;code>storeInDocument&lt;/code> to &lt;code>true&lt;/code> to upload the STEP file as a blob element in your document.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Next, we poll the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Assembly/translateFormat">Assembly/translateFormat&lt;/a> response until &lt;code>requestState&lt;/code> changes from &lt;code>ACTIVE&lt;/code> to &lt;code>DONE&lt;/code> or &lt;code>FAILED&lt;/code>.
&lt;pre tabindex="0">&lt;code>{
&amp;#34;resultDocumentId&amp;#34; : &amp;#34;{did}&amp;#34;,
&amp;#34;resultWorkspaceId&amp;#34; : &amp;#34;{wid}&amp;#34;,
&amp;#34;requestState&amp;#34; : &amp;#34;DONE&amp;#34;,
&amp;#34;requestElementId&amp;#34; : &amp;#34;{eid}&amp;#34;,
&amp;#34;resultExternalDataIds&amp;#34; : [ &amp;#34;{resultExternalId}&amp;#34; ],
&amp;#34;documentId&amp;#34; : &amp;#34;{did}&amp;#34;,
&amp;#34;workspaceId&amp;#34; : &amp;#34;{wid}&amp;#34;,
&amp;#34;resultElementIds&amp;#34; : {resulteid},
&amp;#34;name&amp;#34; : &amp;#34;GEARBOX_CHUCK&amp;#34;,
&amp;#34;id&amp;#34; : &amp;#34;{translationId}&amp;#34;,
&amp;#34;href&amp;#34; : &amp;#34;https://cad.onshape.com/api/v6/translations/{translationId}&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Once &lt;code>requestState=DONE&lt;/code>, we make a note of the &lt;code>resultElementId&lt;/code> in the response. This is the elementId of the STEP blob.&lt;/li>
&lt;li>Now, we can call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/downloadFileWorkspace">BlobElement/downloadFileWorkspace&lt;/a> to retrieve the exported results.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/blobelements/d/{did}/w/{wid}/e/{resulteid}&amp;#39; \
-H &amp;#39;accept: application/octet-stream&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Use the &lt;code>resultElementIds&lt;/code> value from the translation response as the element ID (&lt;code>{resulteid}&lt;/code>).&lt;/li>
&lt;li>Note that you can also open your document, click the &lt;code>GEARBOX_CHUCK.STEP&lt;/code> tab, and download the file from there.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="export-a-drawing-as-a-json">Export a Drawing as a JSON&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll export a Drawing from &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/15b07287508246ccd038e31e">this public document&lt;/a> to a JSON file. Exporting a Drawing to JSON is useful when you need to gather information about that drawing (for example, finding valid coordinates on which to place an inspection symbol).&lt;/p>
&lt;ol>
&lt;li>Make a copy of &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/15b07287508246ccd038e31e">this public document&lt;/a> so you can export the assembly. Make a note of the documentId, workspaceId, and elementId of the assembly in your new document.&lt;/li>
&lt;li>Validate that JSON is a supported export file type for Drawings by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/getDrawingTranslatorFormats">Drawing/getDrawingTranslatorFormats&lt;/a> and confirming that &lt;code>&amp;quot;name&amp;quot;: &amp;quot;DRAWING_JSON&amp;quot;&lt;/code> appears in the response for the drawing element in your copied document.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/translationformats&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>[
{
&amp;#34;name&amp;#34;: &amp;#34;DRAWING_JSON&amp;#34;,
&amp;#34;translatorName&amp;#34;: &amp;#34;drawing_json&amp;#34;,
&amp;#34;couldBeAssembly&amp;#34;: false
},
...
]
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Initialize the export by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingTranslation">Drawing/createDrawingTranslation&lt;/a>. Replace &lt;code>{did}&lt;/code>, &lt;code>{wid}&lt;/code>, and &lt;code>{eid}&lt;/code> with the document, workspace, and element IDs from your copied document. Do NOT include the curly braces (&lt;code>{}&lt;/code>) in the final call.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/drawings/d/{did}/w/{wid}/e/{eid}/translations&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;formatName&amp;#34;: &amp;#34;DRAWING_JSON&amp;#34;
}&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that the API takes a JSON as part of the request body, in which you can specify options for the export.&lt;/li>
&lt;li>The only required JSON field is &lt;code>formatName&lt;/code>, in which we&amp;rsquo;ve specified the format as found in the &lt;code>getDrawingTranslatorFormats&lt;/code> response body.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Next, we poll the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Drawing/createDrawingTranslation">Drawing/createDrawingTranslation&lt;/a> response until &lt;code>requestState&lt;/code> changes from &lt;code>ACTIVE&lt;/code> to &lt;code>DONE&lt;/code> or &lt;code>FAILED&lt;/code>.
&lt;pre tabindex="0">&lt;code>{
&amp;#34;resultDocumentId&amp;#34; : &amp;#34;{did}&amp;#34;,
&amp;#34;resultWorkspaceId&amp;#34; : &amp;#34;{wid}&amp;#34;,
&amp;#34;requestState&amp;#34; : &amp;#34;DONE&amp;#34;,
&amp;#34;requestElementId&amp;#34; : &amp;#34;{eid}&amp;#34;,
&amp;#34;resultExternalDataIds&amp;#34; : [ &amp;#34;{resultExternalId}&amp;#34; ],
&amp;#34;documentId&amp;#34; : &amp;#34;{did}&amp;#34;,
&amp;#34;workspaceId&amp;#34; : &amp;#34;{wid}&amp;#34;,
&amp;#34;resultElementIds&amp;#34; : {eid},
&amp;#34;name&amp;#34; : &amp;#34;GEARBOX_CHUCK&amp;#34;,
&amp;#34;id&amp;#34; : &amp;#34;{translationId}&amp;#34;,
&amp;#34;href&amp;#34; : &amp;#34;https://cad.onshape.com/api/v6/translations/{translationId}&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Once &lt;code>requestState=DONE&lt;/code>, we make a note of the &lt;code>&amp;quot;resultElementIds&amp;quot; : {resulteid},&lt;/code> in the response. This is the element ID of the JSON blob.&lt;/li>
&lt;li>Now, we can call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/BlobElement/downloadFileWorkspace">BlobElement/downloadFileWorkspace&lt;/a> to retrieve the exported results.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/blobelements/d/{did}/w/{wid}/e/{resulteid}&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;accept: application/octet-stream&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Use the &lt;code>{resultExternalId}&lt;/code> value from the translation response as the element ID (&lt;code>{resulteid}&lt;/code>). Do not include the curly braces in your call.&lt;/li>
&lt;li>Note that you can also open your document, click the &lt;code>GEARBOX_CHUCK.JSON&lt;/code> tab, and download the file from there.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="import-a-parasolid-file-as-a-part">Import a Parasolid file as a Part&lt;/h3>
&lt;p>In this example, we&amp;rsquo;ll import the &lt;em>FLYWHEEL&lt;/em> part from the &lt;em>CRANK.x_t&lt;/em> file we created in the &lt;a href="#export-a-part-to-parasolid">Export a Part to Parasolid&lt;/a> example.&lt;/p>
&lt;ol>
&lt;li>Open or create a new Onshape document in which to import the Part. Make a note of the documentId and workspaceId of your document.&lt;/li>
&lt;li>Validate that Parasolid is a supported export file type for imports by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats">Translation/getAllTranslatorFormats&lt;/a> and confirming that &lt;code>validSourceFormat=true&lt;/code> for &lt;code>translatorName=parasolid&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/translations/translationformats&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>[
{
&amp;#34;validSourceFormat&amp;#34;: true,
&amp;#34;validDestinationFormat&amp;#34;: true,
&amp;#34;name&amp;#34;: &amp;#34;PARASOLID&amp;#34;,
&amp;#34;translatorName&amp;#34;: &amp;#34;parasolid&amp;#34;,
&amp;#34;couldBeAssembly&amp;#34;: true
}
]s
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Initialize the import by calling &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/createTranslation">Translation/createTranslation&lt;/a>. In this example, the filename is &lt;code>CRANK.x_t&lt;/code>.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/translations/d/{did}/w/{wid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39;s \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: multipart/form-data&amp;#39; \
-F &amp;#39;formatName=&amp;#39; \
-F &amp;#39;flattenAssemblies=true&amp;#39; \
-F &amp;#39;translate=true&amp;#39; \
-F &amp;#39;file=@/pathToFile/CRANK.x_t&amp;#39; \
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Replace &lt;code>{did}&lt;/code> and &lt;code>{wid}&lt;/code> in the URL with the document and workspace IDs for the document you want to import the part to.&lt;/li>
&lt;li>Note that when using cURL, you must begin the path to the file with an &lt;code>@&lt;/code> symbol.&lt;/li>
&lt;li>Note that the API takes a JSON as part of the request body, in which you can specify options for the import.&lt;/li>
&lt;li>When importing files, the API assumes we are importing to the &lt;code>ONSHAPE&lt;/code> file type. You can override this and import to a different file type using the &lt;code>formatName&lt;/code> field. In this case, we can leave the &lt;code>formatName&lt;/code> field blank to import to the &lt;code>ONSHAPE&lt;/code> file type.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Next, we poll the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Translation/getDocumentTranslations">Translation/getDocumentTranslations&lt;/a> response until &lt;code>requestState&lt;/code> changes from &lt;code>ACTIVE&lt;/code> to &lt;code>DONE&lt;/code> or &lt;code>FAILED&lt;/code>.
&lt;pre tabindex="0">&lt;code>{
&amp;#34;requestState&amp;#34; : &amp;#34;DONE&amp;#34;,
&amp;#34;documentId&amp;#34; : &amp;#34;{did}&amp;#34;,
&amp;#34;workspaceId&amp;#34; : &amp;#34;{wid}&amp;#34;,
&amp;#34;resultElementIds&amp;#34; : [ &amp;#34;{resulteid}&amp;#34; ],
&amp;#34;name&amp;#34; : &amp;#34;FLYWHEEL&amp;#34;,
&amp;#34;id&amp;#34; : &amp;#34;{id}&amp;#34;,
&amp;#34;href&amp;#34; : &amp;#34;https://cad.onshape.com/api/v1/translations/{tid}&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Once &lt;code>requestState=DONE&lt;/code>, we can view the imported file as a Part in our Onshape document. The &lt;code>FLYWHEEL&lt;/code> part appears in a new PartStudio named &lt;code>CRANK&lt;/code> in our document.&lt;/li>
&lt;/ol>
&lt;h3 id="export-a-configured-part">Export a configured part&lt;/h3>
&lt;p>See the &lt;a href="https://onshape-public.github.io/docs/api-adv/configs">Configurations API Guide&lt;/a> for examples.&lt;/p>
&lt;h2 id="additional-resources">Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/help/Content/translation.htm">Onshape Help: Translation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/help/Content/Plans/webhooks.htm">Onshape Help: Webhooks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/app-dev/webhook">API Guide: Webhook Notifications&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/api-intro/explorer">API Explorer&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Metadata</title><link>https://onshape-public.github.io/docs/api-adv/metadata/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/metadata/</guid><description>
&lt;p>This page describes the APIs Onshape provides for working with document metadata.&lt;/p>
&lt;blockquote>
&lt;p>📘 &lt;strong>Notes&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>This page provides sample code as curls. See the &lt;a href="https://curl.se/docs/">curl documentation&lt;/a> for more information.&lt;/li>
&lt;li>All Onshape API calls must be properly authenticated by replacing the &lt;code>CREDENTIALS&lt;/code> variable in the curls below. See the &lt;a href="https://onshape-public.github.io/docs/auth/apikeys">API Keys&lt;/a> page for instructions and the &lt;a href="https://onshape-public.github.io/docs/api-intro/quickstart">Quick Start&lt;/a> for an example. All applications submitted to the Onshape App Store &lt;em>must&lt;/em> authenticate with &lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth2&lt;/a>.&lt;/li>
&lt;li>This documentation refers to Onshape IDs in the following format: &lt;code>{did}, {wid}, {eid}, {pid}, {otherId}&lt;/code>. These represent document, workspace, element, part, and other IDs (respectively) that are needed make the API calls. We sometimes abbreviate these variables as &lt;code>DWVEM&lt;/code> Please see &lt;a href="https://onshape-public.github.io/docs/api-intro/#onshape-api-request">API Guide: API Intro&lt;/a> for information on what these IDs mean and how to obtain them from your documents. Never include the curly braces (&lt;code>{}&lt;/code>) in your API calls.&lt;/li>
&lt;li>For Enterprise accounts, replace &lt;strong>&lt;font color="slate">cad&lt;/font>&lt;/strong> in all Onshape URLs with your company domain.
https://&lt;font color="slate">&lt;strong>cad&lt;/strong>&lt;/font>.onshape.com &amp;gt; https://&lt;font color="slate">&lt;strong>companyName&lt;/strong>&lt;/font>.onshape.com&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="endpoints">Endpoints&lt;/h2>
&lt;h3 id="get-metadata">Get Metadata&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/getWVMetadata">getWVMetadata&lt;/a>: Get metadata for a workspace or version.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/wv/{wvid}?inferMetadataOwner=false&amp;amp;depth=1&amp;amp;includeComputedProperties=true&amp;amp;includeComputedAssemblyProperties=false&amp;amp;thumbnail=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;\
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/getWMVEsMetadata">getWMVEsMetadata&lt;/a>: Get metadata for all elements in a document.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/wv/{wvid}/e?inferMetadataOwner=false&amp;amp;depth=1&amp;amp;includeComputedProperties=true&amp;amp;includeComputedAssemblyProperties=false&amp;amp;thumbnail=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/getWMVEMetadata">getWMVEMetadata&lt;/a>: Get metadata for an element.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/wv/{wvid}/e/{eid}?inferMetadataOwner=false&amp;amp;depth=1&amp;amp;includeComputedProperties=true&amp;amp;includeComputedAssemblyProperties=false&amp;amp;thumbnail=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/getWMVEPMetadata">getWMVEPMetadata&lt;/a>: Get metadata for a part.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/wv/{wvid}/e/{eid}/p/{pid}?rollbackBarIndex=-1&amp;amp;inferMetadataOwner=false&amp;amp;includeComputedProperties=true&amp;amp;includeComputedAssemblyProperties=false&amp;amp;thumbnail=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;\
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/getWMVEPsMetadata">getWMVEPsMetadata&lt;/a>: Get metadata for all parts in a document.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/wv/{wvid}/e/{eid}/p?inferMetadataOwner=false&amp;amp;includeComputedProperties=true&amp;amp;includeComputedAssemblyProperties=false&amp;amp;thumbnail=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39;\
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/getVEOPStandardContentMetadata">getVEOPStandardContentMetadata&lt;/a>: Get metadata for a standard content part.
&lt;ul>
&lt;li>&lt;code>{linkedDocumentId}&lt;/code>: ID of the document into which the standard content part is inserted.&lt;/li>
&lt;li>You can call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Assembly/getAssemblyDefinition">getAssemblyDefinition&lt;/a> to get the other values needed for the call:
&lt;ul>
&lt;li>&lt;code>{did}&lt;/code>: ID of the document in which the standard content part lives.&lt;/li>
&lt;li>&lt;code>{vid}&lt;/code>: ID of the version in which the standard content part lives.&lt;/li>
&lt;li>&lt;code>{eid}&lt;/code>: ID of the element tab in which the standard content part lives.&lt;/li>
&lt;li>&lt;code>{pid}&lt;/code>: Part ID of the standard content part.&lt;/li>
&lt;li>&lt;code>{config}&lt;/code>: Encoded configuration string.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/p/{pid}?configuration={config}&amp;amp;linkDocumentId={linkDocument}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h3 id="update-metadata">Update Metadata&lt;/h3>
&lt;p>To update metadata, you send a JSON in the API request body. This JSON block must include a &lt;code>jsonType&lt;/code> value and a &lt;code>properties&lt;/code> object array. Each object in the &lt;code>properties&lt;/code> array includes a &lt;code>propertyId&lt;/code> and the metadata key/value pairs.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/updateWVMetadata">updateWVMetadata&lt;/a>: Update workspace or version metadata.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/wv/{wvid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;jsonType&amp;#34;: (&amp;#34;metadata-workspace&amp;#34; | &amp;#34;metadata-version&amp;#34;) ,
&amp;#34;properties&amp;#34;: [
{
&amp;#34;propertyId&amp;#34;: &amp;#34;propertyId1&amp;#34;,
&amp;#34;key1&amp;#34;: &amp;#34;value&amp;#34;,
&amp;#34;key2&amp;#34;: &amp;#34;value
},
{
&amp;#34;propertyId&amp;#34;: &amp;#34;propertyId2&amp;#34;,
&amp;#34;key1&amp;#34;: &amp;#34;value&amp;#34;,
&amp;#34;key2&amp;#34;: &amp;#34;value
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/updateWVEMetadata">updateWVEMetadata&lt;/a>: Update element metadata.
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/wv/{wvid}/e/{eid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;jsonType&amp;#34;: &amp;#34;metadata-element&amp;#34;,
&amp;#34;properties&amp;#34;: [
{
&amp;#34;propertyId&amp;#34;: &amp;#34;propertyId&amp;#34;,
&amp;#34;key1&amp;#34;: &amp;#34;value&amp;#34;,
&amp;#34;key2&amp;#34;: &amp;#34;value
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/updateWVEPMetadata">updateWVEPMetadata&lt;/a>: Update part metadata
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/wv/{wvid}/e/{eid}/{iden}/{pid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;jsonType&amp;#34;: &amp;#34;metadata-part&amp;#34;,
&amp;#34;properties&amp;#34;: [
{
&amp;#34;propertyId&amp;#34;: &amp;#34;propertyId&amp;#34;,
&amp;#34;key1&amp;#34;: &amp;#34;value&amp;#34;,
&amp;#34;key2&amp;#34;: &amp;#34;value
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/updateVEOPStandardContentPartMetadata">updateVEOPStandardContentPartMetadata&lt;/a>: Update standard content part metadata.
&lt;ul>
&lt;li>&lt;code>{linkedDocumentId}&lt;/code>: ID of the document into which the standard content part is inserted.&lt;/li>
&lt;li>You can call &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Assembly/getAssemblyDefinition">getAssemblyDefinition&lt;/a> to get the other values needed for the call:
&lt;ul>
&lt;li>&lt;code>{did}&lt;/code>, &lt;code>{vid}&lt;/code>, &lt;code>{eid}&lt;/code>: IDs of the document, version, and element in which the standard content part lives.&lt;/li>
&lt;li>&lt;code>{companyId}&lt;/code>: ID of the company that owns the standard content part. All metadata changes to this standard content part will populate for the entire company.&lt;/li>
&lt;li>&lt;code>{pid}&lt;/code>: Part ID of the standard content part.&lt;/li>
&lt;li>&lt;code>{config}&lt;/code>: Encoded configuration string.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>For each &lt;code>items.properties&lt;/code> object, include a unique &lt;code>propertyId&lt;/code> and at least one key/value metadata pair.&lt;/li>
&lt;li>Updates made to standard content are global for all users and documents within the company.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/standardcontent/d/{did}?linkDocumentId={linkDocumentId}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;items&amp;#34;: [
{
&amp;#34;href&amp;#34;: &amp;#34;https://cad.onshape.com/api/metadata/standardcontent/d/did/v/vid/e/eid/c/companyId/p/pid?configuration=config&amp;amp;linkDocumentId=linkDocumentId&amp;amp;applyToAllConfigs=true&amp;#34;,
&amp;#34;properties&amp;#34;: [
{
&amp;#34;key&amp;#34;: &amp;#34;value&amp;#34;,
&amp;#34;propertyId&amp;#34;: &amp;#34;propertyId1&amp;#34;
},
{
&amp;#34;key&amp;#34;: &amp;#34;value&amp;#34;,
&amp;#34;propertyId&amp;#34;: &amp;#34;propertyId2&amp;#34;
}
]
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="sample-workflows">Sample Workflows&lt;/h2>
&lt;h3 id="get-a-part-property">Get a part property&lt;/h3>
&lt;p>In this example we&amp;rsquo;ll get the name of a part by getting the metadata from the &lt;code>DRILL_BIT&lt;/code> element in &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/958bceb5a2511b572dbbe851">this public document&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>Call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/getWMVEMetadata">Metadata/getWMVEMetadata&lt;/a> endpoint. Replace &lt;code>CREDENTIALS&lt;/code> with your authentication credentials:
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/958bceb5a2511b572dbbe851?inferMetadataOwner=false&amp;amp;depth=1&amp;amp;includeComputedProperties=true&amp;amp;includeComputedAssemblyProperties=false&amp;amp;thumbnail=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>In the response body, confirm that for &lt;code>properties.name=Name&lt;/code>, &lt;code>properties.value=DRILL_BIT&lt;/code>.
&lt;pre tabindex="0">&lt;code>{
&amp;#34;jsonType&amp;#34;: &amp;#34;metadata-element&amp;#34;,
&amp;#34;elementType&amp;#34;: 0,
&amp;#34;mimeType&amp;#34;: &amp;#34;onshape/partstudio&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;958bceb5a2511b572dbbe851&amp;#34;,
&amp;#34;properties&amp;#34;: [
{
&amp;#34;name&amp;#34;: &amp;#34;Name&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;DRILL_BIT&amp;#34;,
&amp;#34;defaultValue&amp;#34;: null,
&amp;#34;computedPropertyError&amp;#34;: null,
&amp;#34;propertySource&amp;#34;: 0,
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h3 id="update-a-part-property">Update a part property&lt;/h3>
&lt;p>In this example we will update a part&amp;rsquo;s description by getting the current metadata for the part, and then posting an update to that metadata.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Get your document information:&lt;/p>
&lt;p>Make a copy of &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/958bceb5a2511b572dbbe851">this public document&lt;/a>. Make a note of the new document&amp;rsquo;s document ID, workspace ID, and element ID.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Get the ID of the part to update:&lt;/p>
&lt;p>Call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Part/getPartsWMVE">Part/getPartsWMVE&lt;/a> API on your copied document to get a list of part IDs in the element. Only one part exists in the document, with a part ID of &lt;code>JHD&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;name&amp;#34;: &amp;#34;Main&amp;#34;,
...
&amp;#34;microversionId&amp;#34;: &amp;#34;{mid}&amp;#34;,
&amp;#34;partNumber&amp;#34;: null,
&amp;#34;elementId&amp;#34;: &amp;#34;{eid}&amp;#34;,
&amp;#34;partId&amp;#34;: &amp;#34;JHD&amp;#34;,
&amp;#34;bodyType&amp;#34;: &amp;#34;sheet&amp;#34;,
...
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Get the metadata of the part:&lt;/p>
&lt;p>We&amp;rsquo;ll call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/getWMVEPMetadata">Metadata/getWMVEPMetadata&lt;/a> endpoint to get the current metadata JSON for the part. Don&amp;rsquo;t forget to replace the URL parameters with the IDs from your copied document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/w/{wid}/e/{eid}/p/JHD?rollbackBarIndex=-1&amp;amp;inferMetadataOwner=false&amp;amp;includeComputedProperties=true&amp;amp;includeComputedAssemblyProperties=false&amp;amp;thumbnail=false&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Locate the property to update in the response:&lt;/p>
&lt;p>The call returns a response body in JSON format. Scroll to the &lt;code>Description&lt;/code> properties block of the JSON response, and notice that the &lt;code>value&lt;/code> field is an empty string.&lt;/p>
&lt;pre tabindex="0">&lt;code>...
{
&amp;#34;name&amp;#34;: &amp;#34;Description&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;defaultValue&amp;#34;: null,
&amp;#34;computedPropertyError&amp;#34;: null,
&amp;#34;propertySource&amp;#34;: 3,
&amp;#34;validator&amp;#34;: { },
&amp;#34;required&amp;#34;: false,
&amp;#34;editable&amp;#34;: true,
&amp;#34;propertyId&amp;#34;: &amp;#34;{propertyId}&amp;#34;,
&amp;#34;editableInUi&amp;#34;: true,
&amp;#34;dateFormat&amp;#34;: null,
&amp;#34;valueType&amp;#34;: &amp;#34;STRING&amp;#34;,
&amp;#34;enumValues&amp;#34;: null,
&amp;#34;multivalued&amp;#34;: false,
&amp;#34;computedAssemblyProperty&amp;#34;: false,
&amp;#34;computedProperty&amp;#34;: false,
&amp;#34;propertyOverrideStatus&amp;#34;: 0
},
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Find the metadata&amp;rsquo;s property ID:&lt;/p>
&lt;p>Copy Description&amp;rsquo;s &lt;code>propertyId&lt;/code>. We&amp;rsquo;ll need this ID to update the metadata.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Set up the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/updateWVEPMetadata">Metadata/updateWVEPMetadata&lt;/a> call:&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/w/{wid}/e/{eid}/p/JHD?rollbackBarIndex=-1&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Add the request JSON to the call:&lt;/p>
&lt;p>Note that we need to include the &lt;code>jsonType&lt;/code>, the &lt;code>partId&lt;/code>, the &lt;code>propertyId&lt;/code>, and the value to update.&lt;/p>
&lt;pre tabindex="0">&lt;code>-d &amp;#39;{
&amp;#34;jsonType&amp;#34;: &amp;#34;metadata-part&amp;#34;,
&amp;#34;partId&amp;#34;: &amp;#34;JHD&amp;#34;,
&amp;#34;properties&amp;#34;: [
{
&amp;#34;value&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;propertyId&amp;#34;: &amp;#34;{propertyId}&amp;#34;
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Add the new property information:&lt;/p>
&lt;p>In the request JSON, change the empty Description &lt;code>value&lt;/code> string to &lt;code>&amp;quot;Drill bit&amp;quot;&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>-d &amp;#39;{
&amp;#34;jsonType&amp;#34;: &amp;#34;metadata-part&amp;#34;,
&amp;#34;partId&amp;#34;: &amp;#34;JHD&amp;#34;,
&amp;#34;properties&amp;#34;: [
{
&amp;#34;value&amp;#34;: &amp;#34;Drill bit&amp;#34;,
&amp;#34;propertyId&amp;#34;: &amp;#34;{propertyId}&amp;#34;
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>POST the new metadata:&lt;/p>
&lt;p>Don&amp;rsquo;t forget to replace the URL parameters and &lt;code>CREDENTIALS&lt;/code> with your information.&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/w/{wid}/e/{eid}/p/JHD?rollbackBarIndex=-1&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;jsonType&amp;#34;: &amp;#34;metadata-part&amp;#34;,
&amp;#34;partId&amp;#34;: &amp;#34;JHD&amp;#34;,
&amp;#34;properties&amp;#34;: [
{
&amp;#34;value&amp;#34;: &amp;#34;Drill bit&amp;#34;,
&amp;#34;propertyId&amp;#34;: &amp;#34;{propertyId}&amp;#34;
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Confirm your changes:&lt;/p>
&lt;p>Repeat steps 3 and 4 to confirm that the Description &lt;code>value&lt;/code> for the part is now &lt;code>Drill bit&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="update-a-tab-name">Update a tab name&lt;/h3>
&lt;p>In this example we will update an element&amp;rsquo;s tab name by getting the current metadata for the element, and then posting an update to that metadata. Remember that in Onshape, an element is typically represented as a tab in the Onshape UI.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Get your document information:&lt;/p>
&lt;p>Make a copy of &lt;a href="https://cad.onshape.com/documents/e60c4803eaf2ac8be492c18e/w/d2558da712764516cc9fec62/e/4561b91a53c595c0010d5cdb">this public document&lt;/a>. Make a note of the new document&amp;rsquo;s document ID, workspace ID, and element ID. Note the tab name of the element is &amp;ldquo;NEW_PART&amp;rdquo;.&lt;/p>
&lt;p>&lt;/br>&lt;img src="https://onshape-public.github.io/images/metadata-update-tab-before.png" alt="Onshape document with NEW_PART tab name" width=950>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Get the metadata of the element:&lt;/p>
&lt;p>We&amp;rsquo;ll call the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/getWMVEMetadata">Metadata/getWMVEMetadata&lt;/a> endpoint to get the current metadata JSON for the element. Don&amp;rsquo;t forget to replace the URL parameters with the IDs from your copied document, and replace &lt;code>CREDENTIALS&lt;/code> with your authorization credentials.&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;GET&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/w/{wid}/e/{eid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Locate the property to update in the response:&lt;/p>
&lt;p>The call returns a response body in JSON format. Scroll to the &lt;code>Name&lt;/code> properties block of the JSON response, and notice that the &lt;code>value&lt;/code> field matches our current tab name, &amp;ldquo;NEW_PART&amp;rdquo;.&lt;/p>
&lt;pre tabindex="0">&lt;code>{
&amp;#34;jsonType&amp;#34;: &amp;#34;metadata-element&amp;#34;,
&amp;#34;elementType&amp;#34;: 0,
&amp;#34;mimeType&amp;#34;: &amp;#34;onshape/partstudio&amp;#34;,
&amp;#34;elementId&amp;#34;: &amp;#34;{eid}&amp;#34;,
&amp;#34;properties&amp;#34;: [
{
&amp;#34;name&amp;#34;: &amp;#34;Name&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;NEW_PART&amp;#34;,
&amp;#34;validator&amp;#34;: {},
&amp;#34;required&amp;#34;: true,
&amp;#34;editable&amp;#34;: true,
&amp;#34;propertyId&amp;#34;: &amp;#34;{propertyId}&amp;#34;,
},
...
],
...
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Find the metadata&amp;rsquo;s property ID:&lt;/p>
&lt;p>Copy the Name block&amp;rsquo;s &lt;code>propertyId&lt;/code> in the response. We&amp;rsquo;ll need this ID to update the metadata.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Set up the &lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata/updateWVEMetadata">updateWVEMetadata&lt;/a> call:&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/w/{wid}/e/{eid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Add the request JSON to the call:&lt;/p>
&lt;p>Note that we need to include the &lt;code>propertyId&lt;/code> and the value to update.&lt;/p>
&lt;pre tabindex="0">&lt;code>-d &amp;#39;{
&amp;#34;properties&amp;#34;: [
{
&amp;#34;value&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;propertyId&amp;#34;: &amp;#34;{propertyId}&amp;#34;
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Add the new property information:&lt;/p>
&lt;p>In the request JSON, replace &lt;code>{propertyId}&lt;/code> with the property ID you found in Step 4, then change the empty &lt;code>value&lt;/code> string to &lt;code>&amp;quot;PISTON&amp;quot;&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>-d &amp;#39;{
&amp;#34;properties&amp;#34;: [
{
&amp;#34;value&amp;#34;: &amp;#34;PISTON&amp;#34;,
&amp;#34;propertyId&amp;#34;: &amp;#34;{propertyId}&amp;#34;
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>POST the new metadata:&lt;/p>
&lt;p>Don&amp;rsquo;t forget to replace the URL parameters and &lt;code>CREDENTIALS&lt;/code> with your information.&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X &amp;#39;POST&amp;#39; \
&amp;#39;https://cad.onshape.com/api/v6/metadata/d/{did}/w/{wid}/e/{eid}&amp;#39; \
-H &amp;#39;accept: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
-H &amp;#39;Content-Type: application/json;charset=UTF-8; qs=0.09&amp;#39; \
-d &amp;#39;{
&amp;#34;properties&amp;#34;: [
{
&amp;#34;value&amp;#34;: &amp;#34;PISTON&amp;#34;,
&amp;#34;propertyId&amp;#34;: &amp;#34;{propertyId}&amp;#34;
}
]
}&amp;#39;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Confirm your changes:&lt;/p>
&lt;p>Open your document and confirm that the tab name is now &lt;code>PISTON&lt;/code>.&lt;/p>
&lt;p>&lt;/br>&lt;img src="https://onshape-public.github.io/images/metadata-update-tab-after.png" alt="Onshape document with NEW_PART tab name" width=950>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="additional-resources">Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cad.onshape.com/glassworks/explorer/#/Metadata">API Explorer: Metadata&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/api-intro/explorer">API Guide: API Explorer&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Response Codes</title><link>https://onshape-public.github.io/docs/api-adv/errors/</link><pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/api-adv/errors/</guid><description>
&lt;p>This page details some of the response codes that may be returned by Onshape API endpoints. For each response code, we&amp;rsquo;ve provided a brief description of the response and recommended next steps.&lt;/p>
&lt;h2 id="success-2xx">Success (2xx)&lt;/h2>
&lt;p>The client call was successful.&lt;/p>
&lt;h3 id="200---ok">200 - OK&lt;/h3>
&lt;p>The client call was successful. No action needed.&lt;/p>
&lt;h3 id="204---no-content">204 - No Content&lt;/h3>
&lt;p>The client call was successful, and there&amp;rsquo;s nothing to return in the response body. The empty response body cannot be parsed.&lt;/p>
&lt;h2 id="redirect-3xx">Redirect (3xx)&lt;/h2>
&lt;h3 id="307---temporary-redirect">307 - Temporary Redirect&lt;/h3>
&lt;p>The client call was successful, and a redirection URL was returned. Follow the URL provided in the response.&lt;/p>
&lt;h2 id="client-error-4xx">Client Error (4xx)&lt;/h2>
&lt;p>There’s an error with the client request. Find the error code below, and follow the instructions for resolution.&lt;/p>
&lt;h3 id="400---bad-request">400 - Bad Request&lt;/h3>
&lt;p>The request cannot be processed by the server due a client-side error. This could be a malformed request syntax or other issue. Check the request parameters (GET and POST) and request body (POST) to determine the cause of the failure.&lt;/p>
&lt;h3 id="401---unauthorized">401 - Unauthorized&lt;/h3>
&lt;p>The request failed the authentication/authorization checks. This could mean that the client is not logged in, API keys are invalid, OAuth failed, etc. Make sure the client is &lt;a href="https://onshape-public.github.io/docs/auth/">authenticated&lt;/a>.&lt;/p>
&lt;h3 id="403---forbidden">403 - Forbidden&lt;/h3>
&lt;p>The client doesn’t have the correct permissions to perform this operation. Check that the &lt;a href="https://onshape-public.github.io/docs/auth/">API Keys or OAuth authentication&lt;/a> have sufficient permissions to perform the operation. For example, POST operations typically require &lt;code>write&lt;/code> scope; if the API Key was created with only &lt;code>read&lt;/code> scope, the server will return a 403 error.&lt;/p>
&lt;p>You might also need to check document and user permissions. For more details, see &lt;a href="https://cad.onshape.com/help/Content/sharedocuments.htm">Share Documents&lt;/a> (for everyone) and &lt;a href="https://cad.onshape.com/help/Content/EnterpriseHelp/Content/permission_schemes.htm">Understanding and Administering Project Roles and Permission Schemes&lt;/a> (for Enterprise users and administrators).&lt;/p>
&lt;h3 id="404---not-found">404 - Not Found&lt;/h3>
&lt;p>The server can’t find what the client is looking for. For example, a 404 error will be returned if the client tries to make a GET request for a document that doesn’t exist.&lt;/p>
&lt;h3 id="405---method-not-allowed">405 - Method Not Allowed&lt;/h3>
&lt;p>Use of that method is not supported. For example, you cannot perform a DELETE request on a document version, because versions are read-only. Only GET requests on document versions are allowed.&lt;/p>
&lt;h3 id="406----not-acceptable">406 - Not Acceptable&lt;/h3>
&lt;p>The server cannot provide a response for the media type requested. See &lt;a href="https://datatracker.ietf.org/doc/html/rfc2616#section-6.1.1">https://datatracker.ietf.org/doc/html/rfc2616#section-6.1.1&lt;/a>.&lt;/p>
&lt;h3 id="409---conflict">409 - Conflict&lt;/h3>
&lt;p>The client call includes duplicate values, causing a conflict. Modify the request to remove any conflicting values.&lt;/p>
&lt;h3 id="415---media-type-not-supported">415 - Media Type Not Supported&lt;/h3>
&lt;p>The client call includes unsupported data types or invalid JSON. Review the client code. When performing data imports and exports, follow all &lt;a href="https://onshape-public.github.io/docs/api-adv/translation/">Translation guidelines&lt;/a> to ensure all media and file types are supported.&lt;/p>
&lt;h3 id="429---too-many-requests">429 - Too Many Requests&lt;/h3>
&lt;p>The client sent too many requests to a particular endpoint in a given time window. The number of requests allowed per time window vary and are subject to change. Onshape does not publish this information. If the client receives HTTP 429 responses, delay and then retry, or reduce its request rate.&lt;/p>
&lt;h3 id="499---timeout">499 - Timeout&lt;/h3>
&lt;p>This call is taking too long. Please try again later.&lt;/p>
&lt;h2 id="server-error-5xx">Server Error (5xx)&lt;/h2>
&lt;p>There’s an error with the Onshape servers. Find the error code below, and follow the instructions for resolution.&lt;/p>
&lt;h3 id="500---internal-server-error">500 - Internal Server Error&lt;/h3>
&lt;p>The request resulted in an error. Set a limit for the number of retries, and if the request continues to fail, reach out to &lt;a href="api-support@onshape.com">support&lt;/a>.&lt;/p>
&lt;h3 id="503---service-unavailable">503 - Service Unavailable&lt;/h3>
&lt;p>Something is wrong with the Onshape servers. Retry after the delay specified in the response. Set a limit for the number of retries, and if the request continues to fail, reach out to &lt;a href="api-support@onshape.com">support&lt;/a>.&lt;/p></description></item></channel></rss>