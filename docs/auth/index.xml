<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>â€“ Authentication</title><link>https://onshape-public.github.io/docs/auth/</link><description>Recent content in Authentication on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 18 May 2020 20:25:28 -0400</lastBuildDate><atom:link href="https://onshape-public.github.io/docs/auth/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: OAuth</title><link>https://onshape-public.github.io/docs/auth/oauth/</link><pubDate>Mon, 18 May 2020 20:39:14 -0400</pubDate><guid>https://onshape-public.github.io/docs/auth/oauth/</guid><description>
&lt;p>&lt;strong>See the &lt;a href="https://github.com/onshape-public/app-gltf-viewer">gltf-viewer-app&lt;/a> for a working example of OAuth2.&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>ðŸ“˜ &lt;strong>Note&lt;/strong>&lt;/p>
&lt;p>All applications submitted to the Onshape App Store (Onshape Apps) must use OAuth2 for authorization. Automation scripts (or applications not meant for the Onshape App Store) may use either OAuth2 or &lt;a href="https://onshape-public.github.io/docs/auth/apikeys">API Keys&lt;/a> for authentication. OAuth2 allows applications to call Onshape APIs on behalf of the users of the application; API keys will only perform operations on behalf of the Onshape user who generated the API keys.&lt;/p>
&lt;/blockquote>
&lt;h2 id="what-is-oauth2">What is OAuth2?&lt;/h2>
&lt;p>The OAuth (Open authorization) protocol was developed by the Internet Engineering Task Force, an open standards organization that develops and promotes voluntary Internet standards (particularly the technical standards that comprise the Internet protocol suite) to enable secure, delegated access to an application&amp;rsquo;s resources.&lt;/p>
&lt;p>The OAuth2 protocol enables an application to access a resource that is under the control of someone else. In order to access that resource, a &lt;i>token&lt;/i> is required. The token represent the delegated rights of access (that is, what rights this application has, such as read/write/update, scope, rights to different resources, and more).&lt;/p>
&lt;p>&lt;i>This means the application can be accessed by a third-party system without that system
impersonating the user that controls the resource.&lt;/i>&lt;/p>
&lt;p>A good analogy is the hotel check-in process. When you arrive at the front desk of a hotel, you provide an ID and a form of payment. Then, you are given a key card that opens a specific door. When you reach that door, you swipe your key card and are granted access. The door itself doesnâ€™t know who you are or anything about you, it just knows that the key card was encoded correctly, and it allows you access. At some point, the key card expires, and the door no longer lets you into the room. This is the same for access tokens in the OAuth2 flow.&lt;/p>
&lt;p>With the OAuth2 protocol, you register your application with the third party, and you are given a set of keys. These keys get exchanged for an access token that grants you access to resources in the third-party application. The token expires regularly; you miust get a new token to access the application again. For this, you are provided with a &lt;i>refresh token&lt;/i>. Sending the refresh token to the authentication server updates your access token and gives you a new refresh token.&lt;/p>
&lt;p>&lt;img src="https://onshape-public.github.io/images/APITokenRequestDiagram.png" alt="api token request diagram">&lt;/p>
&lt;h3 id="oauth2--onshape">OAuth2 &amp;amp; Onshape&lt;/h3>
&lt;p>The first step in the OAuth flow is for the Onshape user to request that Onshape let the third-party application access Onshape.&lt;/p>
&lt;p>Once the user has authorized the application, they are redirected to a predefined URL (called a &lt;i>redirect URL&lt;/i>) with a code that will requests an access token from Onshape. Therefore, the redirect URL should contain a script that can capture the authorization code.&lt;/p>
&lt;p>You will use the access token to authenticate requests to the Onshape API. The token expires after preset amount of time. To get a new valid access token after one has expired, you must use the refresh token to request a new access token. Refreshing the access token also provides you with an updated refresh token to use in the next refresh access token request. Make sure to store both the the access token and the refresh token, and update them with each refresh of the token. The authorization token must accompany any call to the API, this is done by adding the token to an Authorization field in the header of each request:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>Authorization: Bearer &amp;lt;accessToken&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If correctly authenticated, most responses from the REST API call return JSON data (though some return binary data), with an HTTP response code of &lt;code>200 Success&lt;/code>, &lt;code>204 - No Content&lt;/code>, or &lt;code>301 - Permanent Redirect&lt;/code>. &lt;code>301&lt;/code> responses will include a redirect for you to follow.&lt;/p>
&lt;p>In the event that the authorization code is incorrect (for instance, if it expired), you will receive an &lt;strong>HTTP 401&lt;/strong> response. This response means that the client request has not been completed, since it lacks valid authentication credentials for the requested resource. In this event, your code for each call to the REST API should include a catch clause for a 401 exception. Once caught, you can refresh the token and make the request again. Pay close attention to the &lt;code>Content-Type&lt;/code> header for what data to parse and expect.&lt;/p>
&lt;p>When integrating with Onshape, OAuth tokens give third-party applications (such as desktop applications or web services) access to users&amp;rsquo; data as defined by the permissions scope (such as users&amp;rsquo; documents or profile information). Using OAuth terminology, Onshape acts as both the authorization and resource server, while the desktop or web-based application is the client. Resource owners have the option of granting or denying access to applications.&lt;/p>
&lt;p>Once obtained, an OAuth token will work for third-party APIs under &lt;code>/api&lt;/code>. Do NOT attempt to use an OAuth token to fetch the URLs typically displayed in a web browsers location bar.&lt;/p>
&lt;h3 id="more-resources">More resources&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2">Digital Ocean&lt;/a> - A good resource for learning more about OAuth2.&lt;/li>
&lt;li>&lt;a href="http://tools.ietf.org/html/rfc6749">RFC 6749&lt;/a> - The reference for the OAuth framework as a whole. Most of this document describes how to implement the OAuth exchanges described by the reference within the context of Onshape and client applications.&lt;/li>
&lt;li>&lt;a href="http://tools.ietf.org/html/rfc6750">RFC 6750&lt;/a> - Describes the exchange of OAuth access tokens between clients and OAuth servers.&lt;/li>
&lt;/ul>
&lt;h2 id="implement-oauth2">Implement OAuth2&lt;/h2>
&lt;p>This OAuth tutorial demonstrates how to recreate the authentication process in Node.js found in the &lt;a href="https://github.com/onshape-public/app-gltf-viewer">gltf-viewer-app&lt;/a> sample code. The &lt;a href="#final-code">final code&lt;/a> in Node.js and other languages can be found at the end of this page.&lt;/p>
&lt;h3 id="1-register-the-app">1: Register the app&lt;/h3>
&lt;ol>
&lt;li>Navigate to &lt;a href="https://dev-portal.onshape.com/signin">https://dev-portal.onshape.com/signin&lt;/a> and sign in.&lt;/li>
&lt;li>In the left sidebar, click &lt;strong>OAuth applications&lt;/strong>.&lt;/li>
&lt;li>Click the &lt;strong>Create new OAuth application&lt;/strong> button.&lt;/li>
&lt;li>Fill out the form as follows:
&lt;ul>
&lt;li>Name: &lt;code>gltf-viewer-yourname&lt;/code>
&lt;ul>
&lt;li>The application name to display to users.&lt;/li>
&lt;li>Should include the name of your company to differentiate it from other possibly similar applications.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Primary format: &lt;code>com.yourname.gltf-viewer&lt;/code>
&lt;ul>
&lt;li>String that uniquely identifies your application and is a marker for the data it might store on Onshape servers.&lt;/li>
&lt;li>Cannot be changed after the application is registered.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Summary: &lt;code>Onshape OAuth tutorial&lt;/code>
&lt;ul>
&lt;li>Description of your application.&lt;/li>
&lt;li>Displayed to the user when theyâ€™re asked to grant the application permission to access their data.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Redirect URLs: &lt;code>http://localhost:5000/token&lt;/code>
&lt;ul>
&lt;li>Your application must specify at least one URL used in the OAuth protocol exchanges.&lt;/li>
&lt;li>This URL must also use SSL (a URL that begins withÂ https), with two exceptions applicable for
installed desktop applications: &lt;code>http://localhost:&amp;lt;port&amp;gt;&lt;/code> and &lt;code>urn:ietf:wg:oauth:2.0:oob&lt;/code>.&lt;/li>
&lt;li>e.g., &lt;code>https://app-gltf-viewer-yourname-c11f263794bc.herokuapp.com/oauthRedirect&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Admin team: &lt;code>No Team&lt;/code>
&lt;ul>
&lt;li>Optional.&lt;/li>
&lt;li>If defined, members of the team can make changes to the definition of this OAuth application.&lt;/li>
&lt;li>See the &lt;a href="https://cad.onshape.com/help/Content/teams-enterprise.htm">Help Docs: Teams&lt;/a> page for more information on creating teams in Onshape.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OAuth URL: &lt;code>none&lt;/code>
&lt;ul>
&lt;li>Should contain the URL of your deployed application.&lt;/li>
&lt;li>This is the first URL called from the Onshape Applications page.&lt;/li>
&lt;li>The page hosted at this URL should handle the OAuth authentication. Once your applicationâ€™s server has been authenticated on behalf of the user, that user should be redirected to your applications content.&lt;/li>
&lt;li>If you have not deployed your app yet, you can leave this field blank (as shown in this example) for local work and update it later.&lt;/li>
&lt;li>e.g., &lt;code>https://app-gltf-viewer-yourname-c11f263794bc.herokuapp.com/oauthSignin&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Permissions:
&lt;ul>
&lt;li>This is also called application scope, and it defines what access rights your application has to the userâ€™s data.&lt;/li>
&lt;li>&lt;strong>Application can read your profile information&lt;/strong> - Enable your application to access the Onshape user profile. Check this option.&lt;/li>
&lt;li>&lt;strong>Application can read your documents&lt;/strong> - Onshape documents created by this user can be accessed with read privileges only. Check this option.&lt;/li>
&lt;li>&lt;strong>Application can write to your documents&lt;/strong> - The user-owned Onshape documents can be modified by this application. Check this option.&lt;/li>
&lt;li>&lt;strong>Application can delete documents and workspaces&lt;/strong> - Your application will be able to delete a workspace within a document or the complete Onshape document. Do not check this option for this example.&lt;/li>
&lt;li>&lt;strong>Application can request Purchases on Your behalf&lt;/strong> - The application will have access to make purchases if required. Do not check this option for this example.&lt;/li>
&lt;li>&lt;strong>Application can share and unshare documents on your behalf&lt;/strong> - Onshapeâ€™s document sharing capabilities are very powerful; they enable other parties to access your shared documents with
predefined rights. If this option is checked, the application can automatically share a document with other people. Do not check this option for this example.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click &lt;strong>Create application&lt;/strong>.&lt;/li>
&lt;li>&lt;font style="color: red">&lt;b>COPY THE OAUTH SECRET FROM THE POP-UP WINDOW.&lt;b>&lt;/font>
&lt;ul>
&lt;li>You will not be able to access this secret again.&lt;/li>
&lt;li>This secret is unique to you and your app and should be protected like any sensitive password. For example, it should &lt;em>NOT&lt;/em> be checked in to source code control systems.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Copy the &lt;strong>OAuth client identifier&lt;/strong> from the app Details page that opens.
&lt;ul>
&lt;li>These OAuth secret and client ID keys will be used in your code for requesting a one-time user authorization code from Onshape.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Your application is now registered with Onshape and you have options to
modify the application definition through this portal.&lt;/p>
&lt;img src="https://onshape-public.github.io/images/devportalappdetails.png" alt="the gltf-viewer app in the onshape dev portal app details screen" />
&lt;h3 id="2-get-the-user-authorization-code">2: Get the user authorization code&lt;/h3>
&lt;p>Weâ€™ll start by loading the basic libraries required to run this sample. We&amp;rsquo;ll use Passport to authenticate requests through plugins known as strategies. In this example, we&amp;rsquo;ll use an Onshape-developed plugin called &lt;code>passport-onshape&lt;/code>, but you can define your own strategy to use with Passport, if you prefer. You can find more information on &lt;a href="https://www.npmjs.com/package/passport">Passport here&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>Create a directory for your app, and then install Passport and passport-onshape:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>npm install passport
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install passport-onshape
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Next, create a file calls &lt;code>app.js&lt;/code> and add the following definitions to the top of the file:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">// App definitions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> path = require(&lt;span style="color:#a50">&amp;#39;path&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> uuid = require(&lt;span style="color:#a50">&amp;#39;uuid&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> express = require(&lt;span style="color:#a50">&amp;#39;express&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> session = require(&lt;span style="color:#a50">&amp;#39;express-session&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> bodyParser = require(&lt;span style="color:#a50">&amp;#39;body-parser&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> passport = require(&lt;span style="color:#a50">&amp;#39;passport&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> OnshapeStrategy = require(&lt;span style="color:#a50">&amp;#39;passport-onshape&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> config = require(&lt;span style="color:#a50">&amp;#39;./config&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Next, tell Express to use Passport and initialize it. Note: you can replace the Express code with code for the web server of your choice.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">// Tell Express to use Passport, and initialize it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> app = express();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(express.&lt;span style="color:#00a">static&lt;/span>(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(express.&lt;span style="color:#00a">static&lt;/span>(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;dist&amp;#39;&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(bodyParser.json());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.set(&lt;span style="color:#a50">&amp;#39;trust proxy&amp;#39;&lt;/span>, &lt;span style="color:#099">1&lt;/span>); &lt;span style="color:#aaa;font-style:italic">// To allow to run correctly behind Heroku when deployed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(session({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secret: config.sessionSecret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> saveUninitialized: &lt;span style="color:#00a">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resave: &lt;span style="color:#00a">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cookie: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#a50">&amp;#39;app-gltf-viewer&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sameSite: &lt;span style="color:#a50">&amp;#39;none&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secure: &lt;span style="color:#00a">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> httpOnly: &lt;span style="color:#00a">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path: &lt;span style="color:#a50">&amp;#39;/&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxAge: &lt;span style="color:#099">1000&lt;/span> * &lt;span style="color:#099">60&lt;/span> * &lt;span style="color:#099">60&lt;/span> * &lt;span style="color:#099">24&lt;/span> &lt;span style="color:#aaa;font-style:italic">// 1 day
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(passport.initialize());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(passport.session());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Next, we&amp;rsquo;ll store the Onshape user information so it can be retrieved from &lt;code>req.user&lt;/code> in
each call. Passport usesÂ the &lt;code>serializeUser&lt;/code> function to persist user data (after successful
authentication) into the session. The functionÂ &lt;code>deserializeUser&lt;/code> is used
to retrieve user data from session.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Store the Onshape user information
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>passport.serializeUser((user, done) =&amp;gt; done(&lt;span style="color:#00a">null&lt;/span>, user));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>passport.deserializeUser((obj, done) =&amp;gt; done(&lt;span style="color:#00a">null&lt;/span>, obj));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>Initialize Passport with the Onshape Strategy:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Initialize Passport with the Onshape Strategy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>passport.use(&lt;span style="color:#00a">new&lt;/span> OnshapeStrategy({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientID: config.oauthClientId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientSecret: config.oauthClientSecret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> callbackURL: config.oauthCallbackUrl,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> authorizationURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/oauth/authorize`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tokenURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/oauth/token`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userProfileURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/api/users/sessioninfo`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (accessToken, refreshToken, profile, done) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> profile.accessToken = accessToken;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> profile.refreshToken = refreshToken;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> done(&lt;span style="color:#00a">null&lt;/span>, profile);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>Open your environment variables file (e.g.,&lt;code>.env&lt;/code>, &lt;code>.bashrc&lt;/code>, &lt;code>.bash_profile&lt;/code>, &lt;code>.zshrc,&lt;/code> etc.) and add the following environment variables, then save and close the file.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>authorizationURL : https://oauth.onshape.com/oauth/authorize
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tokenURL : https://oauth.onshape.com/oauth/token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>userProfileURL : https://cad.onshape.com/api/users/sessioninfo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The callback function will provide us with the &lt;code>accessToken&lt;/code>, the &lt;code>refreshToken&lt;/code>, and the userâ€™s Onshape profile once authentication has been successfully passed. We can now use this to update our database with user-specific information.&lt;/p>
&lt;p>Note that if you store the &lt;code>accessToken&lt;/code> and &lt;code>refreshToken&lt;/code> in the database along with the user record, you must update it each time that the access codes are refreshed.&lt;/p>
&lt;ol start="8">
&lt;li>Next, we define our endpoint where the authorization flow starts (in this case, &lt;code>/oauthSignin&lt;/code>). This is the endpoint that we previously defined in the Onshape application setup. This will redirect to an Onshape page in order for the user to confirm (or deny) the applications access to theOnshape resources.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Define the Onshape API endpoint
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>app.use(&lt;span style="color:#a50">&amp;#39;/oauthSignin&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">/* These 5 lines are specific to the glTF Viewer sample app. You can replace them with the input for whatever Onshape endpoints you are using in your app */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> state = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docId: req.query.documentId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workId: req.query.workspaceId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elId: req.query.elementId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req.session.state = state;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> passport.authenticate(&lt;span style="color:#a50">&amp;#39;onshape&amp;#39;&lt;/span>, { state: uuid.v4(state) })(req, res);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-exchange-the-code-for-an-access-token">3: Exchange the code for an access token&lt;/h3>
&lt;p>Fortunately, if you are using Passport, there isnâ€™t much to do once the user grants authorization. The return URL will contain the one-time authorization token, which Passport will extract and exchange for an access token and a refresh token, which are available in Passport callback function.&lt;/p>
&lt;ol>
&lt;li>Add the following code to &lt;code>app.js&lt;/code>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Exchange the code for an access token
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>app.use(&lt;span style="color:#a50">&amp;#39;/oauthRedirect&amp;#39;&lt;/span>, passport.authenticate(&lt;span style="color:#a50">&amp;#39;onshape&amp;#39;&lt;/span>, { failureRedirect: &lt;span style="color:#a50">&amp;#39;/grantDenied&amp;#39;&lt;/span> }), (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">/* This code is specific to the glTF Viewer sample app. You can replace it with the input for whatever Onshape endpoints you are using in your app. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.redirect(&lt;span style="color:#a50">`/?documentId=&lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.docId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a50">&amp;amp;workspaceId=&lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.workId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">&amp;amp;elementId=
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a50"> &lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.elId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>If the user clicks &lt;strong>Deny&lt;/strong> instead of &lt;strong>Authorize Application&lt;/strong>, they are taken to a page that notifies them that access to the application was denied. We can see that in the &lt;code>failureRedirect&lt;/code> argument. Add the following to &lt;code>app.js&lt;/code>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Handle denied access
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>app.get(&lt;span style="color:#a50">&amp;#39;/grantDenied&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.sendFile(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;html&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;grantDenied.html&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we have received the access token, and it can be accessed from &lt;code>res.user.accessToken&lt;/code> on this page or from &lt;code>req.user.accessToken&lt;/code> from any other page you redirect to from here.&lt;/p>
&lt;h3 id="4-use-the-access-token">4: Use the access token&lt;/h3>
&lt;ol>
&lt;li>Add the following to the bottom of &lt;code>app.js&lt;/code>. You can see that the access token is used as an Authorization header:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Use the access token as an Authorization header
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>makeOnshapeAPICall: &lt;span style="color:#00a">async&lt;/span> (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> apiUrl = &lt;span style="color:#a50">&amp;#34;https://cad.onshape.com/api/documents?ownerType=1&amp;amp;sortColumn=createdAt&amp;amp;sortOrder=desc&amp;amp;offset=0&amp;amp;limit=20&amp;#34;&lt;/span>; &lt;span style="color:#aaa;font-style:italic">//You can replace this with any Onshape API endpoint URL.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">const&lt;/span> resp = &lt;span style="color:#00a">await&lt;/span> fetch(normalizedUrl, { headers: { Authorization: &lt;span style="color:#a50">`Bearer &lt;/span>&lt;span style="color:#a50">${&lt;/span>req.user.accessToken&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span> }});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> data = &lt;span style="color:#00a">await&lt;/span> resp.text();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> contentType = resp.headers.get(&lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.status(resp.status).contentType(contentType).send(data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">catch&lt;/span> (err) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.status(&lt;span style="color:#099">500&lt;/span>).json({ error: err });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: in the glTF Viewer sample app, this code appears in &lt;code>utils.js&lt;/code> instead of &lt;code>app.js&lt;/code>.&lt;/p>
&lt;h3 id="5-refresh-the-token">5: Refresh the token&lt;/h3>
&lt;p>When the access token expires, it must be refreshed by making another &lt;code>POST&lt;/code> request toÂ &lt;code>https://oauth.onshape.com/oauth/token&lt;/code>Â with the following URL-encoded form body (with &lt;code>Content-TypeÂ application/x-www-form-urlencoded&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00">grant_type&lt;/span>=refresh_token&amp;amp;&lt;span style="color:#a00">refresh_token&lt;/span>=&lt;span style="color:#a50">\&amp;lt;&lt;/span>refresh_token&lt;span style="color:#a50">\&amp;gt;&lt;/span>&amp;amp;&lt;span style="color:#a00">client_id&lt;/span>=&lt;span style="color:#a50">\&amp;lt;&lt;/span>client_id&lt;span style="color:#a50">\&amp;gt;&lt;/span>&amp;amp;&lt;span style="color:#a00">client_secret&lt;/span>=&lt;span style="color:#a50">\&amp;lt;&lt;/span>client_secret&lt;span style="color:#a50">\&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As with the authorization code data, the parameters in the form body must be URL-encoded. The response to this &lt;code>POST&lt;/code> request will be a JSON-encoded structure with a newÂ &lt;code>access_token&lt;/code>Â value that can be used for the next 60 minutes.&lt;/p>
&lt;p>Refresh tokens are valid for the lifetime of the userâ€™s grant. If a user who previously granted access to your application decides to revoke the grant, the refresh token is invalidated. If the user decides to re-grant application access, a new refresh token is generated and returned along with the access token.&lt;/p>
&lt;ol>
&lt;li>Add the following to &lt;code>app.js&lt;/code>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">/** After landing on the home page, we check if a user had already signed in. If no user has signed in, we redirect the request to the OAuth sign-in page. If a user had signed in previously, we will attempt to refresh the access token of the user. After successfully refreshing the access token, we will simply take the user to the landing page of the app. If the refresh token request fails, we will redirect the user to the OAuth sign-in page again. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.get(&lt;span style="color:#a50">&amp;#39;/&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">if&lt;/span> (!req.user) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> res.redirect(&lt;span style="color:#a50">`/oauthSignin&lt;/span>&lt;span style="color:#a50">${&lt;/span>req._parsedUrl.search ? req._parsedUrl.search : &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> refreshAccessToken(req.user).then((tokenJson) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Dereference the user object and update the access token and refresh token in the in-memory object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">let&lt;/span> usrObj = JSON.parse(JSON.stringify(req.user));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usrObj.accessToken = tokenJson.access_token;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usrObj.refreshToken = tokenJson.refresh_token;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Update the user object in PassportJS. No redirections will happen here, this is a purely internal operation.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> req.login(usrObj, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> res.sendFile(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;html&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;index.html&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).&lt;span style="color:#00a">catch&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Refresh token failed, take the user to OAuth sign in page.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">return&lt;/span> res.redirect(&lt;span style="color:#a50">`/oauthSignin&lt;/span>&lt;span style="color:#a50">${&lt;/span>req._parsedUrl.search ? req._parsedUrl.search : &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Refresh the access token
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> refreshAccessToken = &lt;span style="color:#00a">async&lt;/span> (user) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> body = &lt;span style="color:#a50">&amp;#39;grant_type=refresh_token&amp;amp;refresh_token=&amp;#39;&lt;/span> + user.refreshToken + &lt;span style="color:#a50">&amp;#39;&amp;amp;client_id=&amp;#39;&lt;/span> + config.oauthClientId + &lt;span style="color:#a50">&amp;#39;&amp;amp;client_secret=&amp;#39;&lt;/span> + config.oauthClientSecret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">let&lt;/span> res = &lt;span style="color:#00a">await&lt;/span> fetch(config.oauthUrl + &lt;span style="color:#a50">&amp;#34;/oauth/token&amp;#34;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method: &lt;span style="color:#a50">&amp;#39;POST&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>: &lt;span style="color:#a50">&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> body: body
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">if&lt;/span> (res.ok) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> &lt;span style="color:#00a">await&lt;/span> res.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">throw&lt;/span> &lt;span style="color:#00a">new&lt;/span> &lt;span style="color:#0aa">Error&lt;/span>(&lt;span style="color:#a50">&amp;#34;Could not refresh access token, please sign in again.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(&lt;span style="color:#a50">&amp;#39;/api&amp;#39;&lt;/span>, require(&lt;span style="color:#a50">&amp;#39;./api&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>module.exports = app;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Save the file.&lt;/li>
&lt;li>To see the authentication working in practice, you can follow the instructions in the &lt;a href="https://github.com/onshape-public/app-gltf-viewer#readme">glTF Viewer README&lt;/a> to deploy the glTF Viewer app.&lt;/li>
&lt;/ol>
&lt;h3 id="6-grant-authorization">6: Grant authorization&lt;/h3>
&lt;p>For apps published in the Onshape App Store, the Onshape user must grant authorization to your application to access the Onshape data. This must be done by each user of your app.&lt;/p>
&lt;p>To grant the application access to a user&amp;rsquo;s data in Onshape, the &lt;em>Onshape user&lt;/em> must follow the steps below:&lt;/p>
&lt;ol>
&lt;li>Sign in to &lt;code>cad.onshape.com&lt;/code> (or &lt;code>https://companyName.onshape.com&lt;/code> for Enterprise acccounts).&lt;/li>
&lt;li>Click their name in the top-right corner of the Onshape window, and then click &lt;strong>My account&lt;/strong> in the dropdown menu.
&lt;/br>&lt;img src="https://onshape-public.github.io/images/myaccountdropdown.png" alt="drawing" width="300"/>&lt;/li>
&lt;li>Click &lt;strong>Applications&lt;/strong> in the left sidebar.
&lt;ul>
&lt;li>Note that the gltf-viewer app will not appear in this list until it has been deployed and subscribed to as described in the &lt;a href="https://github.com/onshape-public/app-gltf-viewer#readme">glTF Viewer README&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click &lt;strong>Grant&lt;/strong> next to your app name to grant it access to their Onshape data. The Onshape user can click &lt;strong>Revoke&lt;/strong> at any time to prevent your app from accessing their Onshape data.&lt;/li>
&lt;li>The user will see the Authorize application screen shown below and will need to confirm their authorization grant by clicking &lt;strong>Authorize application&lt;/strong>. The user is then redirected to the Redirect URL you specified in your code. Your app can now access the user&amp;rsquo;s Onshape resources and profile.&lt;/li>
&lt;/ol>
&lt;h2 id="notes">Notes&lt;/h2>
&lt;h3 id="installed-desktop-applications">Installed desktop applications&lt;/h3>
&lt;p>OAuth is designed for interactions between two servers using a browser. However, it can also be used by an installed desktop (or mobile) application. The application must perform a similar role to that of a third party server: it must exchange the code for an access token structure.&lt;/p>
&lt;p>To enable this, Onshape allows two special forms of redirect URI to be registered:&lt;/p>
&lt;ul>
&lt;li>&lt;code>http://localhost:&amp;lt;port&amp;gt;&lt;/code> Causes the browser to attempt to load a page from the host upon which it is running. The code parameter will be supplied exactly the same as outlined above. If the application can listen on the registered port and behave as a simple web server for the redirect URL, it can retrieve the code in the same way as a deployed web server.&lt;/li>
&lt;li>&lt;code>urn:ietf:wg:oauth:2.0:oob&lt;/code> Causes the browser to display a simple page after a request has been granted instead of going to a new URL. The page contains simple instructions to copy and paste code into an application field. The browser will also update the title of the window to contain the code. An application could also look for browsers with window titles containing the string &lt;code>Success code=&amp;lt;code&amp;gt;&lt;/code> and automatically grab the code from the browser window title. If an error occurs (e.g., the grant is denied), the browser window title will contain &lt;code>Error description=&amp;lt;error string&amp;gt;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="debugging">Debugging&lt;/h3>
&lt;p>Debugging OAuth can be a little tricky. Some tips are below:&lt;/p>
&lt;ol>
&lt;li>Make sure you are correctly URL encoding the values supplied to the oauth/authorize and oauth/token endpoints.&lt;/li>
&lt;li>Use a &lt;code>GET /oauth/authorize&lt;/code> but a &lt;code>POST /oauth/token&lt;/code> and make sure that the GET uses query parameters but that the &lt;code>POST&lt;/code> uses a URL-encoded form body.&lt;/li>
&lt;li>If you supply a &lt;code>redirect_uri&lt;/code> to &lt;code>/oauth/authorize&lt;/code>, you must also supply it as an additional parameter in the &lt;code>POST&lt;/code> to &lt;code>/oauth/token&lt;/code>&lt;/li>
&lt;li>Use a tool such as &lt;a href="https://portswigger.net/burp">Burp&lt;/a> or &lt;a href="http://charlesproxy.com">Charles&lt;/a> to deliberately &amp;lsquo;man-in-the-middle&amp;rsquo; the connection requests between your server and Onshape, and verify that you are performing the correct REST operations (GET vs. POST) and correctly URL-encoding the parameter values.&lt;/li>
&lt;/ol>
&lt;h2 id="final-code">Final Code&lt;/h2>
&lt;p>The above example uses Node.js to authenticate an Onshape app. This section includes the code for using OAuth2 with other coding languages.&lt;/p>
&lt;h3 id="nodejs">Node.js&lt;/h3>
&lt;p>&lt;strong>Prerequisites&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install passport
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install passport-onshape
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Environment variables&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>authorizationURL : &amp;lt;https://oauth.onshape.com/oauth/authorize&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tokenURL : &amp;lt;https://oauth.onshape.com/oauth/token&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>userProfileURL : &amp;lt;https://cad.onshape.com/api/users/sessioninfo&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>app.js&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//App definitions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> path = require(&lt;span style="color:#a50">&amp;#39;path&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> uuid = require(&lt;span style="color:#a50">&amp;#39;uuid&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> express = require(&lt;span style="color:#a50">&amp;#39;express&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> session = require(&lt;span style="color:#a50">&amp;#39;express-session&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> bodyParser = require(&lt;span style="color:#a50">&amp;#39;body-parser&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> passport = require(&lt;span style="color:#a50">&amp;#39;passport&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> OnshapeStrategy = require(&lt;span style="color:#a50">&amp;#39;passport-onshape&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">const&lt;/span> config = require(&lt;span style="color:#a50">&amp;#39;./config&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Tell Express to use Passport, and initialize it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> app = express();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(express.&lt;span style="color:#00a">static&lt;/span>(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(express.&lt;span style="color:#00a">static&lt;/span>(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;dist&amp;#39;&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(bodyParser.json());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.set(&lt;span style="color:#a50">&amp;#39;trust proxy&amp;#39;&lt;/span>, &lt;span style="color:#099">1&lt;/span>); &lt;span style="color:#aaa;font-style:italic">// To allow to run correctly behind Heroku when deployed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(session({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secret: config.sessionSecret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> saveUninitialized: &lt;span style="color:#00a">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resave: &lt;span style="color:#00a">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cookie: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#a50">&amp;#39;app-gltf-viewer&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sameSite: &lt;span style="color:#a50">&amp;#39;none&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secure: &lt;span style="color:#00a">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> httpOnly: &lt;span style="color:#00a">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path: &lt;span style="color:#a50">&amp;#39;/&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxAge: &lt;span style="color:#099">1000&lt;/span> * &lt;span style="color:#099">60&lt;/span> * &lt;span style="color:#099">60&lt;/span> * &lt;span style="color:#099">24&lt;/span> &lt;span style="color:#aaa;font-style:italic">// 1 day
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(passport.initialize());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(passport.session());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Store the Onshape user information
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>passport.serializeUser((user, done) =&amp;gt; done(&lt;span style="color:#00a">null&lt;/span>, user));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>passport.deserializeUser((obj, done) =&amp;gt; done(&lt;span style="color:#00a">null&lt;/span>, obj));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Initialize Passport with the Onshape Strategy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>passport.use(&lt;span style="color:#00a">new&lt;/span> OnshapeStrategy({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientID: config.oauthClientId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientSecret: config.oauthClientSecret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> callbackURL: config.oauthCallbackUrl,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> authorizationURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/oauth/authorize`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tokenURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/oauth/token`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userProfileURL: &lt;span style="color:#a50">`&lt;/span>&lt;span style="color:#a50">${&lt;/span>config.oauthUrl&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">/api/users/sessioninfo`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (accessToken, refreshToken, profile, done) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> profile.accessToken = accessToken;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> profile.refreshToken = refreshToken;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> done(&lt;span style="color:#00a">null&lt;/span>, profile);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Define the Onshape API endpoint
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>app.use(&lt;span style="color:#a50">&amp;#39;/oauthSignin&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">/* These 5 lines are specific to the glTF Viewer sample app. You can replace them with the input for whatever Onshape endpoints you are using in your app. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> state = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docId: req.query.documentId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workId: req.query.workspaceId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elId: req.query.elementId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req.session.state = state;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> passport.authenticate(&lt;span style="color:#a50">&amp;#39;onshape&amp;#39;&lt;/span>, { state: uuid.v4(state) })(req, res);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(&lt;span style="color:#a50">&amp;#39;/oauthRedirect&amp;#39;&lt;/span>, passport.authenticate(&lt;span style="color:#a50">&amp;#39;onshape&amp;#39;&lt;/span>, { failureRedirect: &lt;span style="color:#a50">&amp;#39;/grantDenied&amp;#39;&lt;/span> }), (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">/* This code is specific to the glTF Viewer sample app. You can replace it with the input for whatever Onshape endpoints you are using in your app. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.redirect(&lt;span style="color:#a50">`/?documentId=&lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.docId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">&amp;amp;workspaceId=&lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.workId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">&amp;amp;elementId=&lt;/span>&lt;span style="color:#a50">${&lt;/span>req.session.state.elId&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Handle denied access
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>app.get(&lt;span style="color:#a50">&amp;#39;/grantDenied&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.sendFile(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;html&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;grantDenied.html&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">/** After landing on the home page, we check if a user had already signed in. If no user has signed in, we redirect the request to the OAuth sign-in page. If a user had signed in previously, we will attempt to refresh the access token of the user. After successfully refreshing the access token, we will simply take the user to the landing page of the app. If the refresh token request fails, we will redirect the user to the OAuth sign-in page again. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.get(&lt;span style="color:#a50">&amp;#39;/&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">if&lt;/span> (!req.user) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> res.redirect(&lt;span style="color:#a50">`/oauthSignin&lt;/span>&lt;span style="color:#a50">${&lt;/span>req._parsedUrl.search ? req._parsedUrl.search : &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> refreshAccessToken(req.user).then((tokenJson) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Dereference the user object, and update the access token and refresh token in the in-memory object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">let&lt;/span> usrObj = JSON.parse(JSON.stringify(req.user));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usrObj.accessToken = tokenJson.access_token;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usrObj.refreshToken = tokenJson.refresh_token;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Update the user object in PassportJS. No redirections will happen here, this is a purely internal operation.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> req.login(usrObj, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> res.sendFile(path.join(__dirname, &lt;span style="color:#a50">&amp;#39;public&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;html&amp;#39;&lt;/span>, &lt;span style="color:#a50">&amp;#39;index.html&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).&lt;span style="color:#00a">catch&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aaa;font-style:italic">// Refresh token failed, take the user to OAuth sign in page.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">return&lt;/span> res.redirect(&lt;span style="color:#a50">`/oauthSignin&lt;/span>&lt;span style="color:#a50">${&lt;/span>req._parsedUrl.search ? req._parsedUrl.search : &lt;span style="color:#a50">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Refresh the access token
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">const&lt;/span> refreshAccessToken = &lt;span style="color:#00a">async&lt;/span> (user) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> body = &lt;span style="color:#a50">&amp;#39;grant_type=refresh_token&amp;amp;refresh_token=&amp;#39;&lt;/span> + user.refreshToken + &lt;span style="color:#a50">&amp;#39;&amp;amp;client_id=&amp;#39;&lt;/span> + config.oauthClientId + &lt;span style="color:#a50">&amp;#39;&amp;amp;client_secret=&amp;#39;&lt;/span> + config.oauthClientSecret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">let&lt;/span> res = &lt;span style="color:#00a">await&lt;/span> fetch(config.oauthUrl + &lt;span style="color:#a50">&amp;#34;/oauth/token&amp;#34;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method: &lt;span style="color:#a50">&amp;#39;POST&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>: &lt;span style="color:#a50">&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> body: body
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">if&lt;/span> (res.ok) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> &lt;span style="color:#00a">await&lt;/span> res.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">throw&lt;/span> &lt;span style="color:#00a">new&lt;/span> &lt;span style="color:#0aa">Error&lt;/span>(&lt;span style="color:#a50">&amp;#34;Could not refresh access token, please sign in again.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(&lt;span style="color:#a50">&amp;#39;/api&amp;#39;&lt;/span>, require(&lt;span style="color:#a50">&amp;#39;./api&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>module.exports = app;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">//Use the access token in an Authorization header.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>makeOnshapeAPICall: &lt;span style="color:#00a">async&lt;/span> (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> apiUrl = &lt;span style="color:#a50">&amp;#34;https://cad.onshape.com/glassworks/explorer/#/Document/getDocuments&amp;#34;&lt;/span>; &lt;span style="color:#aaa;font-style:italic">//You can replace this with any Onshape API endpoint URL.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span> &lt;span style="color:#00a">const&lt;/span> resp = &lt;span style="color:#00a">await&lt;/span> fetch(normalizedUrl, { headers: { Authorization: &lt;span style="color:#a50">`Bearer &lt;/span>&lt;span style="color:#a50">${&lt;/span>req.user.accessToken&lt;span style="color:#a50">}&lt;/span>&lt;span style="color:#a50">`&lt;/span> }});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> data = &lt;span style="color:#00a">await&lt;/span> resp.text();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">const&lt;/span> contentType = resp.headers.get(&lt;span style="color:#a50">&amp;#39;Content-Type&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.status(resp.status).contentType(contentType).send(data);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00a">catch&lt;/span> (err) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.status(&lt;span style="color:#099">500&lt;/span>).json({ error: err });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="python">Python&lt;/h3>
&lt;p>This Python code only works on a local machine. To deploy the code, you can replace the Flask code with the web server of your choice.&lt;/p>
&lt;p>&lt;strong>Prerequisites&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip3 install flask
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip3 install requests_oauthlib
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>app.py&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">from&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">flask&lt;/span> &lt;span style="color:#00a">import&lt;/span> Flask, request, redirect, session, url_for
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">from&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">flask.json&lt;/span> &lt;span style="color:#00a">import&lt;/span> jsonify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">from&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">requests_oauthlib&lt;/span> &lt;span style="color:#00a">import&lt;/span> OAuth2Session
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">import&lt;/span> &lt;span style="color:#0aa;text-decoration:underline">os&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app = Flask(__name__)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.secret_key = &lt;span style="color:#a50">b&lt;/span>&lt;span style="color:#a50">&amp;#39;F&lt;/span>&lt;span style="color:#a50">\xf5\xe5\xc0\xbe\t&lt;/span>&lt;span style="color:#a50">g&lt;/span>&lt;span style="color:#a50">\x7f\xac\x89\x87&lt;/span>&lt;span style="color:#a50">e&lt;/span>&lt;span style="color:#a50">\xc2&lt;/span>&lt;span style="color:#a50">4&lt;/span>&lt;span style="color:#a50">\xe8&lt;/span>&lt;span style="color:#a50">m&lt;/span>&lt;span style="color:#a50">\x1c\xd9\xda\x96&lt;/span>&lt;span style="color:#a50">G,&lt;/span>&lt;span style="color:#a50">\x90&lt;/span>&lt;span style="color:#a50">i&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>os.environ[&lt;span style="color:#a50">&amp;#39;OAUTHLIB_INSECURE_TRANSPORT&amp;#39;&lt;/span>] = &lt;span style="color:#a50">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client_id = &amp;lt;Client ID of your application&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>client_secret = &amp;lt;Client Secret of your application&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>authorization_base_url = &lt;span style="color:#a50">&amp;#34;https://oauth.onshape.com/oauth/authorize&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>token_url = &lt;span style="color:#a50">&amp;#34;https://oauth.onshape.com/oauth/token&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>redirect_url = &lt;span style="color:#a50">&amp;#34;http://localhost:5000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">@app.route&lt;/span>(&lt;span style="color:#a50">&amp;#39;/&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">def&lt;/span> &lt;span style="color:#0a0">home&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onshape = OAuth2Session(client_id, redirect_uri=redirect_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth_url, state = onshape.authorization_url(authorization_base_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session[&lt;span style="color:#a50">&amp;#39;oauth_state&amp;#39;&lt;/span>] = state
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> redirect(auth_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">@app.route&lt;/span>(&lt;span style="color:#a50">&amp;#39;/token&amp;#39;&lt;/span>, methods=[&lt;span style="color:#a50">&amp;#34;GET&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">def&lt;/span> &lt;span style="color:#0a0">token&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onshape = OAuth2Session(client_id, state=session[&lt;span style="color:#a50">&amp;#39;oauth_state&amp;#39;&lt;/span>], redirect_uri=redirect_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> token = onshape.fetch_token(token_url, client_secret=client_secret, authorization_response=request.url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session[&lt;span style="color:#a50">&amp;#39;oauth_token&amp;#39;&lt;/span>] = token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> redirect(url_for(&lt;span style="color:#a50">&amp;#39;.documents&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">@app.route&lt;/span>(&lt;span style="color:#a50">&amp;#39;/documents&amp;#39;&lt;/span>, methods=[&lt;span style="color:#a50">&amp;#34;GET&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">def&lt;/span> &lt;span style="color:#0a0">documents&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extra = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;client_id&amp;#39;&lt;/span>: client_id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a50">&amp;#39;client_secret&amp;#39;&lt;/span>: client_secret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onshape = OAuth2Session(client_id, token=session[&lt;span style="color:#a50">&amp;#39;oauth_token&amp;#39;&lt;/span>], redirect_uri=redirect_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session[&lt;span style="color:#a50">&amp;#39;oauth_token&amp;#39;&lt;/span>] = onshape.refresh_token(token_url, **extra)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> jsonify(onshape.get(&lt;span style="color:#a50">&amp;#39;https://cad.onshape.com/api/v6/documents?q=Untitled&amp;amp;ownerType=1&amp;amp;sortColumn=createdAt&amp;amp;sortOrder=desc&amp;amp;offset=0&amp;amp;limit=20&amp;#39;&lt;/span>).json())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">if&lt;/span> __name__ == &lt;span style="color:#a50">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app.run()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: API Keys</title><link>https://onshape-public.github.io/docs/auth/apikeys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/auth/apikeys/</guid><description>
&lt;blockquote>
&lt;p>ðŸ“˜ &lt;strong>Note&lt;/strong>&lt;/p>
&lt;p>All applications submitted to the Onshape App Store (Onshape Apps) must follow the instructions on the &lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth2&lt;/a> page and use OAuth2 for authorization. Automation scripts (or applications not meant for the Onshape App Store) may use either OAuth2 or API Keys for authentication. OAuth2 allows applications to call Onshape APIs on behalf of the users of the application; API keys will only perform operations on behalf of the Onshape user who generated the API keys.&lt;/p>
&lt;/blockquote>
&lt;h2 id="why-api-keys">Why API Keys?&lt;/h2>
&lt;p>API keys are useful for small applications meant for personal use, allowing developers to avoid the overhead of the OAuth workflow. Creating an app is very easy with API keys: create an API key with the Developer Portal, set up a function to build your API key header as in the samples, and make your API calls! There&amp;rsquo;s no need to deal with OAuth redirects or things like that.&lt;/p>
&lt;p>We&amp;rsquo;ve moved over to using API keys for authenticating requests instead of using cookies for several reasons.&lt;/p>
&lt;ol>
&lt;li>Security: Each request is signed with unique headers so that we can be sure it&amp;rsquo;s coming from the right place.&lt;/li>
&lt;li>OAuth: The API key system we&amp;rsquo;re now using for HTTP requests is the same process developers follow when building full-blown OAuth applications; there&amp;rsquo;s no longer a disconnect between the two.&lt;/li>
&lt;/ol>
&lt;p>Once you create an API key, it will only be valid in the stack on which it was created. An API key created on the partner stack, for example, will not function on the production stack.&lt;/p>
&lt;p>If you need information or have a question unanswered in this documentation, feel free to chat with us by sending an email to &lt;a href="mailto:api-support@onshape.com">api-support@onshape.com&lt;/a> or by checking out the &lt;a href="https://forum.onshape.com" target="_blank">forums&lt;/a>. If you are a member of the DevPartners group (see the Development help page for information) more detailed instructions and code examples are in the apikey sample repo.&lt;/p>
&lt;h2 id="1-create-api-keys">1. Create API Keys&lt;/h2>
&lt;ol>
&lt;li>Go to &lt;a href="https://dev-portal.onshape.com">https://dev-portal.onshape.com&lt;/a>.&lt;/li>
&lt;li>In the left pane, click &lt;code>API keys&lt;/code>.&lt;/li>
&lt;li>Click the &lt;code>Create new API key&lt;/code> button.&lt;/li>
&lt;li>Select the desired permissions for your app.&lt;/li>
&lt;li>Click the &lt;code>Create API key&lt;/code> button. &lt;/br>
&lt;img src="https://onshape-public.github.io/images/CreateNewAPIKey.png" alt="image">&lt;/li>
&lt;li>Copy both the &lt;strong>access key&lt;/strong> and &lt;strong>secret key&lt;/strong> from the pop-up window, save them somewhere, then click the &lt;code>Close&lt;/code> button.
&lt;/br>&lt;strong>IMPORTANT NOTE: You will not be able to find the secret key again, so save it somewhere safe!&lt;/strong>&lt;/br>
&lt;img src="https://onshape-public.github.io/images/APIKeySecretKey.png" alt="image">&lt;/li>
&lt;li>The details for your application appear. &lt;/br>
&lt;img src="https://onshape-public.github.io/images/DevPortalKeys.png" alt="image">&lt;/li>
&lt;li>Now that you have a key pair, see &lt;a href="#generating-a-request-signature">Generate a Request Signature&lt;/a> for information on signing your requests to use our API.&lt;/li>
&lt;/ol>
&lt;p>Once you have your access key and secret, you will want to avoid giving others access to them, since they&amp;rsquo;re tied directly to your personal Onshape account. Think of your API key as a username and password pair. Do not place them directly in the code for your application, especially if others might see it. The samples we provide here use a separate configuration file to contain this information, but there are other ways to keep the access key and secret safe, like setting them as environment variables.&lt;/p>
&lt;h3 id="scopes">Scopes&lt;/h3>
&lt;p>There are several scopes available for API keys (equivalent to OAuth scopes):&lt;/p>
&lt;ul>
&lt;li>&lt;code>OAuth2Read&lt;/code> - Read non-personal information (documents, parts, etc.)&lt;/li>
&lt;li>&lt;code>OAuth2ReadPII&lt;/code> - Read personal information (name, email, etc.)&lt;/li>
&lt;li>&lt;code>OAuth2Write&lt;/code> - Create and edit documents, etc.&lt;/li>
&lt;li>&lt;code>OAuth2Delete&lt;/code> - Delete documents, etc.&lt;/li>
&lt;li>&lt;code>OAuth2Purchase&lt;/code> - Authorize purchases from account&lt;/li>
&lt;/ul>
&lt;h2 id="2-select-an-authentication-option">2. Select an Authentication Option&lt;/h2>
&lt;p>Please select an option for authentication:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#local-authorization">Basic Authorization&lt;/a>: Lowest security. For local testing only.&lt;/li>
&lt;li>&lt;a href="#request-signature">Request Signature&lt;/a>: Medium security. For testing and internal use.&lt;/li>
&lt;li>&lt;a href="https://onshape-public.github.io/docs/auth/oauth">OAuth2&lt;/a>: Highest security. Required for all Onshape Apps.&lt;/li>
&lt;/ul>
&lt;h2 id="basic-authorization">Basic Authorization&lt;/h2>
&lt;p>For local testing, you can provide a basic authentication via your API Keys.&lt;/p>
&lt;ol>
&lt;li>Open your terminal and run the following command, replacing &lt;code>ACCESS_KEY&lt;/code> and &lt;code>SECRET_KEY&lt;/code> with the &lt;strong>access key&lt;/strong> and &lt;strong>secret key&lt;/strong> you created earlier. Remember to include the colon (&lt;code>:&lt;/code>) between the keys. &lt;em>You will receive a long, base-64-encoded string as output.&lt;/em>
&lt;ul>
&lt;li>&lt;strong>MacOS&lt;/strong>:
&lt;pre tabindex="0">&lt;code>printf ACCESS_KEY:SECRET_KEY | base64
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;strong>Windows&lt;/strong>:
&lt;pre tabindex="0">&lt;code>powershell &amp;#34;[convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(\&amp;#34;ACCESS_KEY:SECRET_KEY\&amp;#34;))&amp;#34;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Add the authorization header to your code, replacing &lt;code>CREDENTIALS&lt;/code> with the string you receieved in Step 1:
&lt;pre tabindex="0">&lt;code>-H &amp;#39;Authorization: Basic CREDENTIALS&amp;#39; \
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>See our &lt;a href="https://onshape-public.github.io/docs/api-intro/quickstart">Quick Start Guide&lt;/a> for an example of using Basic Authorization in an app.&lt;/p>
&lt;h2 id="request-signature">Request Signature&lt;/h2>
&lt;p>For additional security, you can include your API Keys as part of a request signature. This provides more security than the Basic Authorization above, but less security than OAuth2.&lt;/p>
&lt;p>To ensure that a request is coming from you, we have a process for signing requests that you must follow for API calls to work. Everything is done via HTTP headers that you&amp;rsquo;ll need to set:&lt;/p>
&lt;ol>
&lt;li>&lt;em>Date&lt;/em>: A standard date header giving the time of the request; must be accurate within &lt;strong>5 minutes&lt;/strong> of request. Example: &lt;code>Mon, 11 Apr 2016 20:08:56 GMT&lt;/code>&lt;/li>
&lt;li>&lt;em>On-Nonce&lt;/em>: A string that satisfies the following requirements (see the code for one possible way to generate it):
&lt;ul>
&lt;li>At least 16 characters&lt;/li>
&lt;li>Alphanumeric&lt;/li>
&lt;li>Unique for each request&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;em>Authorization&lt;/em>: This is where the API keys come into play. You&amp;rsquo;ll sign the request by implementing this algorithm:
&lt;ul>
&lt;li>&lt;strong>Input&lt;/strong>: Method, URL, On-Nonce, Date, Content-Type, AccessKey, SecretKey&lt;/li>
&lt;li>&lt;strong>Output&lt;/strong>: String of the form: &lt;code>On &amp;lt;AccessKey&amp;gt;:HmacSHA256:&amp;lt;Signature&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;strong>Steps to generate the signature portion&lt;/strong>:
&lt;ol>
&lt;li>Parse the URL and get the following:
&lt;ol>
&lt;li>The path, e.g. &lt;code>/api/documents&lt;/code> (no query params!)&lt;/li>
&lt;li>The query string, e.g. &lt;code>a=1&amp;amp;b=2&lt;/code>
&lt;ul>
&lt;li>NOTE: If no query paramaters are present, use an empty string&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Create a string by appending the following information in order. Each field should be separated by a newline (&lt;code>\n&lt;/code>) character, and the string must be converted to lowercase:
&lt;ol>
&lt;li>HTTP method&lt;/li>
&lt;li>On-Nonce header value&lt;/li>
&lt;li>Date header value&lt;/li>
&lt;li>Content-Type header value&lt;/li>
&lt;li>URL pathname&lt;/li>
&lt;li>URL query string&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Using SHA-256, generate an &lt;a href="https://en.wikipedia.org/wiki/Hash-based_message_authentication_code" target="_blank">HMAC digest&lt;/a>, using the API secret key first and then the above string, then encode it in Base64.&lt;/li>
&lt;li>Create the &lt;code>On &amp;lt;AccessKey&amp;gt;:HmacSHA256:&amp;lt;Signature&amp;gt;&lt;/code> string and use that in the Authorization header in your request.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Below is an example function to generate the authorization header, using Node.js&amp;rsquo;s standard &lt;code>crypto&lt;/code> and &lt;code>url&lt;/code> libraries:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">// ...at top of file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>&lt;span style="color:#00a">var&lt;/span> u = require(&lt;span style="color:#a50">&amp;#39;url&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">var&lt;/span> crypto = require(&lt;span style="color:#a50">&amp;#39;crypto&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* Generates the &amp;#34;Authorization&amp;#34; HTTP header for using the Onshape API
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} method - Request method; GET, POST, etc.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} url - The full request URL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} nonce - 25-character nonce (generated by you)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} authDate - UTC-formatted date string (generated by you)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} contentType - Value of the &amp;#34;Content-Type&amp;#34; header; generally &amp;#34;application/json&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} accessKey - API access key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @param {string} secretKey - API secret key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">* @return {string} Value for the &amp;#34;Authorization&amp;#34; header
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a">function&lt;/span> createSignature(method, url, nonce, authDate, contentType, accessKey, secretKey) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> urlObj = u.parse(url);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> urlPath = urlObj.pathname;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> urlQuery = urlObj.query ? urlObj.query : &lt;span style="color:#a50">&amp;#39;&amp;#39;&lt;/span>; &lt;span style="color:#aaa;font-style:italic">// if no query, use empty string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> str = (method + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span> + nonce + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span> + authDate + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span> + contentType + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span> +
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPath + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span> + urlQuery + &lt;span style="color:#a50">&amp;#39;\n&amp;#39;&lt;/span>).toLowerCase();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> hmac = crypto.createHmac(&lt;span style="color:#a50">&amp;#39;sha256&amp;#39;&lt;/span>, secretKey)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .update(str)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .digest(&lt;span style="color:#a50">&amp;#39;base64&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">var&lt;/span> signature = &lt;span style="color:#a50">&amp;#39;On &amp;#39;&lt;/span> + accessKey + &lt;span style="color:#a50">&amp;#39;:HmacSHA256:&amp;#39;&lt;/span> + hmac;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00a">return&lt;/span> signature;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="redirects">Redirects&lt;/h3>
&lt;p>Some API endpoints return 307 redirects. You must generate an Authorization header for the redirect as well, but please note that the server portion of the URL might be different, the redirect URL may contain query parameters that must be encoded in the Authorization header, etc.&lt;/p></description></item></channel></rss>