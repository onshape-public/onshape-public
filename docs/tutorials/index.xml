<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sample Apps on</title><link>https://onshape-public.github.io/docs/tutorials/</link><description>Recent content in Sample Apps on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate><atom:link href="https://onshape-public.github.io/docs/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Sync Data and Metadata</title><link>https://onshape-public.github.io/docs/tutorials/sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/tutorials/sync/</guid><description>The first business case is probably the most common, “How do I sync data that I create in Onshape with my ERP or PLM system?”. There could be many reasons why you would want to sync data between two different systems. Primarily Onshape is a system that creates new data. This data is created by designers as they perform their daily tasks. While the designer works primarily in Onshape, the actual data that they create does not exist in a vacuum, it is used by other departments, other processes within the organization.</description></item><item><title>Sync Releases and Revisions</title><link>https://onshape-public.github.io/docs/tutorials/releases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/tutorials/releases/</guid><description>This tutorials builds off the Sync Data and Metadata tutorial. Please complete that one before starting on this one.
In this case, we’ll be looking at the ability for Onshape to sync its release data with an external system and for that system to send information back to Onshape with regards to released data.
This specific business case will look at what happens when you wish for a PLM system to control the release of data instead of Onshape having that control – this is in fact a common use case.</description></item><item><title>Generate Derivative Files</title><link>https://onshape-public.github.io/docs/tutorials/derivative/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/tutorials/derivative/</guid><description>This tutorials builds off the Sync Releases and Revisions tutorial. Please complete that one before starting on this one.
It’s clear by now that Onshape doesn’t use files to store its data, instead it is a data driven solution that is always up to date. Files are a snapshot in time that provide a view of the design at a specific point in time - such as at a release or version.</description></item><item><title>Create an Extension</title><link>https://onshape-public.github.io/docs/tutorials/createextension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/tutorials/createextension/</guid><description>In this example, you will create a custom web page (as shown in the image below) that is displayed in the right-hand fly-out panel. This interface displays metadata pulled from a third-party system when a part in Onshape is selected. This interface can also update metadata in Onshape through the Update functionality.
You can follow along with the steps below with this video: Define the extension This tutorials builds off the Generate Derivative Files tutorial.</description></item><item><title>glTF Viewer</title><link>https://onshape-public.github.io/docs/tutorials/gltf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onshape-public.github.io/docs/tutorials/gltf/</guid><description>The GLTF Viewer is a sample application that demonstrates:
How to fetch a glTF representation of an Onshape model How to create an app that runs as a tab inside an Onshape document OAuth2 authentication Use of REST APIs Use of document context The application is built using Express and is deployed on Heroku.
Refer to the gltf-viewer-app README for instructions on running this sample app.</description></item></channel></rss>